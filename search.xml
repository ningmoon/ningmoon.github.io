<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>无人驾驶控制算法LQR和MPC的仿真实现</title>
      <link href="2021/01/18/Research210118-%E6%97%A0%E4%BA%BA%E9%A9%BE%E9%A9%B6%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95LQR%E5%92%8CMPC%E7%9A%84%E4%BB%BF%E7%9C%9F%E5%AE%9E%E7%8E%B0/"/>
      <url>2021/01/18/Research210118-%E6%97%A0%E4%BA%BA%E9%A9%BE%E9%A9%B6%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95LQR%E5%92%8CMPC%E7%9A%84%E4%BB%BF%E7%9C%9F%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/01/18/Research210118-%E6%97%A0%E4%BA%BA%E9%A9%BE%E9%A9%B6%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95LQR%E5%92%8CMPC%E7%9A%84%E4%BB%BF%E7%9C%9F%E5%AE%9E%E7%8E%B0/mpc-1.png" alt="The First Title Picture" title="Optional Title"></p><a id="more"></a><h1 id="1-首先来说说LQR"><a href="#1-首先来说说LQR" class="headerlink" title="1 首先来说说LQR"></a>1 首先来说说LQR</h1><h2 id="1-1-Problem-Statement"><a href="#1-1-Problem-Statement" class="headerlink" title="1.1 Problem Statement"></a>1.1 Problem Statement</h2><p>首先我们简单的假设一个物理系统，在光滑的一维地面上有一个质量为 $m$ 的滑块，初始位置与初始速度都为 $0$，现需要设计控制器，在传感器测得滑块位置 $x$ 的基础上，为滑块提供外力 $u$，使其跟随参考点 $x_r$ 。</p><p><img src="/2021/01/18/Research210118-%E6%97%A0%E4%BA%BA%E9%A9%BE%E9%A9%B6%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95LQR%E5%92%8CMPC%E7%9A%84%E4%BB%BF%E7%9C%9F%E5%AE%9E%E7%8E%B0/lqr-1.png" alt="The First Title Picture" title="示例图"></p><p>建立动力学模型：</p><script type="math/tex; mode=display">\ddot x = \frac{u}{m}</script><p>选取状态向量 $x= \begin{bmatrix} x_1 \ x_2 \end{bmatrix} =\begin{bmatrix} x \\dot x \end{bmatrix}$ ，这里我们将状态变量的x1等于位移x，状态变量x2等于速度，得到系统状态方程为：</p><script type="math/tex; mode=display">\dot x= Ax+Bu</script><p>其中：</p><script type="math/tex; mode=display">A=\begin{bmatrix} 0 & 1 \\ 0 & 0 \end{bmatrix},B=\begin{bmatrix} 0 \\ \frac{1}{m} \end{bmatrix}</script><p>我们需要的输出是 $x_1$（也就是我们的位移量），我们希望能通过控制 $u$来达到控制我们物块位移 $x_1$。</p><p>我们看到系统的开环矩阵 $A$ 就可以判断如果没有控制器这个系统是不可能稳定的，从物理角度也很好理解你给这个物块一个不变的 $u$，物块在光滑的地面上是不可能自己停下来的。</p><h2 id="1-2-控制器"><a href="#1-2-控制器" class="headerlink" title="1.2 控制器"></a>1.2 控制器</h2><p>我们上节说到需要引入控制器才能使我们的系统稳定，我们考虑：</p><script type="math/tex; mode=display">u=-kx=-\begin{bmatrix} k_1,k_2,\cdots \end{bmatrix}\begin{bmatrix} x_1 \\ x_2 \\ \vdots \end{bmatrix}</script><p>这样我们就可以得到一个新的闭环矩阵：</p><script type="math/tex; mode=display">\begin{align*}&\dot x = Ax-Bkx =(A-Bk)x \\&\dot x=A_{cl}x\end{align*}</script><p>也就是说我们通过选择k来改变 $A_{cl}$ 的特征值从而达到来控制系统的表现的目的。</p><p>所以问题就是我们如何来选择这个最好的 $k$ ？</p><p><span style="color:red;"> <strong>我们有很多方法可以让系统达到稳定的状态，但是如何选取这个特征值将决定着我们让这个系统以一个怎么样的方式去靠近这个稳定状态。</strong> </span></p><p>所以带着对这句话的理解，我们来看LQR控制器的思想。</p><h2 id="1-3-LQR-Linear-Quadratic-Regulator"><a href="#1-3-LQR-Linear-Quadratic-Regulator" class="headerlink" title="1.3 LQR(Linear Quadratic Regulator)"></a>1.3 LQR(Linear Quadratic Regulator)</h2><p>我们引入 <code>Cost Function</code> 的概念</p><script type="math/tex; mode=display">J= \int_0^\infty{(x^TQx+u^TRu)}dt</script><p>在这里Q矩阵 $\begin{bmatrix} a &amp; 0 &amp; 0 \ 0 &amp; b &amp; 0 \ 0 &amp; 0 &amp; c \end{bmatrix}$ 的a,b,c对应的是 $x_1^2, x_2^2, x_3^2$ ，从这里看到我们希望x1对系统的影响大一点的话，我们就可以增加a的值，同理如果我们的R值很大，自然输入u对于系统的影响就会很大。</p><p>综上就是LQR可以在满足系统稳定性的同时，帮我们寻找到代价函数的最小值。</p><script type="math/tex; mode=display">min J= \int_0^\infty{(x^TQx+u^TRu)}dt</script><p>现在我们回到刚才的小物块物理系统，我们现在希望小物块按照我们预设的轨迹 $x_r$运动，所以我们会有一个误差 $e$，那最终我们希望这个误差可以趋向于0，我们稍微更改一下我们现在的状态方程，我们用误差e来替换我们的x1，也就是</p><script type="math/tex; mode=display">\dot e=\dot x_r - \dot x_1=-\dot x_1 = -x_2</script><p> 那么得到新的状态方程</p><script type="math/tex; mode=display">\begin{bmatrix} \dot e \\ \dot x_2 \end{bmatrix} = \begin{bmatrix} 0 & -1 \\ 0 & 0 \end{bmatrix} \begin{bmatrix}  e \\ x_2 \end{bmatrix} + \begin{bmatrix} 0 \\ \frac{1}{m} \end{bmatrix}u</script><p>假设在这里我们希望u对代价函数的影响更大一点，我们就分别设置Q和R为：</p><script type="math/tex; mode=display">Q = \begin{bmatrix} 1 & 0 \\ 0 & 1 \end{bmatrix} \\R=10</script><p>利用Riccati方程计算</p><p><img src="/2021/01/18/Research210118-%E6%97%A0%E4%BA%BA%E9%A9%BE%E9%A9%B6%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95LQR%E5%92%8CMPC%E7%9A%84%E4%BB%BF%E7%9C%9F%E5%AE%9E%E7%8E%B0/lqr-3.png" alt="The First Title Picture" title="示例图"></p><h2 id="1-4-仿真建模"><a href="#1-4-仿真建模" class="headerlink" title="1.4 仿真建模"></a>1.4 仿真建模</h2><p>简单粗略地仿真建模，不美观见谅 ＞ˍ＜</p><p><img src="/2021/01/18/Research210118-%E6%97%A0%E4%BA%BA%E9%A9%BE%E9%A9%B6%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95LQR%E5%92%8CMPC%E7%9A%84%E4%BB%BF%E7%9C%9F%E5%AE%9E%E7%8E%B0/lqr-2.png" alt="The First Title Picture" title="示例图"></p><p>我们将初始值设在5，目标值设在1，最后得到</p><p><img src="/2021/01/18/Research210118-%E6%97%A0%E4%BA%BA%E9%A9%BE%E9%A9%B6%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95LQR%E5%92%8CMPC%E7%9A%84%E4%BB%BF%E7%9C%9F%E5%AE%9E%E7%8E%B0/lqr-4.png" alt="The First Title Picture" title="示例图"></p><p>至此一个简单物理系统的LQR控制系统就OK了，接下来我们看一下更复杂一点的MPC。</p><h1 id="2-接着说MPC"><a href="#2-接着说MPC" class="headerlink" title="2.接着说MPC"></a>2.接着说MPC</h1><h2 id="2-1-模型的离散化"><a href="#2-1-模型的离散化" class="headerlink" title="2.1 模型的离散化"></a>2.1 模型的离散化</h2><p>还是之前的控制对象：</p><script type="math/tex; mode=display">\dot x= Ax+Bu</script><p>我们用前向欧拉法将状态方程离散化：</p><script type="math/tex; mode=display">\begin{align*}&\dot x =\frac{x(k+1)-x(k)}{T}=Ax(k)+Bu(k) \\&x(k+1) =(I+TA)x(k)+TBu(k) \\&x(k+1) =\bar Ax(k) + \bar B u(k)\end{align*}</script><p>其中</p><script type="math/tex; mode=display">\bar A=\begin{bmatrix} 1 & T \\ 0 & 1 \end{bmatrix},\bar B=\begin{bmatrix} 0 \\ \frac{T}{m} \end{bmatrix}</script><p>这里的T是控制周期。</p><h2 id="2-2-Prediction预测"><a href="#2-2-Prediction预测" class="headerlink" title="2.2 Prediction预测"></a>2.2 Prediction预测</h2><p>MPC方法的一个独特之处就是需要对未来系统状态进行预测，在k时刻我们预估未来p个控制周期内预测的系统状态为：</p><script type="math/tex; mode=display">X_k= \begin{bmatrix} x(k+1|k)^T & x(k+2|k)^T &\cdots& x(k+p|k)^T \end{bmatrix}^T</script><p>p称为预测时域，括号中k+1|k表示在当前k时刻预测k+1时刻的系统状态，以此类推。</p><p>另外，预测动态系统未来状态时，还需要知道预测时域内的控制量Uk：</p><script type="math/tex; mode=display">U_k= \begin{bmatrix} u(k|k)^T & u(k+1|k)^T &\cdots& u(k+p-1|k)^T \end{bmatrix}^T</script><p>这是我们接下来将要求解的优化问题的独立变量。</p><p>现在，我们可以通过离散化状态方程依次对未来p个控制周期的系统状态进行预测：</p><script type="math/tex; mode=display">\begin{align*}& x(k+1|k) = \bar Ax(k) + \bar B u(k|k) \\& x(k+2|k) = \bar A^2x(k) + \bar A \bar B u(k|k) + \bar B u(k+1|k) \\& x(k+3|k) = \bar A^3x(k) + \bar A^2 \bar B u(k|k) + \bar A \bar B u(k+1|k) +\bar B u(k+2|k)\\& \vdots \\& x(k+p|k) = \bar A^p x(k) + \sum_{i=0}^{p-1} \bar A^{p-1-i} \bar B u(k+i|k) \end{align*}</script><p>整合成矩阵形式：</p><script type="math/tex; mode=display">X_k=\Psi x(k)+ \Theta U_k</script><p>其中 </p><script type="math/tex; mode=display">\Psi =\begin{bmatrix} \bar A^1 \\ \bar A^2  \\ \vdots \\ \bar A^p \end{bmatrix}, \Theta =\begin{bmatrix} \bar A ^{1-1} \bar B & \cdots & 0 & 0 \\                  \bar A ^{2-1} \bar B & \bar A ^{2-2} \bar B & \cdots & 0 \\                 \vdots & \vdots & \ddots & \vdots \\                 \bar A ^{p-1} \bar B & \bar A ^{p-2} \bar B & \cdots & \bar A ^{p-p} \bar B \end{bmatrix}</script><p>上式中的下三角形式，直接反映了系统在时间上的因果关系，即k+1时刻的输入对k时刻的输出没有影响，k+2时刻的输入对k和k+1时刻没有影响。</p><h2 id="2-3-优化"><a href="#2-3-优化" class="headerlink" title="2.3 优化"></a>2.3 优化</h2><p>这一节我们将求解预测时域内的控制输出$U_k$，在求解优化问题之前，我们首先明确优化问题的数学描述。</p><p>我们的控制目标是使系统的状态跟踪期望的一条轨迹，通常称为参考值，定义预测时域内的参考值序列：</p><script type="math/tex; mode=display">R_k= \begin{bmatrix} r(k+1)^T & r(k+2)^T & \cdots & x(k+p)^T \end{bmatrix}^T</script><p>注意，在k时刻进行控制的时候，控制器就必须已经得到了k时刻到k+p时刻的参考值，而PID就不需要这么多信息，这是MPC的一个缺点。</p><p>我们希望寻找最佳的控制量$U_k$，使得预测时域内的状态向量与参考值越接近越好，这是一个开环最优控制问题。为此，我们用预测状态向量与参考值之间的累计误差定义一个简单的优化目标函数：</p><script type="math/tex; mode=display">J(U_k)=(X_k-R_k)^TQ(X_k-R_k)</script><p>经常地，我们不希望控制动作太大，优化目标函数再添加一项对控制量的约束：</p><script type="math/tex; mode=display">J(U_k)=(X_k-R_k)^TQ(X_k-R_k)+U_k^TWU_k</script><p>因此，该优化问题可以描述如下：</p><script type="math/tex; mode=display">min J(U_k)</script><p>我们将优化函数J(Uk)展开后合并同类项：</p><script type="math/tex; mode=display">\begin{align*}J(U_k)  &= (X_k-R_k)^TQ(X_k-R_k)+U_k^TWU_k \\        &= (E+\Theta U_k)^TQ(E+\Theta U)+U_k^TWU_k \\        &= E^TQE + (\Theta U_k)^TQ(\Theta U_k)+2E^TQ(\Theta U_k)+U_k^TWU_k \\        &=  U_k^T \Theta^T Q \Theta U_k+U_k^TWU_k +2E^TQ(\Theta U_k)+E^TQE \\        &=  U_k^T (\Theta^T Q \Theta + W)U_k +2(E^TQ\Theta) U_k +E^TQE \end{align*}</script><p>上式中  是常数项，对“$U_k$为何值时$J$取得最小值”这一问题没有影响，因此直接舍去。</p><p>如图，matlab输入 “help quadprog”查看二次型优化函数quadprog的说明文档，令</p><script type="math/tex; mode=display">\left\{            \begin{align*}& H=2(\Theta^TQ\Theta+W) \\& f^T=2E^TQ\Theta\end{align*}\right.</script><p>可得最终优化目标函数，至此可直接调用matlab quadprog函数求解$U_k$，将$U_k$的第一个元素提取出来，作为本控制周期的控制量。</p><script type="math/tex; mode=display">J(U_k)=\frac{1}{2}U_k^THU_k+f^Tx</script><p><img src="/2021/01/18/Research210118-%E6%97%A0%E4%BA%BA%E9%A9%BE%E9%A9%B6%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95LQR%E5%92%8CMPC%E7%9A%84%E4%BB%BF%E7%9C%9F%E5%AE%9E%E7%8E%B0/mpc-2.png" alt="The First Title Picture" title="示例图"></p><h2 id="2-4-仿真"><a href="#2-4-仿真" class="headerlink" title="2.4 仿真"></a>2.4 仿真</h2><p>我们对动力学方程两边拉普拉斯变换：</p><script type="math/tex; mode=display">s^2X(s)=\frac{1}{m}F(s)</script><p>得到传递函数为：</p><script type="math/tex; mode=display">G(s)=\frac{X(s)}{F(s)}=\frac{1}{ms^2}</script><p>建立仿真：</p><p><img src="/2021/01/18/Research210118-%E6%97%A0%E4%BA%BA%E9%A9%BE%E9%A9%B6%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95LQR%E5%92%8CMPC%E7%9A%84%E4%BB%BF%E7%9C%9F%E5%AE%9E%E7%8E%B0/mpc-3.png" alt="The First Title Picture" title="示例图"></p><p>我们得到在固定值和sinwave的情况下基本都可以跟踪的比较好（参数还可继续优化）</p><p><img src="/2021/01/18/Research210118-%E6%97%A0%E4%BA%BA%E9%A9%BE%E9%A9%B6%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95LQR%E5%92%8CMPC%E7%9A%84%E4%BB%BF%E7%9C%9F%E5%AE%9E%E7%8E%B0/mpc-5.png" alt="The First Title Picture" title="示例图"></p><p><img src="/2021/01/18/Research210118-%E6%97%A0%E4%BA%BA%E9%A9%BE%E9%A9%B6%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95LQR%E5%92%8CMPC%E7%9A%84%E4%BB%BF%E7%9C%9F%E5%AE%9E%E7%8E%B0/mpc-4.png" alt="The First Title Picture" title="示例图"></p><p>其中MPC代码为：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u</span> = <span class="title">Controller</span><span class="params">(pos_ref, pos, vel)</span></span></span><br><span class="line"><span class="comment">%参数设置</span></span><br><span class="line">m    = <span class="number">1.05</span>;                <span class="comment">%滑块质量,增加了5%作为建模误差</span></span><br><span class="line">T    = <span class="number">0.01</span>;                <span class="comment">%控制周期10ms</span></span><br><span class="line">p    = <span class="number">40</span>;                  <span class="comment">%控制时域（预测时域）</span></span><br><span class="line">Q    = <span class="number">10</span>*<span class="built_in">eye</span>(<span class="number">2</span>*p);         <span class="comment">%累计误差权重</span></span><br><span class="line">W    = <span class="number">0.0001</span>*<span class="built_in">eye</span>(p);       <span class="comment">%控制输出权重</span></span><br><span class="line">umax = <span class="number">100</span>;                 <span class="comment">%控制量限制，即最大的力</span></span><br><span class="line">Rk   = <span class="built_in">zeros</span>(<span class="number">2</span>*p,<span class="number">1</span>);        <span class="comment">%参考值序列</span></span><br><span class="line">Rk(<span class="number">1</span>:<span class="number">2</span>:<span class="keyword">end</span>) = pos_ref;    </span><br><span class="line">Rk(<span class="number">2</span>:<span class="number">2</span>:<span class="keyword">end</span>) = vel;          <span class="comment">%参考速度跟随实际速度</span></span><br><span class="line"><span class="comment">%构建中间变量</span></span><br><span class="line">xk    = [pos;vel];          <span class="comment">%xk</span></span><br><span class="line">A_    = [<span class="number">1</span> T;<span class="number">0</span> <span class="number">1</span>];          <span class="comment">%离散化预测模型参数A</span></span><br><span class="line">B_    = [<span class="number">0</span>;T/m];            <span class="comment">%离散化预测模型参数B</span></span><br><span class="line"><span class="built_in">psi</span>   = <span class="built_in">zeros</span>(<span class="number">2</span>*p,<span class="number">2</span>);       <span class="comment">%psi</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">1</span>:p</span><br><span class="line">    <span class="built_in">psi</span>(<span class="built_in">i</span>*<span class="number">2</span><span class="number">-1</span>:<span class="built_in">i</span>*<span class="number">2</span>,<span class="number">1</span>:<span class="number">2</span>)=A_^<span class="built_in">i</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">theta = <span class="built_in">zeros</span>(<span class="number">2</span>*p,p);       <span class="comment">%theta</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">1</span>:p</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="number">1</span>:<span class="built_in">i</span></span><br><span class="line">        theta(<span class="built_in">i</span>*<span class="number">2</span><span class="number">-1</span>:<span class="built_in">i</span>*<span class="number">2</span>,<span class="built_in">j</span>)=A_^(<span class="built_in">i</span>-<span class="built_in">j</span>)*B_;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">E = <span class="built_in">psi</span>*xk-Rk;              <span class="comment">%E</span></span><br><span class="line">H = <span class="number">2</span>*(theta'*Q*theta+W);   <span class="comment">%H</span></span><br><span class="line">f = (<span class="number">2</span>*E'*Q*theta)';        <span class="comment">%f</span></span><br><span class="line"><span class="comment">%优化求解</span></span><br><span class="line">coder.extrinsic(<span class="string">'quadprog'</span>);</span><br><span class="line">Uk=quadprog(H,f,[],[],[],[],-umax,umax);</span><br><span class="line"><span class="comment">%返回控制量序列第一个值</span></span><br><span class="line">u = <span class="number">0.0</span>;                    <span class="comment">%显示指定u的类型</span></span><br><span class="line">u = Uk(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>　　　　　　　</p>]]></content>
      
      
      <categories>
          
          <category> Research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LQR </tag>
            
            <tag> MPC </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL容器之list容器</title>
      <link href="2020/11/24/Cpp201124-STL%E5%AE%B9%E5%99%A8%E4%B9%8Blist%E5%AE%B9%E5%99%A8/"/>
      <url>2020/11/24/Cpp201124-STL%E5%AE%B9%E5%99%A8%E4%B9%8Blist%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/11/24/Cpp201124-STL%E5%AE%B9%E5%99%A8%E4%B9%8Blist%E5%AE%B9%E5%99%A8/list-1.jpg" alt="The First Title Picture"></p><a id="more"></a><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p><strong>功能：</strong>将数据进行链式存储</p><p><strong>链表</strong>（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</p><p>链表的组成：链表由一系列<strong>结点</strong>组成。</p><p>结点的组成：一个是存储数据元素的<strong>数据域</strong>，另一个是存储下一个结点地址的<strong>指针域</strong>。</p><p><img src="/2020/11/24/Cpp201124-STL%E5%AE%B9%E5%99%A8%E4%B9%8Blist%E5%AE%B9%E5%99%A8/list-2.png" alt="The First Title Picture"></p><p>STL中的链表是一个双向循环链表</p><p><img src="/2020/11/24/Cpp201124-STL%E5%AE%B9%E5%99%A8%E4%B9%8Blist%E5%AE%B9%E5%99%A8/list-3.png" alt="The First Title Picture"></p><p>由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于<strong>双向迭代器</strong>。</p><p>list的优点：</p><p>采用动态存储分配，不会造成内存浪费和溢出，用多少开多少空间，不像vector那样预留很多空间；</p><p>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素。</p><p>list的缺点：</p><p>链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大；</p><p>List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。 </p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>Talk is cheap, show me the code.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(<span class="keyword">const</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&amp; ll)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::const_iterator it = ll.<span class="built_in">begin</span>(); it != ll.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数原型：</span></span><br><span class="line"><span class="comment">list&lt;T&gt; lst; //list采用采用模板类实现,对象的默认构造形式：</span></span><br><span class="line"><span class="comment">list(beg,end); //构造函数将[beg, end)区间中的元素拷贝给本身。</span></span><br><span class="line"><span class="comment">list(n,elem); //构造函数将n个elem拷贝给本身。</span></span><br><span class="line"><span class="comment">list(const list &amp;lst); //拷贝构造函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l1;</span><br><span class="line">l1.push_back(<span class="number">10</span>);</span><br><span class="line">l1.push_back(<span class="number">20</span>);</span><br><span class="line">l1.push_back(<span class="number">30</span>);</span><br><span class="line">l1.push_back(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">printList(l1);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">l2</span><span class="params">(l1.<span class="built_in">begin</span>(), l1.<span class="built_in">end</span>())</span></span>;</span><br><span class="line">printList(l2);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">l3</span><span class="params">(<span class="number">10</span>, <span class="number">88</span>)</span></span>;</span><br><span class="line">printList(l3);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">l4</span><span class="params">(l3)</span></span>;</span><br><span class="line">printList(l4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">赋值和交换函数原型：</span></span><br><span class="line"><span class="comment">assign(beg, end); //将[beg, end)区间中的数据拷贝赋值给本身。</span></span><br><span class="line"><span class="comment">assign(n, elem); //将n个elem拷贝赋值给本身。</span></span><br><span class="line"><span class="comment">list&amp; operator=(const list &amp;lst); //重载等号操作符</span></span><br><span class="line"><span class="comment">swap(lst); //将lst与本身的元素互换。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l1;</span><br><span class="line">l1.push_back(<span class="number">10</span>);</span><br><span class="line">l1.push_back(<span class="number">20</span>);</span><br><span class="line">l1.push_back(<span class="number">30</span>);</span><br><span class="line">l1.push_back(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">printList(l1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l2;</span><br><span class="line">l2.assign(l1.<span class="built_in">begin</span>(), l1.<span class="built_in">end</span>());</span><br><span class="line">printList(l2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l3;</span><br><span class="line">l3.assign(<span class="number">10</span>, <span class="number">88</span>);</span><br><span class="line">printList(l3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l4;</span><br><span class="line">l4 = l3;</span><br><span class="line">printList(l4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//swap 需不需要元素个数相等</span></span><br><span class="line">l4.swap(l1);</span><br><span class="line">printList(l1);</span><br><span class="line">printList(l4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">大小操作函数原型：</span></span><br><span class="line"><span class="comment">size(); //返回容器中元素的个数</span></span><br><span class="line"><span class="comment">empty(); //判断容器是否为空</span></span><br><span class="line"><span class="comment">resize(num); //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</span></span><br><span class="line"><span class="comment">//如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br><span class="line"><span class="comment">resize(num, elem); //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</span></span><br><span class="line"><span class="comment">//如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l1;</span><br><span class="line">l1.push_back(<span class="number">10</span>);</span><br><span class="line">l1.push_back(<span class="number">20</span>);</span><br><span class="line">l1.push_back(<span class="number">30</span>);</span><br><span class="line">l1.push_back(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">printList(l1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l1.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Empty"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"the size of l1: "</span> &lt;&lt; l1.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">l1.resize(<span class="number">10</span>, <span class="number">1000</span>);</span><br><span class="line">printList(l1);</span><br><span class="line"></span><br><span class="line">l1.resize(<span class="number">4</span>);</span><br><span class="line">printList(l1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">插入和删除函数原型：</span></span><br><span class="line"><span class="comment">push_back(elem);//在容器尾部加入一个元素</span></span><br><span class="line"><span class="comment">pop_back();//删除容器中最后一个元素</span></span><br><span class="line"><span class="comment">push_front(elem);//在容器开头插入一个元素</span></span><br><span class="line"><span class="comment">pop_front();//从容器开头移除第一个元素</span></span><br><span class="line"><span class="comment">insert(pos,elem);//在pos位置插elem元素的拷贝，返回新数据的位置。</span></span><br><span class="line"><span class="comment">insert(pos,n,elem);//在pos位置插入n个elem数据，无返回值。</span></span><br><span class="line"><span class="comment">insert(pos,beg,end);//在pos位置插入[beg,end)区间的数据，无返回值。</span></span><br><span class="line"><span class="comment">clear();//移除容器的所有数据</span></span><br><span class="line"><span class="comment">erase(beg,end);//删除[beg,end)区间的数据，返回下一个数据的位置。</span></span><br><span class="line"><span class="comment">erase(pos);//删除pos位置的数据，返回下一个数据的位置。</span></span><br><span class="line"><span class="comment">remove(elem);//删除容器中所有与elem值匹配的元素。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l1;</span><br><span class="line">l1.push_back(<span class="number">100</span>); <span class="comment">//100</span></span><br><span class="line">l1.push_front(<span class="number">200</span>); <span class="comment">//200 100</span></span><br><span class="line">l1.push_front(<span class="number">300</span>); <span class="comment">//300 200 100</span></span><br><span class="line">l1.push_front(<span class="number">400</span>); <span class="comment">//400 300 200 100</span></span><br><span class="line"></span><br><span class="line">l1.pop_back(); <span class="comment">//400 300 200</span></span><br><span class="line">l1.pop_front(); <span class="comment">//300 200</span></span><br><span class="line">printList(l1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator it = l1.<span class="built_in">begin</span>();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*it="</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">l1.insert(++it, <span class="number">1000</span>); <span class="comment">//300 1000 200</span></span><br><span class="line">printList(l1);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*it="</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//特别注意这个时候迭代器的位置！！！</span></span><br><span class="line"></span><br><span class="line">l1.insert(++it, <span class="number">3</span>, <span class="number">33</span>); <span class="comment">//300 1000 200 33 33 33</span></span><br><span class="line">printList(l1);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">l2</span><span class="params">(l1)</span></span>;</span><br><span class="line">l2.insert(l2.<span class="built_in">begin</span>(), l1.<span class="built_in">begin</span>(), l1.<span class="built_in">end</span>());</span><br><span class="line">printList(l2); <span class="comment">//300 1000 200 33 33 33  300 1000 200 33 33 33 </span></span><br><span class="line"></span><br><span class="line">it = l1.<span class="built_in">begin</span>();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*it="</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">printList(l1);</span><br><span class="line"><span class="comment">//l1.erase(it, ++it); //注意并没有这个操作！！！！！正确的应该只有起始迭代器到结束迭代器的操作</span></span><br><span class="line">printList(l1);</span><br><span class="line"></span><br><span class="line">l1.erase(++it);</span><br><span class="line">printList(l1); <span class="comment">//33 33 200</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据存取函数原型：</span></span><br><span class="line"><span class="comment">//移除 L.push_back(10000); L.push_back(10000); L.push_back(10000); printList(L); L.remove(10000); printList(L); //清空 L.clear(); printList(L); &#125;int main() &#123; test01(); system("pause"); return 0; &#125; 43444546474849505152535455565758596061626364</span></span><br><span class="line"><span class="comment">front(); //返回第一个元素。</span></span><br><span class="line"><span class="comment">back(); //返回最后一个元素。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l1;</span><br><span class="line">l1.push_back(<span class="number">100</span>); <span class="comment">//100</span></span><br><span class="line">l1.push_front(<span class="number">200</span>); <span class="comment">//200 100</span></span><br><span class="line">l1.push_front(<span class="number">300</span>); <span class="comment">//300 200 100</span></span><br><span class="line">l1.push_front(<span class="number">400</span>); <span class="comment">//400 300 200 100</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; l1.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; l1.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">反转和排序函数原型：</span></span><br><span class="line"><span class="comment">reverse(); //反转链表</span></span><br><span class="line"><span class="comment">sort(); //链表排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myCompare</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l1;</span><br><span class="line">l1.push_back(<span class="number">123210</span>); <span class="comment">//100</span></span><br><span class="line">l1.push_front(<span class="number">2422410</span>); <span class="comment">//200 100</span></span><br><span class="line">l1.push_front(<span class="number">343430</span>); <span class="comment">//300 200 100</span></span><br><span class="line">l1.push_front(<span class="number">403242130</span>); <span class="comment">//400 300 200 100</span></span><br><span class="line"></span><br><span class="line">printList(l1);</span><br><span class="line">l1.reverse();</span><br><span class="line">printList(l1);</span><br><span class="line">l1.sort();</span><br><span class="line">printList(l1);</span><br><span class="line"></span><br><span class="line">l1.sort(myCompare);</span><br><span class="line">printList(l1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">排序案例</span></span><br><span class="line"><span class="comment">案例描述：将Person自定义数据类型进行排序，Person中属性有姓名、年龄、身高</span></span><br><span class="line"><span class="comment">排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="built_in">string</span> name, <span class="keyword">int</span> age, <span class="keyword">int</span> <span class="built_in">height</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">height</span> = <span class="built_in">height</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">height</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comparePerson</span><span class="params">(<span class="keyword">const</span> Person&amp;p1,<span class="keyword">const</span> Person&amp;p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p1.age == p2.age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> p1.<span class="built_in">height</span> &gt; p2.<span class="built_in">height</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> p1.age &lt; p2.age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPersonInfo</span><span class="params">(<span class="keyword">const</span> <span class="built_in">list</span>&lt;Person&gt;&amp; ll)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;Person&gt;::const_iterator it = ll.<span class="built_in">begin</span>(); it != ll.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (*it).name &lt;&lt; <span class="string">" "</span> &lt;&lt; (*it).age &lt;&lt; <span class="string">" "</span> &lt;&lt; (*it).<span class="built_in">height</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">"zhao"</span>,<span class="number">99</span>,<span class="number">170</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">"qian"</span>, <span class="number">89</span>, <span class="number">190</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">"sun"</span>, <span class="number">79</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">"li"</span>, <span class="number">89</span>, <span class="number">180</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">"zhou"</span>, <span class="number">109</span>, <span class="number">210</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;Person&gt; p;</span><br><span class="line">p.push_back(p1);</span><br><span class="line">p.push_back(p2);</span><br><span class="line">p.push_back(p3);</span><br><span class="line">p.push_back(p4);</span><br><span class="line">p.push_back(p5);</span><br><span class="line"></span><br><span class="line">printPersonInfo(p);</span><br><span class="line">p.sort(comparePerson);</span><br><span class="line">printPersonInfo(p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test07();</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> STL </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL容器之queue容器</title>
      <link href="2020/11/23/Cpp201123-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bqueue%E5%AE%B9%E5%99%A8/"/>
      <url>2020/11/23/Cpp201123-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bqueue%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/11/23/Cpp201123-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bqueue%E5%AE%B9%E5%99%A8/queue-1.jpg" alt="The First Title Picture"></p><a id="more"></a><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>Queue是一种先进先出(First In First Out,FIFO)的数据结构，它有两个出口。</p><p>队列容器允许从一端新增元素，从另一端移除元素。</p><p>队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为。</p><p>队列中进数据称为 —- <strong>入队</strong>  <code>push</code></p><p>队列中出数据称为 —- <strong>出队</strong>  <code>pop</code></p><p><img src="/2020/11/23/Cpp201123-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bqueue%E5%AE%B9%E5%99%A8/queue-2.png" alt="The First Title Picture"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>Talk is cheap, show me the code.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数：</span></span><br><span class="line"><span class="comment">queue&lt;T&gt; que; //queue采用模板类实现，queue对象的默认构造形式</span></span><br><span class="line"><span class="comment">queue(const queue &amp;que); //拷贝构造函数</span></span><br><span class="line"><span class="comment">赋值操作：</span></span><br><span class="line"><span class="comment">queue&amp; operator=(const queue &amp;que); //重载等号操作符</span></span><br><span class="line"><span class="comment">数据存取：</span></span><br><span class="line"><span class="comment">push(elem); //往队尾添加元素</span></span><br><span class="line"><span class="comment">pop(); //从队头移除第一个元素</span></span><br><span class="line"><span class="comment">back(); //返回最后一个元素</span></span><br><span class="line"><span class="comment">front(); //返回第一个元素</span></span><br><span class="line"><span class="comment">大小操作：</span></span><br><span class="line"><span class="comment">empty(); //判断堆栈是否为空</span></span><br><span class="line"><span class="comment">size(); //返回栈的大小</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">"zhao"</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">"qian"</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">"sun"</span>, <span class="number">40</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">"li"</span>, <span class="number">50</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;Person&gt; q1;</span><br><span class="line">q1.push(p1);</span><br><span class="line">q1.push(p2);</span><br><span class="line">q1.push(p3);</span><br><span class="line">q1.push(p4);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">queue</span>&lt;Person&gt; <span class="title">q2</span><span class="params">(q1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;Person&gt; q3;</span><br><span class="line">q3 = q2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列不提供迭代器，更不支持随机访问</span></span><br><span class="line"><span class="keyword">while</span> (!q3.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"队头的人是："</span> &lt;&lt; q3.front().name &lt;&lt; <span class="string">" "</span> &lt;&lt; q3.front().age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"队尾的人是："</span> &lt;&lt; q3.back().name &lt;&lt; <span class="string">" "</span> &lt;&lt; q3.back().age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q3.pop();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Size Now: "</span> &lt;&lt; q3.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> STL </tag>
            
            <tag> queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL容器之stack容器</title>
      <link href="2020/11/22/Cpp201122-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bstack%E5%AE%B9%E5%99%A8/"/>
      <url>2020/11/22/Cpp201122-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bstack%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/11/22/Cpp201122-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bstack%E5%AE%B9%E5%99%A8/stack-1.jpg" alt="The First Title Picture"></p><a id="more"></a><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>stack是一种先进后出(First In Last Out,FILO)的数据结构，它只有一个出口。</p><p>栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为。</p><p>栈中进入数据称为 —- <strong>入栈</strong>  <code>push</code></p><p>栈中弹出数据称为 —- <strong>出栈</strong>  <code>pop</code> </p><p><img src="/2020/11/22/Cpp201122-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bstack%E5%AE%B9%E5%99%A8/stack-2.png" alt="The First Title Picture"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>Talk is cheap, show me the code.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数：</span></span><br><span class="line"><span class="comment">stack&lt;T&gt; stk; //stack采用模板类实现， stack对象的默认构造形式</span></span><br><span class="line"><span class="comment">stack(const stack &amp;stk); //拷贝构造函数</span></span><br><span class="line"><span class="comment">赋值操作：</span></span><br><span class="line"><span class="comment">stack&amp; operator=(const stack &amp;stk); //重载等号操作符</span></span><br><span class="line"><span class="comment">数据存取：</span></span><br><span class="line"><span class="comment">push(elem); //向栈顶添加元素</span></span><br><span class="line"><span class="comment">pop(); //从栈顶移除第一个元素</span></span><br><span class="line"><span class="comment">top(); //返回栈顶元素</span></span><br><span class="line"><span class="comment">大小操作：</span></span><br><span class="line"><span class="comment">empty(); //判断堆栈是否为空</span></span><br><span class="line"><span class="comment">size(); //返回栈的大小</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">s1.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; <span class="title">s2</span><span class="params">(s1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s3;</span><br><span class="line">s3 = s2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"现在的栈大小："</span> &lt;&lt; s3.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span> (!s3.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"栈顶的元素是："</span> &lt;&lt; s3.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s3.pop();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"现在的栈大小："</span> &lt;&lt; s3.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> STL </tag>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL容器之deque容器</title>
      <link href="2020/11/21/Cpp201121-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bdeque%E5%AE%B9%E5%99%A8/"/>
      <url>2020/11/21/Cpp201121-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bdeque%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/11/21/Cpp201121-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bdeque%E5%AE%B9%E5%99%A8/deque-1.jpg" alt="The First Title Picture"></p><a id="more"></a><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p><strong>功能：</strong></p><p>双端数组，可以对头端进行插入删除操作。</p><p><strong>deque与vector区别：</strong></p><ul><li><p>vector对于头部的插入删除效率低，数据量越大，效率越低。</p></li><li><p>deque相对而言，对头部的插入删除速度回比vector快。</p></li><li><p>vector访问元素时的速度会比deque快,这和两者内部实现有关。</p></li></ul><p><img src="/2020/11/21/Cpp201121-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bdeque%E5%AE%B9%E5%99%A8/deque-2.png" alt="The First Title Picture"></p><p><strong>deque内部工作原理:</strong></p><ul><li><p>deque内部有个<strong>中控器</strong>，维护每段缓冲区中的内容，缓冲区中存放真实数据。</p></li><li><p>中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间。</p></li><li><p>deque容器的迭代器也是支持随机访问的。</p></li></ul><p><img src="/2020/11/21/Cpp201121-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bdeque%E5%AE%B9%E5%99%A8/deque-3.png" alt="The First Title Picture"> </p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>Talk is cheap, show me the code.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span><span class="params">(<span class="keyword">const</span> <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;&amp; dd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//注意这里的只读迭代器的操作</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::const_iterator it = dd.<span class="built_in">begin</span>(); it != dd.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数原型：</span></span><br><span class="line"><span class="comment">deque&lt;T&gt; deqT; //默认构造形式</span></span><br><span class="line"><span class="comment">deque(beg, end); //构造函数将[beg, end)区间中的元素拷贝给本身。</span></span><br><span class="line"><span class="comment">deque(n, elem); //构造函数将n个elem拷贝给本身。</span></span><br><span class="line"><span class="comment">deque(const deque &amp;deq); //拷贝构造函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; <span class="title">d2</span><span class="params">(d1.<span class="built_in">begin</span>(), d1.<span class="built_in">end</span>())</span></span>;</span><br><span class="line">printDeque(d2);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; <span class="title">d3</span><span class="params">(<span class="number">10</span>, <span class="number">88</span>)</span></span>;</span><br><span class="line">printDeque(d3);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; <span class="title">d4</span><span class="params">(d3)</span></span>;</span><br><span class="line">printDeque(d4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">赋值函数原型：</span></span><br><span class="line"><span class="comment">deque&amp; operator=(const deque &amp;deq); //重载等号操作符</span></span><br><span class="line"><span class="comment">assign(beg, end); //将[beg, end)区间中的数据拷贝赋值给本身。</span></span><br><span class="line"><span class="comment">assign(n, elem); //将n个elem拷贝赋值给本身。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; d2;</span><br><span class="line">d2 = d1;</span><br><span class="line">printDeque(d2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; d3;</span><br><span class="line">d3.assign(d2.<span class="built_in">begin</span>(), d2.<span class="built_in">end</span>());</span><br><span class="line">printDeque(d3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; d4;</span><br><span class="line">d4.assign(<span class="number">10</span>, <span class="number">88</span>);</span><br><span class="line">printDeque(d4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">大小操作函数原型：</span></span><br><span class="line"><span class="comment">deque.empty(); //判断容器是否为空</span></span><br><span class="line"><span class="comment">deque.size(); //返回容器中元素的个数</span></span><br><span class="line"><span class="comment">deque.resize(num); //重新指定容器的长度为num,若容器变长，则以默认值填充新位置。</span></span><br><span class="line"><span class="comment">//如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br><span class="line"><span class="comment">deque.resize(num, elem); //重新指定容器的长度为num,若容器变长，则以elem值填充新位置。</span></span><br><span class="line"><span class="comment">//如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们发现跟vector相比没有了capacity容量相关的操作，因为可以无限地扩展，只需要有一段地址来维护空间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (d1.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"EMPTY"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; d1.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">d1.resize(<span class="number">20</span>, <span class="number">999</span>);</span><br><span class="line">printDeque(d1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">插入和删除函数原型：</span></span><br><span class="line"><span class="comment">两端插入操作：</span></span><br><span class="line"><span class="comment">push_back(elem); //在容器尾部添加一个数据</span></span><br><span class="line"><span class="comment">push_front(elem); //在容器头部插入一个数据</span></span><br><span class="line"><span class="comment">pop_back(); //删除容器最后一个数据</span></span><br><span class="line"><span class="comment">pop_front(); //删除容器第一个数据</span></span><br><span class="line"><span class="comment">指定位置操作：</span></span><br><span class="line"><span class="comment">insert(pos,elem); //在pos位置插入一个elem元素的拷贝，返回新数据的位置。</span></span><br><span class="line"><span class="comment">insert(pos,n,elem); //在pos位置插入n个elem数据，无返回值。</span></span><br><span class="line"><span class="comment">insert(pos,beg,end); //在pos位置插入[beg,end)区间的数据，无返回值。</span></span><br><span class="line"><span class="comment">clear(); //清空容器的所有数据</span></span><br><span class="line"><span class="comment">erase(beg,end); //删除[beg,end)区间的数据，返回下一个数据的位置。</span></span><br><span class="line"><span class="comment">erase(pos); //删除pos位置的数据，返回下一个数据的位置。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; d1;</span><br><span class="line">d1.push_back(<span class="number">100</span>);</span><br><span class="line">d1.push_back(<span class="number">100</span>);</span><br><span class="line">d1.push_back(<span class="number">100</span>);</span><br><span class="line">d1.push_back(<span class="number">100</span>);</span><br><span class="line">d1.push_back(<span class="number">100</span>);</span><br><span class="line">d1.push_back(<span class="number">100</span>);</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">d1.push_front(<span class="number">200</span>);</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">d1.pop_back();</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">d1.pop_front();</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">d1.insert(d1.<span class="built_in">begin</span>() + <span class="number">2</span>, <span class="number">5</span>, <span class="number">1000</span>);</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">d1.insert(d1.<span class="built_in">end</span>() - <span class="number">1</span>, d1.<span class="built_in">begin</span>(), d1.<span class="built_in">end</span>());</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">d1.erase(d1.<span class="built_in">begin</span>()+<span class="number">1</span>);</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">d1.<span class="built_in">clear</span>();</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据存取函数原型：</span></span><br><span class="line"><span class="comment">at(int idx); //返回索引idx所指的数据</span></span><br><span class="line"><span class="comment">operator[]; //返回索引idx所指的数据</span></span><br><span class="line"><span class="comment">front(); //返回容器中第一个数据元素</span></span><br><span class="line"><span class="comment">back(); //返回容器中最后一个数据元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; d1.at(<span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; d1[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; d1.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; d1.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">排序算法：</span></span><br><span class="line"><span class="comment">sort(iterator beg, iterator end) //对beg和end区间内元素进行排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; d1;</span><br><span class="line">d1.push_back(<span class="number">10</span>);</span><br><span class="line">d1.push_back(<span class="number">20</span>);</span><br><span class="line">d1.push_back(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">d1.push_front(<span class="number">89</span>);</span><br><span class="line">d1.push_front(<span class="number">78</span>);</span><br><span class="line">d1.push_front(<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line">printDeque(d1);</span><br><span class="line">sort(d1.<span class="built_in">begin</span>(), d1.<span class="built_in">end</span>());</span><br><span class="line">printDeque(d1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">test03();</span><br><span class="line">test04();</span><br><span class="line">test05();</span><br><span class="line">test06();</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> STL </tag>
            
            <tag> deque </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL容器之vector容器</title>
      <link href="2020/11/20/Cpp201120-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bvector%E5%AE%B9%E5%99%A8/"/>
      <url>2020/11/20/Cpp201120-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bvector%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/11/20/Cpp201120-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bvector%E5%AE%B9%E5%99%A8/201120-1.jpg" alt="The First Title Picture"></p><a id="more"></a><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>vector的数据结构和数组相似，也称为单端数组。</p><p>主要的特点（优势）在于可以动态扩展。</p><p>动态扩展并不是在原来的空间之后接新的空间，而是适当增加一定量的空间找一段新的内存去存储，然后将原来的数据拷贝过来并且释放原来的空间。</p><p>vector容器的迭代器是支持随机访问的迭代器，最牛的那种，迭代器可以随意加数值。 </p><p><img src="/2020/11/20/Cpp201120-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bvector%E5%AE%B9%E5%99%A8/201120-2.png" alt="The First Title Picture"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>Talk is cheap, show me the code.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印函数的实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数原型：</span></span><br><span class="line"><span class="comment">vector&lt;T&gt; v; //采用模板实现类实现，默认构造函数</span></span><br><span class="line"><span class="comment">vector(v.begin(), v.end()); //将v[begin(), end())区间中的元素拷贝给本身。</span></span><br><span class="line"><span class="comment">vector(n, elem); //构造函数将n个elem拷贝给本身。</span></span><br><span class="line"><span class="comment">vector(const vector &amp;vec); //拷贝构造函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//默认构造函数实现</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//区间</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v2</span><span class="params">(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>())</span></span>;</span><br><span class="line">printVector(v2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试任意区间</span></span><br><span class="line"><span class="comment">//测试说明vector是支持随意访问的迭代器</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v3</span><span class="params">(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">begin</span>() + <span class="number">4</span>)</span></span>;</span><br><span class="line">printVector(v3);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v4</span><span class="params">(<span class="number">10</span>, <span class="number">99</span>)</span></span>;</span><br><span class="line">printVector(v4);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v5</span><span class="params">(v4)</span></span>;</span><br><span class="line">printVector(v5);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">赋值函数原型：</span></span><br><span class="line"><span class="comment">vector&amp; operator=(const vector &amp;vec); //重载等号操作符</span></span><br><span class="line"><span class="comment">assign(beg, end); //将[beg, end)区间中的数据拷贝赋值给本身。</span></span><br><span class="line"><span class="comment">assign(n, elem); //将n个elem拷贝赋值给本身。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line">v2 = v1;</span><br><span class="line">printVector(v2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v3;</span><br><span class="line">v3.assign(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>());</span><br><span class="line">printVector(v3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v4;</span><br><span class="line">v4.assign(<span class="number">10</span>, <span class="number">88</span>);</span><br><span class="line">printVector(v4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">容量和大小函数原型：</span></span><br><span class="line"><span class="comment">empty(); //判断容器是否为空</span></span><br><span class="line"><span class="comment">capacity(); //容器的容量</span></span><br><span class="line"><span class="comment">size(); //返回容器中元素的个数</span></span><br><span class="line"><span class="comment">resize(int num); //重新指定容器的长度为num，若容器变长，则以默认值填充新位置, 默认填充0。</span></span><br><span class="line"><span class="comment">//如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br><span class="line"><span class="comment">resize(int num, elem); //重新指定容器的长度为num，若容器变长，则以elem值填充新位置（自己指定）。</span></span><br><span class="line"><span class="comment">//如果容器变短，则末尾超出容器长度的元素被删除</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (v1.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"v1 is empty"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"the capacity of v1: "</span> &lt;&lt; v1.capacity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"the size of v1: "</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v1.resize(<span class="number">20</span>, <span class="number">99</span>);</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">v1.resize(<span class="number">5</span>);</span><br><span class="line">printVector(v1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">插入和删除函数原型：</span></span><br><span class="line"><span class="comment">push_back(ele); //尾部插入元素ele</span></span><br><span class="line"><span class="comment">pop_back(); //删除最后一个元素</span></span><br><span class="line"><span class="comment">insert(const_iterator pos, ele); //迭代器指向位置pos插入元素ele</span></span><br><span class="line"><span class="comment">insert(const_iterator pos, int count,ele); //迭代器指向位置pos插入count个元素ele</span></span><br><span class="line"><span class="comment">erase(const_iterator pos); //删除迭代器指向的元素</span></span><br><span class="line"><span class="comment">erase(const_iterator start, const_iterator end); //删除迭代器从start到end之间的元素</span></span><br><span class="line"><span class="comment">clear(); //删除容器中所有元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">v1.pop_back();</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//v1.insert(10, 9999); //必须是迭代器而不是随意的数字</span></span><br><span class="line">v1.insert(v1.<span class="built_in">begin</span>() + <span class="number">9</span>, <span class="number">999</span>);</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">v1.insert(v1.<span class="built_in">begin</span>() + <span class="number">10</span>, <span class="number">5</span>, <span class="number">888</span>);</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">v1.erase(v1.<span class="built_in">end</span>() - <span class="number">1</span>);</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">v1.erase(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">begin</span>() + <span class="number">5</span>);</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">v1.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">if</span> (v1.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Now v1 is empty"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据存取函数原型：</span></span><br><span class="line"><span class="comment">at(int idx); //返回索引idx所指的数据</span></span><br><span class="line"><span class="comment">operator[]; //返回索引idx所指的数据</span></span><br><span class="line"><span class="comment">front(); //返回容器中第一个数据元素</span></span><br><span class="line"><span class="comment">back(); //返回容器中最后一个数据元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v1.at(<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v1[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v1.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v1.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">互换容器函数原型：</span></span><br><span class="line"><span class="comment">swap(vec); // 将vec与本身的元素互换</span></span><br><span class="line"><span class="comment">//本身并没有什么难度，主要是用来收缩内存空间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v1.capacity() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//会预留较大的空间</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">v1.resize(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v1.capacity() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//容量并不会减少</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(v1).swap(v1);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v1.capacity() &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//vector&lt;int&gt;(v) 匿名对象，它在内存中没有变量名，而且长度是v的实际长度，</span></span><br><span class="line"><span class="comment">//然后swap是一个指针的交换，这样自然而然实际刚才的v就变成了短的那个，</span></span><br><span class="line"><span class="comment">//匿名对象的一个特点，当前行执行完了，编译器发现他是匿名对象，就直接回收</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">预留空间：减少vector在动态扩展容量时的扩展次数</span></span><br><span class="line"><span class="comment">函数原型：</span></span><br><span class="line"><span class="comment">reserve(int len); //容器预留len个元素长度，预留位置不初始化，元素不可访问。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="keyword">int</span> m_count = <span class="number">0</span>;   <span class="comment">//统计动态扩展的次数</span></span><br><span class="line"><span class="keyword">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line"><span class="keyword">if</span> (p != &amp;v1[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">p = &amp;v1[<span class="number">0</span>];</span><br><span class="line">m_count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line">v2.reserve(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">int</span> m_count1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>* p1 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v2.push_back(i);</span><br><span class="line"><span class="keyword">if</span> (p1 != &amp;v2[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">p1 = &amp;v2[<span class="number">0</span>];</span><br><span class="line">m_count1++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_count1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test07();</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> STL </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL容器之string容器</title>
      <link href="2020/11/19/Cpp201119-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bstring%E5%AE%B9%E5%99%A8/"/>
      <url>2020/11/19/Cpp201119-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bstring%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/11/19/Cpp201119-STL%E5%AE%B9%E5%99%A8%E4%B9%8Bstring%E5%AE%B9%E5%99%A8/201119-1.jpg" alt="The First Title Picture"></p><a id="more"></a><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>string本质: string是C++风格的字符串，而string本质上是一个类</p><p>string和char * 区别:</p><p>char <em> 是一个指针，而string是一个类，类内部封装了char</em>，管理这个字符串，是一个char*型的容器。</p><p>c语言中，char* 表示字符指针类型，当其指向一个字符串的第一个元素时，它就可以表示这个字符串。</p><p>如char* str=”learn c”;中,”learn c”是长度为8的字符数组常量，其最后一个元素是’\0’，而这句代表执行的结果是将str指向了”learn c”的第一个字符’l’，str后面的连续内存依次存放’e’,’a’,’r’,’n’,’ ‘,’c’,’\0’。</p><p>特点:<br>string 类内部封装了很多成员方法，例如:查找find，拷贝copy，删除delete 替换replace，插入insert string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>Talk is cheap, show me the code.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数原型：</span></span><br><span class="line"><span class="comment">string(); //创建一个空的字符串 例如: string str;</span></span><br><span class="line"><span class="comment">string(const char* s); //使用字符串s初始化</span></span><br><span class="line"><span class="comment">string(const string&amp; str); //使用一个string对象初始化另一个string对象</span></span><br><span class="line"><span class="comment">string(int n, char c); //使用n个字符c初始化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* str = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(str)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s3</span><span class="params">(s2)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s4</span><span class="params">(<span class="number">10</span>, <span class="string">'k'</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s4 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">赋值的函数原型：</span></span><br><span class="line"><span class="comment">string&amp; operator=(const char* s); //char*类型字符串 赋值给当前的字符串</span></span><br><span class="line"><span class="comment">string&amp; operator=(const string &amp;s); //把字符串s赋给当前的字符串</span></span><br><span class="line"><span class="comment">string&amp; operator=(char c); //字符赋值给当前的字符串</span></span><br><span class="line"><span class="comment">string&amp; assign(const char *s); //把字符串s赋给当前的字符串</span></span><br><span class="line"><span class="comment">string&amp; assign(const char *s, int n); //把字符串s的前n个字符赋给当前的字符串</span></span><br><span class="line"><span class="comment">string&amp; assign(const string &amp;s); //把字符串s赋给当前字符串</span></span><br><span class="line"><span class="comment">string&amp; assign(int n, char c); //用n个字符c赋给当前字符串</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* s = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="built_in">string</span> s1 = s;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s2;</span><br><span class="line">s2 = s1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char cc = 'a';</span></span><br><span class="line"><span class="built_in">string</span> s3;</span><br><span class="line">s3 = <span class="string">'a'</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s4;</span><br><span class="line">s4.assign(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s4 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">字符串拼接函数原型：</span></span><br><span class="line"><span class="comment">string&amp; operator+=(const char* str); //重载+=操作符</span></span><br><span class="line"><span class="comment">string&amp; operator+=(const char c); //重载+=操作符</span></span><br><span class="line"><span class="comment">string&amp; operator+=(const string&amp; str); //重载+=操作符</span></span><br><span class="line"><span class="comment">string&amp; append(const char *s); //把字符串s连接到当前字符串结尾</span></span><br><span class="line"><span class="comment">string&amp; append(const char *s, int n); //把字符串s的前n个字符连接到当前字符串结尾</span></span><br><span class="line"><span class="comment">string&amp; append(const string &amp;s); //同operator+=(const string&amp; str)</span></span><br><span class="line"><span class="comment">string&amp; append(const string &amp;s, int pos, int n); //字符串s中从pos开始的n个字符连接到字符串结尾</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(<span class="string">"hello wor"</span>)</span></span>;</span><br><span class="line">s1 += <span class="string">"ld"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(<span class="string">"i want to say: "</span>)</span></span>;</span><br><span class="line">s2.append(s1);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">查找和替换函数原型：</span></span><br><span class="line"><span class="comment">int find(const string&amp; str, int pos = 0) const; //查找str第一次出现位置,从pos开始查找</span></span><br><span class="line"><span class="comment">int find(const char* s, int pos = 0) const; //查找s第一次出现位置,从pos开始查找</span></span><br><span class="line"><span class="comment">int find(const char* s, int pos, int n) const; //从pos位置查找s的前n个字符第一次位置</span></span><br><span class="line"><span class="comment">int find(const char c, int pos = 0) const; //查找字符c第一次出现位置</span></span><br><span class="line"><span class="comment">int rfind(const string&amp; str, int pos = npos) const; //查找str最后一次位置,从pos开始查找</span></span><br><span class="line"><span class="comment">int rfind(const char* s, int pos = npos) const; //查找s最后一次出现位置,从pos开始查找</span></span><br><span class="line"><span class="comment">int rfind(const char* s, int pos, int n) const; //从pos查找s的前n个字符最后一次位置</span></span><br><span class="line"><span class="comment">int rfind(const char c, int pos = 0) const; //查找字符c最后一次出现位置</span></span><br><span class="line"><span class="comment">string&amp; replace(int pos, int n, const string&amp; str); //替换从pos开始n个字符为字符串str</span></span><br><span class="line"><span class="comment">string&amp; replace(int pos, int n,const char* s); //替换从pos开始的n个字符为字符串s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(<span class="string">"dqwiduhfuqfhqwoifheiofioeqfe"</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m_find = s1.<span class="built_in">find</span>(<span class="string">"io"</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_find &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m_rfind = s1.rfind(<span class="string">"io"</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_rfind &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">s1.replace(m_rfind, <span class="number">6</span>, <span class="string">"HELLOWORLD"</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">比较函数原型：</span></span><br><span class="line"><span class="comment">int compare(const string &amp;s) const; //与字符串s比较</span></span><br><span class="line"><span class="comment">int compare(const char *s) const; //与字符串s比较</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">string</span> s2 = <span class="string">"hello world"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = s1.compare(s2);</span><br><span class="line"><span class="keyword">if</span> (res == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NOT Equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">存取函数原型</span></span><br><span class="line"><span class="comment">char&amp; operator[](int n); //通过[]方式取字符</span></span><br><span class="line"><span class="comment">char&amp; at(int n); //通过at方法获取字符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">"diwqhdiwqfqfqowfqwofqw fjqwfqjfqowpfjwqdwqihfqwhfq"</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(s1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1.at(j) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">插入和删除函数原型：</span></span><br><span class="line"><span class="comment">string&amp; insert(int pos, const char* s); //插入字符串</span></span><br><span class="line"><span class="comment">string&amp; insert(int pos, const string&amp; str); //插入字符串</span></span><br><span class="line"><span class="comment">string&amp; insert(int pos, int n, char c); //在指定位置插入n个字符c </span></span><br><span class="line"><span class="comment">string&amp; erase(int pos, int n = npos); //删除从Pos开始的n个字符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">"my name is hello world"</span>;</span><br><span class="line">s1.insert(<span class="number">3</span>, <span class="string">"here is a bug"</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//s1.erase(3); //不定义位置的话就删完</span></span><br><span class="line">s1.erase(<span class="number">3</span>, <span class="number">13</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">子串函数原型：</span></span><br><span class="line"><span class="comment">string substr(int pos = 0, int n = npos) const; //返回由pos开始的n个字符组成的字符串</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">"dwqdwqefrfrefef"</span>;</span><br><span class="line"><span class="built_in">string</span> temp = s1.substr(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; temp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test08();</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> STL </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Twiddle算法</title>
      <link href="2020/08/30/Research200830-Twiddle%E7%AE%97%E6%B3%95/"/>
      <url>2020/08/30/Research200830-Twiddle%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/08/30/Research200830-Twiddle%E7%AE%97%E6%B3%95/200830-1.jpg" alt="The First Title Picture" title="Optional Title"></p><a id="more"></a><h1 id="1-简单说明"><a href="#1-简单说明" class="headerlink" title="1.简单说明"></a>1.简单说明</h1><p>Twiddle算法可以为一个计算误差的算法A去找到一个好的参数P。比如在PID调参中，一次调整一个参数，最终生成最优参数集，实现最优参数的搜索。</p><p>相较于梯度下降之类的算法的话，最大的优点就应该是简单了吧，不用去计算高维函数的梯度。</p><p>Talk is cheap, show me the code!</p><h1 id="2-代码说明"><a href="#2-代码说明" class="headerlink" title="2.代码说明"></a>2.代码说明</h1><p>下面写一段伪Python代码来说明一下，在这里的话以PID为例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们为PID算法选取初始化参数构成参数向量p，顺序依次为拍P-&gt;I-&gt;D</span></span><br><span class="line"><span class="comment"># 因为这也符合PID整定的一般规则，先比例，后积分，再微分。</span></span><br><span class="line">p = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="comment"># 在这里我们定义初始的变化量</span></span><br><span class="line">dp = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 这里的A(p)是计算误差的算法</span></span><br><span class="line">best_err = A(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们将误差的阈值设置为0.1，</span></span><br><span class="line">threshold = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果dp的变化量和比我们设置的阈值大的话，执行循环操作</span></span><br><span class="line"><span class="keyword">while</span> sum(dp) &gt; threshold:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(p)):</span><br><span class="line">        p[i] += dp[i]</span><br><span class="line">        err = A(p)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> err &lt; best_err:  <span class="comment"># 误差比目前最好的误差更小则更新最好误差值</span></span><br><span class="line">            best_err = err</span><br><span class="line">            dp[i] *= <span class="number">1.1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 不然的话我们就将目前的参数朝另一个方向进行计算（这里减去2倍是因为刚才加了1次）</span></span><br><span class="line">            p[i] -= <span class="number">2</span> * dp[i]  </span><br><span class="line">            err = A(p)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> err &lt; best_err:  <span class="comment"># 误差变优的话则更新</span></span><br><span class="line">                best_err = err</span><br><span class="line">                dp[i] *= <span class="number">1.05</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 不然的话就说明目前的变化值设计的太大，既不能There was no improvement</span></span><br><span class="line">                p[i] += dp[i] <span class="comment"># 这一步是为了让p[i]返回到这次循环前的值，即不加不减</span></span><br><span class="line">                dp[i] *= <span class="number">0.95</span> <span class="comment"># 减小变化值继续反复更新参数</span></span><br></pre></td></tr></table></figure><p>　　　　　　　</p>]]></content>
      
      
      <categories>
          
          <category> Research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PID </tag>
            
            <tag> Twiddle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS开启HiDPI外接2K显示器（解决字体发虚问题）</title>
      <link href="2020/05/20/Mac200520-macOS%E5%BC%80%E5%90%AFHiDPI%E5%A4%96%E6%8E%A52K%E6%98%BE%E7%A4%BA%E5%99%A8/"/>
      <url>2020/05/20/Mac200520-macOS%E5%BC%80%E5%90%AFHiDPI%E5%A4%96%E6%8E%A52K%E6%98%BE%E7%A4%BA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/05/20/Mac200520-macOS%E5%BC%80%E5%90%AFHiDPI%E5%A4%96%E6%8E%A52K%E6%98%BE%E7%A4%BA%E5%99%A8/200424-1.jpg" alt="The First Title Picture"></p><a id="more"></a><h1 id="1-前言："><a href="#1-前言：" class="headerlink" title="1.前言："></a>1.前言：</h1><p>入手了一台2K显示器，但是直接连HDMI线显示的效果不忍直视，所以我们需要开启苹果系统的hidpi模式来实现完美显示。<br>至于为什么要开启hidpi模式？2k显示器的分辨率是2560*1440，如果采用默认的设置，那么在显示器上面的字会特别的小。我尝试了用最新版的SwitchResX来强制打开1080P的分辨率，但是实际的效果并不好，虽然大小适配了，但是字体发虚，在查阅了不少资料之后，总结了这篇文章中最简单的实现HiDPI的方法。希望这篇文章可以帮到你。</p><h1 id="2-解决办法："><a href="#2-解决办法：" class="headerlink" title="2.解决办法："></a>2.解决办法：</h1><h1 id="2-1-打开系统HiDPI-终端运行）"><a href="#2-1-打开系统HiDPI-终端运行）" class="headerlink" title="2.1 打开系统HiDPI (终端运行）"></a>2.1 打开系统HiDPI (终端运行）</h1><p><code>sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool YES</code><br>如果使用 4K 或更高分辨率的显示器，macOS 基本上原生支持 HiDPI，直接下载从RDM即可。如无法启用或没有合适的分辨率，再使用配置文件。</p><h1 id="2-2-禁用SIP-macOS-10-11及以上"><a href="#2-2-禁用SIP-macOS-10-11及以上" class="headerlink" title="2.2 禁用SIP (macOS 10.11及以上)"></a>2.2 禁用SIP (macOS 10.11及以上)</h1><p>macOS 10.11 El Capitan 开始默认启用 System Integrity Protection (SIP) 防止系统文件被修改。因为配置文件需要放在系统文件夹中，要禁用 SIP。</p><p>开机或重启时，在听到开机的那个声音之后按住<code>Command + R</code> 组合键，进入 macOS 恢复模式，在屏幕上方的菜单中选择 <code>Utlities &gt; Terminal</code> 打开终端，输入并执行：<br><code>csrutil disable</code><br>然后重启系统。进行下一步。</p><p><strong>在全部设置完以后，建议安全起见还是重新启用 SIP，按照以上步骤进入恢复模式，输入并执行 <code>csrutil enable</code> </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在这里插一句，最开始我做完这一步就直接去用SwitchResX的设置方法设置了强制打开1080P的分辨率，但是效果很不好，虽然适配了显示的大小，但是所有的显示都发飘，于是就有了以下的设置方法。</span><br></pre></td></tr></table></figure><h1 id="2-3-获得显示器信息"><a href="#2-3-获得显示器信息" class="headerlink" title="2.3 获得显示器信息"></a>2.3 获得显示器信息</h1><p>获得显示器信息有很多种方法，在这里用最简单的，我们分别需要获得显示器的 VendorID 和 ProductID （制造商ID 和 产品ID），在终端运行：<br><code>ioreg -lw0 | grep IODisplayPrefsKey | grep -o &#39;/[^/]\+&quot;$&#39;</code><br>输出大概是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; ioreg -lw0 | grep IODisplayPrefsKey | grep -o &#39;&#x2F;[^&#x2F;]\+&quot;$&#39;</span><br><span class="line">&#x2F;AppleBacklightDisplay-610-a029&quot;</span><br><span class="line">&#x2F;AppleDisplay-10ac-d0ff&quot;</span><br></pre></td></tr></table></figure><br>第一条AppleBacklightDisplay-610-a029是MBP的内置显示屏。<br>第二条是外接显示器。如果你合上屏幕，这样只会输出正在使用的外接显示器。<br>着重在第二条，<code>/AppleDisplay-10ac-d0ff&quot;</code> 这里的<code>10ac</code>和<code>d0ff</code>是两个十六进制数。第一个为VendorID，第二个为ProductID。电脑不同，显示的数值不同，这里的数值是我的电脑为例。</p><h1 id="2-4-生成配置文件夹"><a href="#2-4-生成配置文件夹" class="headerlink" title="2.4 生成配置文件夹"></a>2.4 生成配置文件夹</h1><h1 id="2-4-1-简单方法"><a href="#2-4-1-简单方法" class="headerlink" title="2.4.1 简单方法"></a>2.4.1 简单方法</h1><p>①生成配置文件<br>这一步的配置如果自己输入比较复杂，建议直接采用一键生成的方式进行配置，参考大神的<a href="https://wacky.one/blog/macos-hi-dpi/#copy-conf" target="_blank" rel="noopener">制作</a>。<br>具体按下图设置，分辨率你直接按下图填入即可，两个ID需要根据你的实际情况进行填写。<br><img src="/2020/05/20/Mac200520-macOS%E5%BC%80%E5%90%AFHiDPI%E5%A4%96%E6%8E%A52K%E6%98%BE%E7%A4%BA%E5%99%A8/200520-1.png" alt><br>点击生成之后就已经生成了配置文件了。<br>②创建配置文件夹<br>这一步简单，直接创建一个空白文件夹，重命名<code>DisplayVendorID-xxx</code>这里的<code>xxx</code>就是你上一步的VendorID。<br>③将①中的配置文件复制到②中的文件夹中<br>④将③中的文件夹拷贝到以下路径的文件夹中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># OS X 10.11及以上</span><br><span class="line">DIR&#x3D;&#x2F;System&#x2F;Library&#x2F;Displays&#x2F;Contents&#x2F;Resources&#x2F;Overrides</span><br><span class="line"># OS X 10.10及以下</span><br><span class="line">DIR&#x3D;&#x2F;System&#x2F;Library&#x2F;Displays&#x2F;Overrides</span><br></pre></td></tr></table></figure><br>到这里为止，准备工作就基本完成了。<br>如果这里的一键生成配置ok的话，直接跳到2.5即可。<br>如果这里的一键生成配置失效的话，就只能用2.4.2的复杂方法进行手动配置。</p><h1 id="2-4-2-复杂方法"><a href="#2-4-2-复杂方法" class="headerlink" title="2.4.2 复杂方法"></a>2.4.2 复杂方法</h1><p>其实也不复杂，按照如下图所示，直接建立一个空白文档，将代码复制进去即可。<br><img src="/2020/05/20/Mac200520-macOS%E5%BC%80%E5%90%AFHiDPI%E5%A4%96%E6%8E%A52K%E6%98%BE%E7%A4%BA%E5%99%A8/200520-3.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-&#x2F;&#x2F;Apple&#x2F;&#x2F;DTD PLIST 1.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.apple.com&#x2F;DTDs&#x2F;PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version&#x3D;&quot;1.0&quot;&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">    &lt;key&gt;DisplayVendorID&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;integer&gt;xxxx&lt;&#x2F;integer&gt;           </span><br><span class="line">    &lt;key&gt;DisplayProductID&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;integer&gt;xxxx&lt;&#x2F;integer&gt;           </span><br><span class="line">    &lt;key&gt;scale-resolutions&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;array&gt;</span><br><span class="line">        &lt;data&gt;AAAHgAAABDgAAAABACAAAA&#x3D;&#x3D;&lt;&#x2F;data&gt;    &lt;!-- 1920x1080 --&gt;</span><br><span class="line">        &lt;data&gt;AAAPAAAACHAAAAABACAAAA&#x3D;&#x3D;&lt;&#x2F;data&gt;</span><br><span class="line">        &lt;data&gt;AAAPAAAACHAAAAABACAAAA&#x3D;&#x3D;&lt;&#x2F;data&gt;    &lt;!-- 3840x2160 --&gt;</span><br><span class="line">        &lt;data&gt;AAAeAAAAEOAAAAABACAAAA&#x3D;&#x3D;&lt;&#x2F;data&gt;</span><br><span class="line">    &lt;&#x2F;array&gt;</span><br><span class="line">&lt;&#x2F;dict&gt;</span><br><span class="line">&lt;&#x2F;plist&gt;</span><br></pre></td></tr></table></figure><br>文件配置完成之后就按照2.4.1中的②③④操作即可。</p><h1 id="2-5-使用RDM进行切换"><a href="#2-5-使用RDM进行切换" class="headerlink" title="2.5 使用RDM进行切换"></a>2.5 使用RDM进行切换</h1><p>重启系统打开RDM，这就可以进行切换了。<br>如图：<br><img src="/2020/05/20/Mac200520-macOS%E5%BC%80%E5%90%AFHiDPI%E5%A4%96%E6%8E%A52K%E6%98%BE%E7%A4%BA%E5%99%A8/200520-2.png" style="zoom: 50%;"></p><h1 id="3-最后总结"><a href="#3-最后总结" class="headerlink" title="3 最后总结"></a>3 最后总结</h1><p>这个方法是我自己尝试过不仅能够调节分辨率，而且也不会出现字体发飘的现象，而且应该是比较安全的一个方法。</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HiDPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Office2019安装冲突解决方法 ErrorCode 30182-392</title>
      <link href="2020/04/24/Mac200424-Office2019%E5%AE%89%E8%A3%85%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-ErrorCode-30182-392/"/>
      <url>2020/04/24/Mac200424-Office2019%E5%AE%89%E8%A3%85%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-ErrorCode-30182-392/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/04/24/Mac200424-Office2019%E5%AE%89%E8%A3%85%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-ErrorCode-30182-392/200424-1.jpg" alt="The First Title Picture"></p><a id="more"></a><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>挂载Office 2019安装镜像后直接安装会出现如下错误：<br><img src="/2020/04/24/Mac200424-Office2019%E5%AE%89%E8%A3%85%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-ErrorCode-30182-392/1.png" alt><br>问题原因在于Office 365与Offfice2019版本号相同（均为16.0）<a href="https://docs.microsoft.com/zh-cn/DeployOffice/install-different-office-visio-and-project-versions-on-the-same-computer" target="_blank" rel="noopener">官方页面-各Office版本号</a></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p><strong>解决方法就是利用官方部署工具进行安装，绕过版本冲突问题 </strong></p><h2 id="1-下载安装Office-部署工具（Office-Deployment-Tool）"><a href="#1-下载安装Office-部署工具（Office-Deployment-Tool）" class="headerlink" title="1.下载安装Office 部署工具（Office Deployment Tool）"></a>1.下载安装Office 部署工具（<a href="https://www.microsoft.com/en-us/download/confirmation.aspx?id=49117" target="_blank" rel="noopener">Office Deployment Tool</a>）</h2><h2 id="2-解压至任意文件夹"><a href="#2-解压至任意文件夹" class="headerlink" title="2.解压至任意文件夹"></a>2.解压至任意文件夹</h2><p>运行上一步下载的文件，会自动解压到你指定的文件夹<br><img src="/2020/04/24/Mac200424-Office2019%E5%AE%89%E8%A3%85%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-ErrorCode-30182-392/2.png" alt></p><h2 id="3-新建一个“configuration-xml”配置文件"><a href="#3-新建一个“configuration-xml”配置文件" class="headerlink" title="3.新建一个“configuration.xml”配置文件"></a>3.新建一个“configuration.xml”配置文件</h2><p>配置文件的配置方法参考（<a href="https://docs.microsoft.com/zh-cn/deployoffice/office-deployment-tool-configuration-options" target="_blank" rel="noopener">配置文件官方说明</a>）</p><p>可参考以下进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Configuration&gt;</span><br><span class="line">  &lt;Add </span><br><span class="line">       SourcePath&#x3D;&quot;C:\OfficeDeployment&quot; </span><br><span class="line">       DownloadPath&#x3D;&quot;V:\&quot;</span><br><span class="line">       OfficeClientEdition&#x3D;&quot;32&quot;</span><br><span class="line">   Version&#x3D;&quot;16.0.10730.20102&quot; &gt;</span><br><span class="line">    &lt;Product ID&#x3D;&quot;VisioStd2019Retail&quot;&gt;</span><br><span class="line">      &lt;Language ID&#x3D;&quot;en-us&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;Product&gt;</span><br><span class="line">  &lt;&#x2F;Add&gt;</span><br><span class="line">&lt;&#x2F;Configuration&gt;</span><br></pre></td></tr></table></figure><br><img src="/2020/04/24/Mac200424-Office2019%E5%AE%89%E8%A3%85%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-ErrorCode-30182-392/5.jpg" alt><br><strong>元素解释：</strong></p><ul><li>SourcePath：用于放安装包的临时文件夹，任意空目录即可</li><li>DownloadPath：安装包下载路径，因为已经挂载虚拟磁盘故填入虚拟磁盘路径</li><li>OfficeClientEdition：安装的Office软件位数，32或64<br><strong>(如果不是专业用户，32位的版本兼容性会更好) </strong></li><li>Version：安装的Office软件版本号，在虚拟磁盘文件内可以找到（如：H:\Office\Data\16.0.10730.20102）<br><img src="/2020/04/24/Mac200424-Office2019%E5%AE%89%E8%A3%85%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-ErrorCode-30182-392/9.jpg" alt></li><li>Product ID：产品ID，参考<a href="https://docs.microsoft.com/zh-cn/office365/troubleshoot/installation/product-ids-supported-office-deployment-click-to-run" target="_blank" rel="noopener">官方产品ID目录</a>，按照安装的软件输入对应产品ID<br>（VisioStd2019Retail代表Visio2019标准零售版）</li><li>Language ID：安装版本的语言，输入已挂载镜像安装文件拥有语言，可通过查看镜像文件名得知</li></ul><p><img src="/2020/04/24/Mac200424-Office2019%E5%AE%89%E8%A3%85%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-ErrorCode-30182-392/3.jpg" alt></p><h2 id="4-安装配置文件"><a href="#4-安装配置文件" class="headerlink" title="4.安装配置文件"></a>4.安装配置文件</h2><p>Win+R运行CMD，进入部署工具的目录<code>cd /d E:\office-deployment</code>，运行安装配置文件<code>setup /download configuration.xml</code><br><img src="/2020/04/24/Mac200424-Office2019%E5%AE%89%E8%A3%85%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-ErrorCode-30182-392/4.jpg" alt></p><h2 id="5-将虚拟磁盘的Setup-exe拷贝至SourcePath路径下"><a href="#5-将虚拟磁盘的Setup-exe拷贝至SourcePath路径下" class="headerlink" title="5.将虚拟磁盘的Setup.exe拷贝至SourcePath路径下"></a>5.将虚拟磁盘的Setup.exe拷贝至SourcePath路径下</h2><p>之后可能会出现“0-1007(0)”安装错误，关掉提示不用管。打开在<code>SourcePath</code>填入的路径，在目录下应该会出现一个Office文件夹。<br><img src="/2020/04/24/Mac200424-Office2019%E5%AE%89%E8%A3%85%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-ErrorCode-30182-392/6.jpg" alt><br>将虚拟磁盘的Setup.exe拷贝至SourcePath路径下。<br><img src="/2020/04/24/Mac200424-Office2019%E5%AE%89%E8%A3%85%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-ErrorCode-30182-392/8.jpg" alt></p><h2 id="6-运行SourcePath路径下的Setup-exe进行安装即可"><a href="#6-运行SourcePath路径下的Setup-exe进行安装即可" class="headerlink" title="6.运行SourcePath路径下的Setup.exe进行安装即可"></a>6.运行SourcePath路径下的Setup.exe进行安装即可</h2><p><img src="/2020/04/24/Mac200424-Office2019%E5%AE%89%E8%A3%85%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-ErrorCode-30182-392/7.jpg" alt></p><h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><ul><li>在这里吹爆<a href="http://www.carrotchou.blog/19209.html" target="_blank" rel="noopener">胡萝卜周</a>这个网站和这个博主，互联网的自由就是体现在这种无私奉献的精神上（当然我们不是推荐使用盗版，在能力范围之内我们都应该支持版权精神支持正版）</li><li>为什么用本文中这个麻烦的方法，而不直接用相对简单的一键安装，因为之前已经装了32位的版本，而且装了2016版的OneNote，为了保留之前的版本的前提下进行升级。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Simulation Resolving Low-Level Graphics Issues</title>
      <link href="2020/04/17/Research200417-Resolving-Low-Level-Graphics-Issues/"/>
      <url>2020/04/17/Research200417-Resolving-Low-Level-Graphics-Issues/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/04/17/Research200417-Resolving-Low-Level-Graphics-Issues/200417-1.jpg" alt="The First Title Picture"></p><a id="more"></a><h1 id="Resolving-Low-Level-Graphics-Issues"><a href="#Resolving-Low-Level-Graphics-Issues" class="headerlink" title="Resolving Low-Level Graphics Issues"></a>Resolving Low-Level Graphics Issues</h1><p>在远程操作其他工作站上的matlab的时候，无法显示仿真结果，但是在真实的工作站上操作的话又可以看到simulation的结果，并且远程的时候进行仿真，就会显示以下的错误提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &gt;&gt;MATLAB has experienced a low-level graphics error, and may not have drawn correctly.</span><br><span class="line">Read about what you can do to prevent this issue at Resolving Low-Level Graphics Issues then restart MATLAB.</span><br><span class="line">To share details of this issue with MathWorks technical support,</span><br><span class="line">please include this file with your service request.</span><br></pre></td></tr></table></figure><p>查阅相应资料之后matlab普遍存在这个问题，解决办法见<a href="https://jp.mathworks.com/help/matlab/creating_plots/resolving-low-level-graphics-issues.html?lang=en" target="_blank" rel="noopener">官网</a>。</p><p>网上大神方法见<a href="https://jp.mathworks.com/matlabcentral/answers/157894-resolving-low-level-graphics-issues-in-matlab" target="_blank" rel="noopener">这里</a>。</p><p>自己实践操作，主要就两步：</p><p>1.To set your preferences so that MATLAB always starts with software OpenGL on this computer, execute this command at the MATLAB command line:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opengl(&#39;save&#39;,&#39;software&#39;)</span><br></pre></td></tr></table></figure><p>2.Upgrade your graphics drivers to the latest versions available</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里直接就打开你的GPU然后在管理软件里点击更新就可以。</span><br></pre></td></tr></table></figure><p>以下为引用原答者的回答：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">You can work around many graphics issues by using the software version of OpenGL® built-into MATLAB instead of using your graphics hardware. In some cases, MATLAB automatically switches to software OpenGL, for example, if it detects known issues such as outdated drivers or graphics virtualization. Software OpenGL does not support some graphics features, such as graphics smoothing.</span><br><span class="line">To determine if you are using hardware or software OpenGL, type &#39;opengl info&#39;. The returned information contains the line Software: &#39;false&#39; if you are using hardware OpenGL or Software: &#39;true&#39; if you are using software OpenGL.</span><br><span class="line">To switch from hardware to software OpenGL, start MATLAB from the command prompt or terminal on your system using this command:</span><br><span class="line">&#96;matlab -softwareopengl&#96;</span><br><span class="line">To set your preferences so that MATLAB always starts with software OpenGL on this computer, execute this command at the MATLAB command line:</span><br><span class="line">&#96;opengl(&#39;save&#39;,&#39;software&#39;)&#96;</span><br><span class="line">These commands work only on Windows® and Linux® systems. Macintosh systems do not support software OpenGL. For more information about switching between hardware and software OpenGL, see the documentation for &lt;http:&#x2F;&#x2F;www.mathworks.com&#x2F;help&#x2F;matlab&#x2F;ref&#x2F;opengl.html opengl&gt; and the Renderer property for figures.</span><br><span class="line">For the best results with graphics, use graphics hardware that is compliant with OpenGL 2.1 or later. For more information about the graphics features that different versions of OpenGL support, see System Requirements for Graphics.</span><br><span class="line">Graphics hardware vendors frequently provide updated graphics drivers that improve hardware performance. To help ensure that your graphics hardware works with MATLAB, upgrade your graphics drivers to the latest versions available.</span><br><span class="line">Check your computer manufacturer website for driver updates, for example, Dell® or HP®. If no updates are provided, then check your graphics hardware vendor website, such as one of the vendors listed here. To determine your vendor, type opengl info and check the Vendor field.</span><br><span class="line">- AMD</span><br><span class="line">- NVIDIA</span><br><span class="line">- Intel</span><br><span class="line">Alternatively, you may be able to check your driver vendor and versions outside of MATLAB. On Windows systems, enter dxdiag into the Command Prompt, and look at the &quot;Display&quot; tab. Certain Linux distributions will allow you to use glxinfo in the Terminal to see OpenGL and driver information.</span><br><span class="line">If you saved a setting to always start MATLAB with software OpenGL, then after updating your drivers, you can revert that setting by executing:</span><br><span class="line">&#96;opengl(&#39;save&#39;,&#39;hardware&#39;)&#96;</span><br><span class="line">Then restart MATLAB.</span><br><span class="line">If you cannot resolve the issues using the options described here, then you might have encountered a bug in MATLAB. Please contact MathWorks Technical Support and provide the following information:</span><br><span class="line">- Output of executing opengl info</span><br><span class="line">- Whether your code runs without error when using software OpenGL.</span><br><span class="line">- Whether your code runs without error on a different computer. Please provide the output of opengl info for all computers you have tested your code on.</span><br><span class="line">- Some error messages contain a link to a file with details about the graphics error you encountered. If a link to this file is provided, please include this file with your service request.</span><br><span class="line">- The full text of the error that appears. If a crash occurs, please provide the crash report generated by MATLAB.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
            <tag> Simulation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群晖添加新的硬盘</title>
      <link href="2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/"/>
      <url>2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/200303-1.jpg" alt="The First Title Picture" title="Optional Title"></p><a id="more"></a><p><strong>本文介绍让群晖NAS系统添加新的硬盘</strong><br>群晖系统已经安装好，在装有硬盘的情况下，怎么添加新的硬盘？</p><h1 id="1-添加硬盘到Synology"><a href="#1-添加硬盘到Synology" class="headerlink" title="1 添加硬盘到Synology"></a>1 添加硬盘到Synology</h1><p><strong>关于群晖是否支持热拔，查了一下应该是根据具体型号的不同而不同，但是我个人觉得，都在更换硬盘了，为了安全起见，不要在意这关机开机的几分钟，群晖对于QNAP来说，开机关机的速度已经非常快了。</strong><br>以下引用<a href="https://www.synology.com/zh-cn/knowledgebase/DSM/help/DSM/StorageManager/storage_pool_expand_add_disk" target="_blank" rel="noopener">群晖官网指南</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">若要添加硬盘到存储池：</span><br><span class="line">1.关闭 Synology NAS。（如果 Synology NAS 支持热交换，可跳过此步骤。）</span><br><span class="line">2.将新硬盘安装到空置的硬盘插槽。</span><br><span class="line">注：为了避免伤及自身或损坏 Synology NAS，请按 Synology 产品硬件安装指南中的硬盘安装说明进行操作。</span><br><span class="line">3.打开 Synology NAS 并启动存储管理器。</span><br><span class="line">4.选择您要扩充的存储池。然后在操作下拉菜单中单击添加硬盘。</span><br><span class="line">5.选择要用于扩充存储池的硬盘。</span><br><span class="line">6.按照设置向导的步骤完成操作。</span><br></pre></td></tr></table></figure><h1 id="2-设置硬件"><a href="#2-设置硬件" class="headerlink" title="2 设置硬件"></a>2 设置硬件</h1><p><strong>2.1 拔出插槽</strong><br><img src="/2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/nas200416-01.jpg" alt title="Optional Title"><br><strong>2.2 拧上螺丝</strong><br>3.5的硬盘直接用卡扣卡住就行，非常的方便，2.5的硬盘稍微麻烦一点，你需要把两侧的卡扣取下来，然后保存好，万一以后要用到，然后将2.5的硬盘后面的四颗螺丝拧上就行。（这里的四颗硬盘螺丝得自备）<br><img src="/2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/nas200416-03.png" alt title="Optional Title"><br>2.5的硬盘应该不会误装，就一面有孔，安上之后，往NAS里面怼进去就行。<br><img src="/2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/nas200416-04.png" alt title="Optional Title"></p><h1 id="3-设置软件"><a href="#3-设置软件" class="headerlink" title="3 设置软件"></a>3 设置软件</h1><p>1.打开设置页面<br><img src="/2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/nas200416-07.png" alt title="Optional Title"><br>2.打开“存储空间管理员”<br><img src="/2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/nas200416-08.png" alt title="Optional Title"><br>3.蓝色的是以前添加好的，第四块绿色是刚刚添加的。这个状态硬盘的空间还不能使用。<br><img src="/2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/nas200416-09.png" alt title="Optional Title"><br>4.单击“存储空间”菜单，单击“新增”按钮<br><img src="/2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/nas200416-10.png" alt title="Optional Title"><br>5.使用“快速”单击“下一步”<br><img src="/2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/nas200416-11.png" alt title="Optional Title"><br>6.增加单块硬盘没有更多的选择，单击“下一步”<br><img src="/2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/nas200416-12.png" alt title="Optional Title"><br>7.警告窗口告诉我们，原来硬盘上的内容都会被清除。因为硬盘的格式与WINDOWS下是不同的。<br><img src="/2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/nas200416-13.png" alt title="Optional Title"><br>8.硬盘检查的步骤我是跳过的，选择“否”单击下一步<br><img src="/2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/nas200416-14.png" alt title="Optional Title"><br>9.文件系统选择“Btrfs”，单击下一步<br><img src="/2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/nas200416-15.png" alt title="Optional Title"><br>10.“编辑描述”相当于给硬盘写一个方便识别的名称，比如“古典音乐”，单击下一步<br><img src="/2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/nas200416-17.png" alt title="Optional Title"><br>11.单击应用按钮，运行片刻后显示这样的表示硬盘已经添加成功<br><img src="/2020/04/16/Nas200416-%E7%BE%A4%E6%99%96%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E7%A1%AC%E7%9B%98/nas200416-18.png" alt title="Optional Title"><br>从图片上可以看出，四块硬盘大小可以不同，尺寸也可以不同，支持混用。</p><h1 id="4-使用"><a href="#4-使用" class="headerlink" title="4 使用"></a>4 使用</h1><p>经过这样的操作，硬盘的空间还不能被访问。最后只需要在创建共享文件夹就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> Nas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nas </tag>
            
            <tag> Synology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生忠告</title>
      <link href="2020/04/15/Blog200415-%E4%BA%BA%E7%94%9F%E5%BF%A0%E5%91%8A/"/>
      <url>2020/04/15/Blog200415-%E4%BA%BA%E7%94%9F%E5%BF%A0%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/04/15/Blog200415-%E4%BA%BA%E7%94%9F%E5%BF%A0%E5%91%8A/190101-2.jpg" alt="The First Title Picture"></p><a id="more"></a><h2 id="人生建议"><a href="#人生建议" class="headerlink" title="人生建议"></a>人生建议</h2><p>1.即便天上下刀子也要运动。癌症病人的精力只有20点，每天运动的人精力值是120点。<br>2.在中国薪资跟权限挂钩，跟领导说涨工资不如说涨权限。<br>3.坑过你的朋友当时立马拉黑。骗了你你原谅他，他背后说你煞笔你信不信。坑过你的人90%会坑你第二遍。拉黑是及时止损。<br>4.啪啪别问对方爽不爽，爽早叫出来了，看也看出来了。<br>5.现在你不是找不到热爱，只不过坚持不了热爱。直到你以为你的热爱不是终生所爱。<br>6.把失败的原因全部归咎于外界的人永远不会成功，自省的人成功只是时间问题。<br>7.我妈从小教我，每次扔垃圾的时候，把尖锐的东西用胶带缠起来。出门看见保洁阿姨要问好。<br>8.当你熬夜脑袋嗡嗡的开始播放【死亡旋律】的时候，你该睡觉了。有过体验的朋友在评论区说一声。<br>9.年轻再穷也不要丧失心中的希望。大家都是在40岁开始挣钱的，凭什么你是人中龙凤？那些过早成功的人大部分都会栽跟头。除非这个人能够每天自省。<br>10.在你面前贼成熟的女孩一点都不爱你。我老婆在我旁边是个智障，出去又独当一面。<br>11.发朋友圈之前，要检查一遍有没有未回复的消息。<br>12.保持良好作息的方法，是给重要的时间节点订上闹钟。比如21点洗漱、22点看书、23点睡觉。<br>14.人可以老好人，但一定要学会发脾气。没办法，有的人就看着你的脸色疯狂的试探你。<br>15.永远保留自己隐藏自己30%，就好像穿着衣服的人诱惑力更大一点。<br>16.微信上有啥事直接说，在吗在吗我不在呀。<br>17.合伙人选错了，可是会有灭顶之灾的哦。榜样就看当当网。<br>18.借给别人钱要做好他不还的准备，不想借我建议直接说没钱。借别人的钱要给人算上年化收益到时间一定还。<br>19.做投资上杠杆钱，给自己留条失败的路。在中国只有买房子可以加杠杆，其他都不要。即便觉得自己赢定了，也要留路。<br>20.你的精神是有滞后性的，学习中一个消息的跳出打断了我们。你的眼睛回到了书本，思维却需要1分钟才能回来。学习要把手机拿出去。<br>22.读书是提高一个人速度最快的方法。读书的关键点在于不断内省知识，吞噬知识为己用，脱壳化蝶蜕变自己。<br>23.每天冥想可以让自己变聪明，增加大脑灰质的厚度。还能练习控制自己的注意力，减少身体疼痛和抑郁发生的可能性。我每次写这种文章必须推荐一次。<br>24.每次走在别人身前，经过门帘，可以用手帮别人挡一下。<br>25.财富是守恒的，当你赚钱少的时候说明你提供的价值比较少。<br>26.当有人跟你扯感情的时候你要知道，他要损害你的利益了。<br>27.当你成功的时候过分炫耀，会刺痛身边人的神经。等你有难时不踹你就不错了。做人不仅要低调，还要多送东西出去。<br>28.当你加不认识的大牛想要问问题，先总结好经过自己思考的问题。并且直接说可以付费咨询吗。没有谁的时间是要浪费在陌生人身上的。相信我，他带给你的价值比你那几块钱红包重要的多。<br>29.身边的煞笔一定要惯着，这叫捧杀。<br>30.你的发小是宝藏，你要好好的守护好他们。<br>31.人的印象是又很多细小的事情堆积而成的，比如看着别人的眼睛说谢谢你。<br>32.要学会用钱买时间，免费的课程你学不完。人就是贱。<br>33.如果你有定期焦虑，说明你格局和目标小了。一个人如果不断进步是不会定期焦虑的。<br>34.不把翻身的希望寄托到任何人身上，能让自己改变的永远只有自己。<br>35.遇到杠精不要骂脏话回怼，静静的拉黑也是及时止损。没有必要改变他的价值观，也改变不了。<br>36.你问问题别人支支吾吾的时候，就别问下去了。<br>37.读书不一定能成功，但成功的人一定一直在读书。一本经典的书籍，就像一个充满智慧的老者，毫无保留的告诉你一生的智慧。每看1本书，就多过了一生。<br>38.平时不要贪小便宜，麻烦别人消耗的是人情。人情比钱还要麻烦。<br>39.对身边的亲人温柔一点，对慢慢变老的爸爸妈妈充满耐心。是最好的品质。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git推送更新出现Updates were rejected错误</title>
      <link href="2020/04/10/Hexo200410-git%E6%8E%A8%E9%80%81%E6%9B%B4%E6%96%B0%E5%87%BA%E7%8E%B0Updates-were-rejected%E9%94%99%E8%AF%AF/"/>
      <url>2020/04/10/Hexo200410-git%E6%8E%A8%E9%80%81%E6%9B%B4%E6%96%B0%E5%87%BA%E7%8E%B0Updates-were-rejected%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/04/10/Hexo200410-git%E6%8E%A8%E9%80%81%E6%9B%B4%E6%96%B0%E5%87%BA%E7%8E%B0Updates-were-rejected%E9%94%99%E8%AF%AF/200410.jpg" alt="The First Title Picture"></p><a id="more"></a><p><strong>本文介绍解决git推送更新出现的Error</strong></p><h1 id="方法1（推荐）："><a href="#方法1（推荐）：" class="headerlink" title="方法1（推荐）："></a>方法1（推荐）：</h1><p><code>Updates were rejected because the remote contains work that you do not have locally</code></p><p><img src="/2020/04/10/Hexo200410-git%E6%8E%A8%E9%80%81%E6%9B%B4%E6%96%B0%E5%87%BA%E7%8E%B0Updates-were-rejected%E9%94%99%E8%AF%AF/问题07 Updates were rejected1.png" alt></p><p><strong>问题原因：</strong>远程分支上存在本地分支中不存在的提交，可以先fetch再merge，也就是pull，把远程分支上的提交合并到本地分支之后再push。</p><p>其实图中已经告诉我们要先<code>fetch first</code>了。</p><p>我们先来看看<code>git fetch</code>和<code>git pull</code>的概念：</p><p><img src="/2020/04/10/Hexo200410-git%E6%8E%A8%E9%80%81%E6%9B%B4%E6%96%B0%E5%87%BA%E7%8E%B0Updates-were-rejected%E9%94%99%E8%AF%AF/问题07 Updates were rejected2.jpeg" alt="问题07 Updates were rejected2"></p><p>可以简单的概括为：</p><p><code>git fetch</code>是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中。</p><p>而<code>git pull</code> 则是将远程主机的最新内容拉下来后直接合并，即：<code>git pull = git fetch + git merge</code>，这样可能会产生冲突，需要手动解决。</p><p>看到这里你就应该明白，你得先<code>git fetch</code>（进入.deploy/xxx.github.io文件夹里面操作才行，这里的操作目录就是你平时项目的目录）</p><p>然后<code>git merge</code>，这两步操作下来使得你remote的内容和本地的内容进行合并，这样下一步你再按照正常的推送进行推送。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m “update”</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>基本到这里问题应该解决了。</p><h1 id="方法2（暴力）："><a href="#方法2（暴力）：" class="headerlink" title="方法2（暴力）："></a>方法2（暴力）：</h1><p>如果你实在搞不清楚<code>git</code>相关的原理，或者你已经不小心把你的本地<code>repo</code>或者<code>remote</code>的<code>repo</code>搞得乱七八糟，那么你可以直接清空的你的在线<code>repo</code>，重新<code>push</code>你的本地<code>repo</code>到服务端。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.首先克隆（将服务端的repo整个克隆到本地任意的文件夹都可）</span><br><span class="line">git clone https://github.com/ningmoon/ningmoon.github.io.git</span><br><span class="line">2.然后在本地手动删除你想删除的文件夹</span><br><span class="line">3.加载此文件夹下面所有的文件</span><br><span class="line">git add .</span><br><span class="line">4.提交代码</span><br><span class="line">git commit -m “update”</span><br><span class="line">5.push到GitHub上即可，这个时候服务端的相应文件都已经被删除</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB导出图程序</title>
      <link href="2020/03/24/Research200324-MATLAB%E5%AF%BC%E5%87%BA%E5%9B%BE%E7%A8%8B%E5%BA%8F/"/>
      <url>2020/03/24/Research200324-MATLAB%E5%AF%BC%E5%87%BA%E5%9B%BE%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/03/24/Research200324-MATLAB%E5%AF%BC%E5%87%BA%E5%9B%BE%E7%A8%8B%E5%BA%8F/181212-2.jpg" alt="The First Title Picture"></p><a id="more"></a><p><strong>本文将以代码的形式快速介绍MATLAB导出图到Paper</strong></p><h1 id="1-从simulation导出数"><a href="#1-从simulation导出数" class="headerlink" title="1 从simulation导出数"></a>1 从simulation导出数</h1><p><img src="/2020/03/24/Research200324-MATLAB%E5%AF%BC%E5%87%BA%E5%9B%BE%E7%A8%8B%E5%BA%8F/200324-2.jpg" alt="The First Title Picture"></p><h1 id="2-与simulation同源文件夹下创建导图m文件"><a href="#2-与simulation同源文件夹下创建导图m文件" class="headerlink" title="2 与simulation同源文件夹下创建导图m文件"></a>2 与simulation同源文件夹下创建导图m文件</h1><p><img src="/2020/03/24/Research200324-MATLAB%E5%AF%BC%E5%87%BA%E5%9B%BE%E7%A8%8B%E5%BA%8F/200324-1.png" alt="The First Title Picture"></p><p><strong>代码如下：</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%実験後のデータ処理用M-ファイル</span></span><br><span class="line"><span class="comment">% clear all           %ワークスペースクリア</span></span><br><span class="line"><span class="comment">% close all　　　　　　%figureウインドを閉じる</span></span><br><span class="line"><span class="comment">% load adp.mat     %matファイルをワークスペースに読み込み</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%%%%%%全体のフォント設定%%%%%%%%%%%%%%%%%%%%%%</span></span><br><span class="line"></span><br><span class="line">set(<span class="number">0</span>,<span class="string">'defaultAxesFontSize'</span>,<span class="number">15</span>);</span><br><span class="line">set(<span class="number">0</span>,<span class="string">'defaultAxesFontName'</span>,<span class="string">'Times New Roman'</span>);</span><br><span class="line">set(<span class="number">0</span>,<span class="string">'defaultTextFontsize'</span>,<span class="number">15</span>);</span><br><span class="line">set(<span class="number">0</span>,<span class="string">'defaultTextFontName'</span>,<span class="string">'Times New Roman'</span>);</span><br><span class="line">set(<span class="number">0</span>,<span class="string">'DefaultAxesLinewidth'</span>,<span class="number">1.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%%%%%%%図の作成%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span></span><br><span class="line">load y.mat;</span><br><span class="line">load y_m.mat;</span><br><span class="line">load u.mat;</span><br><span class="line">load k.mat;</span><br><span class="line">load theta.mat;</span><br><span class="line"></span><br><span class="line">S=get(<span class="number">0</span>,<span class="string">'ScreenSize'</span>);</span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%出力</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="string">'Position'</span>,[<span class="number">0</span> S(<span class="number">4</span>)/<span class="number">3</span> <span class="number">1.618</span>*S(<span class="number">3</span>)/<span class="number">3</span> S(<span class="number">3</span>)/<span class="number">3</span>])   <span class="comment">%図のサイズ（縦横黄金比）、表示位置</span></span><br><span class="line">X=<span class="number">0</span>:sampletime:time;</span><br><span class="line">x=<span class="number">1</span>:<span class="number">1</span>:<span class="built_in">length</span>(X);</span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>(X,y(<span class="number">2</span>,x),<span class="string">'r'</span>,<span class="string">'Linewidth'</span>,<span class="number">1.5</span>);  <span class="comment">%グラフの描写（Ecxelでいう散布図形式）</span></span><br><span class="line"><span class="comment">%plot(x軸の値 , y軸の値　, '線の色'　, 線の太さ)</span></span><br><span class="line"><span class="comment">%   1:A:Bの意味　１からBまでA個おき</span></span><br><span class="line"><span class="comment">%   'b--'の意味　青色の破線　（このほかには'b','r','k','g'など）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;    <span class="comment">%描写を保持（これをしないと次の描写で消えてしまう）</span></span><br><span class="line">grid on;    <span class="comment">%目盛りの表示</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>(X,y_m(<span class="number">2</span>,x),<span class="string">'b--'</span>,<span class="string">'Linewidth'</span>,<span class="number">1.2</span>); </span><br><span class="line"><span class="built_in">hold</span> on;    </span><br><span class="line">grid on;    </span><br><span class="line"></span><br><span class="line">ylabel(<span class="string">'Output'</span>,<span class="string">'FontSize'</span>,<span class="number">20</span>) <span class="comment">%y軸のタイトル</span></span><br><span class="line">xlabel(<span class="string">'Time [sec]'</span>,<span class="string">'FontSize'</span>,<span class="number">20</span>)          <span class="comment">%x軸のタイトル</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">legend</span>(<span class="string">'\sly\rm(\slt\rm)'</span>,<span class="string">'\sly_&#123;m&#125;\rm(\slt\rm)'</span>,<span class="string">'Location'</span>,<span class="string">'northeast'</span>) <span class="comment">%凡例</span></span><br><span class="line"><span class="comment">% %legend('1本目の名前','2本目の名前','Location','凡例の表示位置')</span></span><br><span class="line"><span class="comment">% set(legend,'FontSize',20);%フォントのサイズの変更</span></span><br><span class="line"></span><br><span class="line">axis([<span class="number">0</span> <span class="number">100</span> <span class="number">0</span> <span class="number">4.5</span>]);        <span class="comment">%表示範囲の指定</span></span><br><span class="line"><span class="comment">%axis([x軸最小値　x軸最大値　y軸最小値　y軸最大値])</span></span><br><span class="line"></span><br><span class="line">saveas(gcf,<span class="string">'output_y.eps'</span>,<span class="string">'epsc'</span>)</span><br><span class="line">saveas(gcf,<span class="string">'output_y.emf'</span>,<span class="string">'meta'</span>)</span><br><span class="line">saveas(gcf,<span class="string">'output_y.jpg'</span>,<span class="string">'jpg'</span>)</span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%input</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="string">'Position'</span>,[<span class="number">0</span> S(<span class="number">4</span>)/<span class="number">3</span> <span class="number">1.618</span>*S(<span class="number">3</span>)/<span class="number">3</span> S(<span class="number">3</span>)/<span class="number">3</span>])   <span class="comment">%図のサイズ（縦横黄金比）、表示位置</span></span><br><span class="line">X=<span class="number">0</span>:sampletime:time;</span><br><span class="line">x=<span class="number">1</span>:<span class="number">1</span>:<span class="built_in">length</span>(X);</span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>(X,u(<span class="number">2</span>,x),<span class="string">'b'</span>,<span class="string">'Linewidth'</span>,<span class="number">1.5</span>);  <span class="comment">%グラフの描写（Ecxelでいう散布図形式）</span></span><br><span class="line"><span class="comment">%plot(x軸の値 , y軸の値　, '線の色'　, 線の太さ)</span></span><br><span class="line"><span class="comment">%   1:A:Bの意味　１からBまでA個おき</span></span><br><span class="line"><span class="comment">%   'b--'の意味　青色の破線　（このほかには'b','r','k','g'など）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;    <span class="comment">%描写を保持（これをしないと次の描写で消えてしまう）</span></span><br><span class="line">grid on;    <span class="comment">%目盛りの表示 </span></span><br><span class="line"></span><br><span class="line">ylabel(<span class="string">'Input'</span>,<span class="string">'FontSize'</span>,<span class="number">20</span>) <span class="comment">%y軸のタイトル</span></span><br><span class="line">xlabel(<span class="string">'Time [sec]'</span>,<span class="string">'FontSize'</span>,<span class="number">20</span>)          <span class="comment">%x軸のタイトル</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">legend</span>(<span class="string">'\sly\rm(\slt\rm)'</span>,<span class="string">'\sly_&#123;m&#125;\rm(\slt\rm)'</span>,<span class="string">'Location'</span>,<span class="string">'northeast'</span>) <span class="comment">%凡例</span></span><br><span class="line"><span class="comment">% %legend('1本目の名前','2本目の名前','Location','凡例の表示位置')</span></span><br><span class="line"><span class="comment">% set(legend,'FontSize',20);%フォントのサイズの変更</span></span><br><span class="line"></span><br><span class="line">axis([<span class="number">0</span> <span class="number">100</span> <span class="number">-2.5</span> <span class="number">2</span>]);        <span class="comment">%表示範囲の指定</span></span><br><span class="line"><span class="comment">%axis([x軸最小値　x軸最大値　y軸最小値　y軸最大値])</span></span><br><span class="line"></span><br><span class="line">saveas(gcf,<span class="string">'input.eps'</span>,<span class="string">'epsc'</span>)</span><br><span class="line">saveas(gcf,<span class="string">'input.emf'</span>,<span class="string">'meta'</span>)</span><br><span class="line">saveas(gcf,<span class="string">'input.jpg'</span>,<span class="string">'jpg'</span>)</span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%k</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="string">'Position'</span>,[<span class="number">0</span> S(<span class="number">4</span>)/<span class="number">3</span> <span class="number">1.618</span>*S(<span class="number">3</span>)/<span class="number">3</span> S(<span class="number">3</span>)/<span class="number">3</span>])   <span class="comment">%図のサイズ（縦横黄金比）、表示位置</span></span><br><span class="line">X=<span class="number">0</span>:sampletime:time;</span><br><span class="line">x=<span class="number">1</span>:<span class="number">1</span>:<span class="built_in">length</span>(X);</span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>(X,k(<span class="number">2</span>,x),<span class="string">'b'</span>,<span class="string">'Linewidth'</span>,<span class="number">1.5</span>);  <span class="comment">%グラフの描写（Ecxelでいう散布図形式）</span></span><br><span class="line"><span class="comment">%plot(x軸の値 , y軸の値　, '線の色'　, 線の太さ)</span></span><br><span class="line"><span class="comment">%   1:A:Bの意味　１からBまでA個おき</span></span><br><span class="line"><span class="comment">%   'b--'の意味　青色の破線　（このほかには'b','r','k','g'など）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;    <span class="comment">%描写を保持（これをしないと次の描写で消えてしまう）</span></span><br><span class="line">grid on;    <span class="comment">%目盛りの表示 </span></span><br><span class="line"></span><br><span class="line">ylabel(<span class="string">'k(t)'</span>,<span class="string">'FontSize'</span>,<span class="number">20</span>) <span class="comment">%y軸のタイトル</span></span><br><span class="line">xlabel(<span class="string">'Time [sec]'</span>,<span class="string">'FontSize'</span>,<span class="number">20</span>)          <span class="comment">%x軸のタイトル</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">legend</span>(<span class="string">'\sly\rm(\slt\rm)'</span>,<span class="string">'\sly_&#123;m&#125;\rm(\slt\rm)'</span>,<span class="string">'Location'</span>,<span class="string">'northeast'</span>) <span class="comment">%凡例</span></span><br><span class="line"><span class="comment">% %legend('1本目の名前','2本目の名前','Location','凡例の表示位置')</span></span><br><span class="line"><span class="comment">% set(legend,'FontSize',20);%フォントのサイズの変更</span></span><br><span class="line"></span><br><span class="line">axis([<span class="number">0</span> <span class="number">100</span> <span class="number">0</span> <span class="number">2000</span>]);        <span class="comment">%表示範囲の指定</span></span><br><span class="line"><span class="comment">%axis([x軸最小値　x軸最大値　y軸最小値　y軸最大値])</span></span><br><span class="line"></span><br><span class="line">saveas(gcf,<span class="string">'k.eps'</span>,<span class="string">'epsc'</span>)</span><br><span class="line">saveas(gcf,<span class="string">'k.emf'</span>,<span class="string">'meta'</span>)</span><br><span class="line">saveas(gcf,<span class="string">'k.jpg'</span>,<span class="string">'jpg'</span>)</span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%theta</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="string">'Position'</span>,[<span class="number">0</span> S(<span class="number">4</span>)/<span class="number">3</span> <span class="number">1.618</span>*S(<span class="number">3</span>)/<span class="number">3</span> S(<span class="number">3</span>)/<span class="number">3</span>])   <span class="comment">%図のサイズ（縦横黄金比）、表示位置</span></span><br><span class="line">X=<span class="number">0</span>:sampletime:time;</span><br><span class="line">x=<span class="number">1</span>:<span class="number">1</span>:<span class="built_in">length</span>(X);</span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>(X,theta(<span class="number">2</span>,x),<span class="string">'b'</span>,<span class="string">'Linewidth'</span>,<span class="number">1.5</span>);  <span class="comment">%グラフの描写（Ecxelでいう散布図形式）</span></span><br><span class="line"><span class="comment">%plot(x軸の値 , y軸の値　, '線の色'　, 線の太さ)</span></span><br><span class="line"><span class="comment">%   1:A:Bの意味　１からBまでA個おき</span></span><br><span class="line"><span class="comment">%   'b--'の意味　青色の破線　（このほかには'b','r','k','g'など）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;    <span class="comment">%描写を保持（これをしないと次の描写で消えてしまう）</span></span><br><span class="line">grid on;    <span class="comment">%目盛りの表示 </span></span><br><span class="line"></span><br><span class="line">ylabel(<span class="string">' \theta'</span>,<span class="string">'FontSize'</span>,<span class="number">20</span>) <span class="comment">%y軸のタイトル</span></span><br><span class="line">xlabel(<span class="string">'Time [sec]'</span>,<span class="string">'FontSize'</span>,<span class="number">20</span>)          <span class="comment">%x軸のタイトル</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">legend</span>(<span class="string">'\sly\rm(\slt\rm)'</span>,<span class="string">'\sly_&#123;m&#125;\rm(\slt\rm)'</span>,<span class="string">'Location'</span>,<span class="string">'northeast'</span>) <span class="comment">%凡例</span></span><br><span class="line"><span class="comment">% %legend('1本目の名前','2本目の名前','Location','凡例の表示位置')</span></span><br><span class="line"><span class="comment">% set(legend,'FontSize',20);%フォントのサイズの変更</span></span><br><span class="line"></span><br><span class="line">axis([<span class="number">0</span> <span class="number">100</span> <span class="number">-40</span> <span class="number">60</span>]);        <span class="comment">%表示範囲の指定</span></span><br><span class="line"><span class="comment">%axis([x軸最小値　x軸最大値　y軸最小値　y軸最大値])</span></span><br><span class="line"></span><br><span class="line">saveas(gcf,<span class="string">'theta.eps'</span>,<span class="string">'epsc'</span>)</span><br><span class="line">saveas(gcf,<span class="string">'theta.emf'</span>,<span class="string">'meta'</span>)</span><br><span class="line">saveas(gcf,<span class="string">'theta.jpg'</span>,<span class="string">'jpg'</span>)</span><br></pre></td></tr></table></figure><h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><ul><li><strong>*在simulation运行之后，同源文件夹内才会产生<code>To File</code>的<code>.mat</code>文件，这个时候才能运行导图m文件。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客精简安装教程</title>
      <link href="2020/03/21/Hexo200321-Hexo%E5%8D%9A%E5%AE%A2%E7%B2%BE%E7%AE%80%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>2020/03/21/Hexo200321-Hexo%E5%8D%9A%E5%AE%A2%E7%B2%BE%E7%AE%80%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/03/21/Hexo200321-Hexo%E5%8D%9A%E5%AE%A2%E7%B2%BE%E7%AE%80%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/200321-7.jpg" alt="The First Title Picture"></p><a id="more"></a><p><strong>本文介绍Hexo博客精简安装教程</strong></p><h1 id="1-Requirements"><a href="#1-Requirements" class="headerlink" title="1.Requirements"></a>1.Requirements</h1><p>首先是环境搭建，使用Hexo的前提需要在系统中安装Nodejs以及Git。<br><strong><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">安装Nodejs</a></strong><br><strong><a href="https://git-scm.com/download/" target="_blank" rel="noopener">安装Git</a></strong></p><h1 id="2-Install-Hexo"><a href="#2-Install-Hexo" class="headerlink" title="2.Install Hexo"></a>2.Install Hexo</h1><p>安装好环境之后，用<code>npm</code>安装<code>Hexo</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>确认<code>git</code>是否链接得到GitHub：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>链接成功，下一步。</p><h1 id="3-创建博客文件夹"><a href="#3-创建博客文件夹" class="headerlink" title="3.创建博客文件夹"></a>3.创建博客文件夹</h1><p>新建一个文件夹作为博客的文件夹，比如这里叫<code>hexo</code></p><h1 id="4-初始化博客"><a href="#4-初始化博客" class="headerlink" title="4.初始化博客"></a>4.初始化博客</h1><p>在此hexo文件夹中<code>hexo init</code>初始化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>这个时候已经可以<code>hexo g</code> ,一个最简单的博客已经建立成功，直接<code>hexo s</code>就可以看到博客啦！</p><h1 id="5-更换主题"><a href="#5-更换主题" class="headerlink" title="5.更换主题"></a>5.更换主题</h1><p>根据你喜欢的主题的说明更换即可。</p><h1 id="6-部署到服务端"><a href="#6-部署到服务端" class="headerlink" title="6.部署到服务端"></a>6.部署到服务端</h1><h2 id="6-1-安装一个扩展"><a href="#6-1-安装一个扩展" class="headerlink" title="6.1 安装一个扩展"></a>6.1 安装一个扩展</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="6-2-克隆"><a href="#6-2-克隆" class="headerlink" title="6.2 克隆"></a>6.2 克隆</h2><p>进入你的blog文件夹，然后clone你的GitHub repo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxx.github.io.git .deploy&#x2F;xxx.github.io</span><br></pre></td></tr></table></figure><p>上一行代码的意思是将我们之前创建的repo克隆到本地的一个叫做.deploy的新建的文件夹用于存放克隆的代码。（当然这个.deploy的文件夹是隐藏的，你看不到）</p><h2 id="6-3-deploy快捷部署"><a href="#6-3-deploy快捷部署" class="headerlink" title="6.3 deploy快捷部署"></a>6.3 deploy快捷部署</h2><p>将下面的代码直接封装成sh，每次需要部署的时候直接bash执行就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cp -R public/* .deploy/xxx(your username).github.io</span><br><span class="line"><span class="comment">#这一行是复制blog下面的public中的网页代码到我们Git的本地文件夹</span></span><br><span class="line">cd .deploy/xxx(your username).github.io</span><br><span class="line"><span class="comment">#进入这个本地的Git文件夹</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment">#加载此文件夹下面所有的文件</span></span><br><span class="line">git commit -m “update”</span><br><span class="line"><span class="comment">#提交代码</span></span><br><span class="line">git push </span><br><span class="line"><span class="comment">#push到GitHub上</span></span><br></pre></td></tr></table></figure><p>到这里你的个人博客基本框架搭建起来了，这里根据你自己所选的主题配置的不同，你的个性化设置也可以不一样，有很多的配置。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux上配置Autoware环境</title>
      <link href="2020/03/18/Research200318-Install-Autoware-by-Docker/"/>
      <url>2020/03/18/Research200318-Install-Autoware-by-Docker/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/03/18/Research200318-Install-Autoware-by-Docker/200318-1.jpg" alt="The First Title Picture"></p><a id="more"></a><p><strong>本文介绍用Docker安装Autoware</strong></p><h1 id="To-be-updating"><a href="#To-be-updating" class="headerlink" title="To be updating"></a>To be updating</h1>]]></content>
      
      
      <categories>
          
          <category> Research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Autonomous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客中图片的相对路径在线不显示问题</title>
      <link href="2020/03/10/Hexo200310-%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E7%9A%84%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%9C%A8%E7%BA%BF%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
      <url>2020/03/10/Hexo200310-%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E7%9A%84%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%9C%A8%E7%BA%BF%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/03/10/Hexo200310-%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E7%9A%84%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%9C%A8%E7%BA%BF%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/200310-1.jpg" alt="The First Title Picture"></p><a id="more"></a><p><strong>本文介绍Blog中图片引用问题</strong></p><h1 id="引用图片的几种方式"><a href="#引用图片的几种方式" class="headerlink" title="引用图片的几种方式"></a>引用图片的几种方式</h1><p><strong>a.直接通过网络链接图片，如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![The First Title Picture](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;yourusername&#x2F;yourrepository&#x2F;master&#x2F;hexo-0001.png &quot;Optional Title&quot;)</span><br></pre></td></tr></table></figure><p><strong>b.在线显示</strong></p><p>这种方式在hexo g之后会在线显示，但是不会编辑的时候实时显示图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![The First Title Picture](.&#x2F;img.jpg)</span><br></pre></td></tr></table></figure><p><strong>c.实时显示</strong></p><p>这种方式会实时显示图片，但是不会在线生成图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![The First Title Picture](your_article_folder&#x2F;img.jpg)</span><br></pre></td></tr></table></figure><h1 id="常见的图片引用问题"><a href="#常见的图片引用问题" class="headerlink" title="常见的图片引用问题"></a>常见的图片引用问题</h1><p>上面的b和c出现的问题，如何结合两者，使得图片实时显示的同时又可以在线实现，我们需要如下的插件：</p><p><code>hexo-asset-image</code></p><p><strong>安装</strong><br>可以参考<a href="https://github.com/xcodebuild/hexo-asset-image" target="_blank" rel="noopener">官方地址</a></p><p><code>npm install hexo-asset-image --save</code></p><p>然后就可以直接用上述c的方法进行引用图片，但是会出现如下的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update link as:--&gt;&#x2F;.io&#x2F;&#x2F;06&#x2F;01&#x2F;vim&#x2F;1561905818946.png</span><br><span class="line">update link as:--&gt;&#x2F;.io&#x2F;&#x2F;06&#x2F;01&#x2F;vim&#x2F;1561905818946.png</span><br></pre></td></tr></table></figure><p>即使hexo clean，问题还是依然存在</p><p><strong>原因是：</strong></p><blockquote><p>应该是hexo-asset-image这个插件的bug,hexo版本3.0以上获取网站url的方式与3.0以下有些不同，照着文章修改hexo.js的index.js就行，或者直接卸载hexo-asset-image，选择使用hexo 3.0方式的标签插件应该也可以</p></blockquote><p>所以我们需要在下载了插件之后，对插件中的一些配置文件进行修改，不然这个插件可能会出Bug</p><p><strong>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line">var cheerio &#x3D; require(&#39;cheerio&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;14480345&#x2F;how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line">function getPosition(str, m, i) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version &#x3D; String(hexo.version).split(&#39;.&#39;);</span><br><span class="line">hexo.extend.filter.register(&#39;after_post_render&#39;, function(data)&#123;</span><br><span class="line">  var config &#x3D; hexo.config;</span><br><span class="line">  if(config.post_asset_folder)&#123;</span><br><span class="line">    var link &#x3D; data.permalink;</span><br><span class="line">if(version.length &gt; 0 &amp;&amp; Number(version[0]) &#x3D;&#x3D; 3)</span><br><span class="line">   var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 1) + 1;</span><br><span class="line">else</span><br><span class="line">   var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 3) + 1;</span><br><span class="line">&#x2F;&#x2F; In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;...&#x2F;about&#x2F;index.html&quot;.</span><br><span class="line">var endPos &#x3D; link.lastIndexOf(&#39;&#x2F;&#39;) + 1;</span><br><span class="line">    link &#x3D; link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess &#x3D; [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];</span><br><span class="line">    for(var i &#x3D; 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key &#x3D; toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ &#x3D; cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: false,</span><br><span class="line">        xmlMode: false,</span><br><span class="line">        lowerCaseTags: false,</span><br><span class="line">        decodeEntities: false</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(&#39;img&#39;).each(function()&#123;</span><br><span class="line">if ($(this).attr(&#39;src&#39;))&#123;</span><br><span class="line">&#x2F;&#x2F; For windows style path, we replace &#39;\&#39; to &#39;&#x2F;&#39;.</span><br><span class="line">var src &#x3D; $(this).attr(&#39;src&#39;).replace(&#39;\\&#39;, &#39;&#x2F;&#39;);</span><br><span class="line">if(!&#x2F;http[s]*.*|\&#x2F;\&#x2F;.*&#x2F;.test(src) &amp;&amp;</span><br><span class="line">   !&#x2F;^\s*\&#x2F;&#x2F;.test(src)) &#123;</span><br><span class="line">  &#x2F;&#x2F; For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.</span><br><span class="line">  &#x2F;&#x2F; In addition, to support multi-level local directory.</span><br><span class="line">  var linkArray &#x3D; link.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">return elem !&#x3D; &#39;&#39;;</span><br><span class="line">  &#125;);</span><br><span class="line">  var srcArray &#x3D; src.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">return elem !&#x3D; &#39;&#39; &amp;&amp; elem !&#x3D; &#39;.&#39;;</span><br><span class="line">  &#125;);</span><br><span class="line">  if(srcArray.length &gt; 1)</span><br><span class="line">srcArray.shift();</span><br><span class="line">  src &#x3D; srcArray.join(&#39;&#x2F;&#39;);</span><br><span class="line">  $(this).attr(&#39;src&#39;, config.root + link + src);</span><br><span class="line">  console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">console.info&amp;&amp;console.info($(this));</span><br><span class="line">&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] &#x3D; $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>最后不要忘记了<br><code>post_asset_folder: true</code></p><h1 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h1><p>最后可以参考<a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">这篇文章</a>和<a href="https://segmentfault.com/q/1010000019625231/a-1020000019625326" target="_blank" rel="noopener">这篇文章</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语学习路线</title>
      <link href="2020/03/05/Eng190808-%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>2020/03/05/Eng190808-%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/03/05/Eng190808-%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/english-0002.png" alt="The First Title Picture" title="Optional Title"></p><a id="more"></a><p><strong>此文介绍English的学习路线</strong></p><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><ol><li>to be continued</li></ol><h2 id="结束线"><a href="#结束线" class="headerlink" title="结束线"></a>结束线</h2>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC端部署Markdown环境</title>
      <link href="2020/02/02/Mac200202-PC%E7%AB%AF%E9%83%A8%E7%BD%B2Markdown%E7%8E%AF%E5%A2%83/"/>
      <url>2020/02/02/Mac200202-PC%E7%AB%AF%E9%83%A8%E7%BD%B2Markdown%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/02/02/Mac200202-PC%E7%AB%AF%E9%83%A8%E7%BD%B2Markdown%E7%8E%AF%E5%A2%83/200303-1.jpg" alt="The First Title Picture"></p><a id="more"></a><p>本文介绍在PC端部署Markdown的环境</p><h1 id="编辑器的选择"><a href="#编辑器的选择" class="headerlink" title="编辑器的选择"></a>编辑器的选择</h1><ul><li>Typora 是一个相对而言多平台且小且口碑都不错的编辑器，但是我个人无法习惯这种直接就显示内容的编辑器，相对而言，更习惯双栏显示的编辑器。</li><li>CmdMarkdown 但是她更类似于在线同步的那种编辑器，所以放弃。</li><li>Mweb 在在PC端没有客户端，所以没办法用。</li><li>VScode 最终还是选择了开源的编辑器，然后加插件来解决编辑问题。</li></ul><h2 id="VSCode部署环境"><a href="#VSCode部署环境" class="headerlink" title="VSCode部署环境"></a>VSCode部署环境</h2><ul><li><p>1.Markdown All in One </p></li><li><p>2.Markdown Preview Enhanced 这个插件的主要是一个很好用的完善预览功能的插件，可以更加形象的展示所编写的pdf格式的文档样式。在插件库中搜索markdown即可找到该插件，然后点击安装后重新加载。</p></li><li><p>3.如需更多配置信息，可以参考<a href="https://www.jianshu.com/p/9f13e971fe6b" target="_blank" rel="noopener">这里</a>。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PowerPoint安装IguanaTex插件</title>
      <link href="2019/12/25/Research191225-PowerPoint%E5%AE%89%E8%A3%85IguanaTex%E6%8F%92%E4%BB%B6/"/>
      <url>2019/12/25/Research191225-PowerPoint%E5%AE%89%E8%A3%85IguanaTex%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/12/25/Research191225-PowerPoint%E5%AE%89%E8%A3%85IguanaTex%E6%8F%92%E4%BB%B6/2019-12-25-2.jpg" alt="The First Title Picture"></p><a id="more"></a><h1 id="1-前提"><a href="#1-前提" class="headerlink" title="1 前提"></a>1 前提</h1><p>电脑已经配置好Latex环境</p><h1 id="2-安装过程"><a href="#2-安装过程" class="headerlink" title="2 安装过程"></a>2 安装过程</h1><p><strong>2.1 下载IguanaTex_v1_56插件</strong></p><p><a href="http://www.jonathanleroux.org/software/iguanatex/download.html" target="_blank" rel="noopener">官网下载地址</a><br>下载的文件格式为：<code>IguanaTex v1.56 (.ppam) .ppam</code></p><p><strong>2.2 移动插件</strong></p><p>将IguanaTex v1.56 .ppam移动到<code>C:\Users\ 你的用户名\AppData\Roaming\Microsoft\AddIns</code>目录下。</p><p><strong>2.3 创建临时文件夹</strong></p><p>在C盘创建一个空白文件夹，并复制该文件夹路径。</p><p><strong>2.4 设置PPT激活Iguana</strong></p><p>打开<code>PowerPoint &gt; 文件 &gt; 选项 &gt; 加载项 &gt; 管理 &gt; 下拉 &gt; 选择PowerPoint加载项</code>，选择<code>IguanaTex v1.56 .ppam</code><br><img src="/2019/12/25/Research191225-PowerPoint%E5%AE%89%E8%A3%85IguanaTex%E6%8F%92%E4%BB%B6/2019-12-25 170441.jpg" alt></p><p><strong>2.5 设置Iguana</strong></p><p>在PowerPoint面板点击<code>IguanaTex</code>，点击<code>main settings</code>,在路径处粘贴之前创建的文件夹路径。<br><img src="/2019/12/25/Research191225-PowerPoint%E5%AE%89%E8%A3%85IguanaTex%E6%8F%92%E4%BB%B6/2019-12-25 170534.jpg" alt></p><h1 id="3-使用"><a href="#3-使用" class="headerlink" title="3 使用"></a>3 使用</h1><p>使用就是按照正常的LaTex的输入使用即可。<br><img src="/2019/12/25/Research191225-PowerPoint%E5%AE%89%E8%A3%85IguanaTex%E6%8F%92%E4%BB%B6/2019-12-25 170550.jpg" alt></p><p>以下为<a href="http://www.jonathanleroux.org/software/iguanatex/download.html" target="_blank" rel="noopener">Reference</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Installation:</span><br><span class="line"></span><br><span class="line">1.Load the add-in:</span><br><span class="line">in “File” &gt; “Options” &gt; “Add-Ins” &gt; “Manage:”, choose “PowerPoint Add-Ins” then “Go…”, then click “Add New”, select the .ppam file in the default Add-In folder or in the folder where you downloaded it, then “Close”</span><br><span class="line"></span><br><span class="line">2.Create and set a temporary file folder:</span><br><span class="line">IguanaTex needs access to a folder with read&#x2F;write permissions to store temporary files.</span><br><span class="line">The default is “C:\Temp”. If you have write permissions under “C:”, create the folder “C:\Temp”. You’re all set.</span><br><span class="line">If you cannot create this folder, choose&#x2F;create a folder with write permission at any other location. In the IguanaTex tab, choose “Main Settings” and put the path to the folder of your choice. You can also use a relative path under the presentation’s folder (e.g., “.” for the presentation folder itself).</span><br><span class="line"></span><br><span class="line">3.(Optional, for pdflatex&#x2F;xelatex&#x2F;lualatex support) Install and set path to GhostScript and ImageMagick:</span><br><span class="line">To use the PDF to PNG conversion (i.e., with pdflatex, xelatex and lualatex) instead of the default DVI to PNG one, you need to install GhostScript and ImageMagick and set the appropriate full paths to gswin32c.exe&#x2F;gswin64c.exe (note the “c”!) and convert.exe in the “Main Settings” window. When installing ImageMagick, make sure to check the box to “Install development headers and libraries for C and C++” and (in recent versions) to “Install legacy utilities (e.g. convert)”. Download links are provided in the Main Settings window.</span><br><span class="line"></span><br><span class="line">4.(Optional, for vector graphics support) Install and set path to TeX2img:</span><br><span class="line">To use vector graphics output, you need to install TeX2img (here is the direct download link for recommended version 2.1.0). After unpacking TeX2img somewhere on your machine, please run TeX2img.exe once to set the various paths to latex&#x2F;ghostscript, then set the full path to TeX2imgc.exe (note the “c”!) in the “Main Settings” window.</span><br></pre></td></tr></table></figure><h1 id="4-其他"><a href="#4-其他" class="headerlink" title="4 其他"></a>4 其他</h1><p>为了可以输入任意公式和中英日文，可以参考下面的代码输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;amsmath&#125;</span><br><span class="line">\usepackage&#123;amssymb&#125;</span><br><span class="line">\pagestyle&#123;empty&#125;</span><br><span class="line"></span><br><span class="line">\newcommand&#123;\xa&#125;&#123;\mbox&#123;\boldmath$a$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xb&#125;&#123;\mbox&#123;\boldmath$b$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xc&#125;&#123;\mbox&#123;\boldmath$c$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xd&#125;&#123;\mbox&#123;\boldmath$d$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xe&#125;&#123;\mbox&#123;\boldmath$e$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xf&#125;&#123;\mbox&#123;\boldmath$f$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xg&#125;&#123;\mbox&#123;\boldmath$g$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xh&#125;&#123;\mbox&#123;\boldmath$h$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xk&#125;&#123;\mbox&#123;\boldmath$k$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xl&#125;&#123;\mbox&#123;\boldmath$l$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xp&#125;&#123;\mbox&#123;\boldmath$p$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xq&#125;&#123;\mbox&#123;\boldmath$q$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xr&#125;&#123;\mbox&#123;\boldmath$r$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xs&#125;&#123;\mbox&#123;\boldmath$s$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xu&#125;&#123;\mbox&#123;\boldmath$u$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xv&#125;&#123;\mbox&#123;\boldmath$v$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xx&#125;&#123;\mbox&#123;\boldmath$x$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xy&#125;&#123;\mbox&#123;\boldmath$y$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xz&#125;&#123;\mbox&#123;\boldmath$z$&#125;&#125;</span><br><span class="line"></span><br><span class="line">\newcommand&#123;\xE&#125;&#123;\mbox&#123;\boldmath$E$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xF&#125;&#123;\mbox&#123;\boldmath$F$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xG&#125;&#123;\mbox&#123;\boldmath$G$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xO&#125;&#123;\mbox&#123;\boldmath$O$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xP&#125;&#123;\mbox&#123;\boldmath$P$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xR&#125;&#123;\mbox&#123;\boldmath$R$&#125;&#125;</span><br><span class="line"></span><br><span class="line">\newcommand&#123;\xrho&#125;&#123;\mbox&#123;\boldmath$\rho$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xtheta&#125;&#123;\mbox&#123;\boldmath$\theta$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xtau&#125;&#123;\mbox&#123;\boldmath$\tau$&#125;&#125;</span><br><span class="line">\newcommand&#123;\diag&#125;&#123;\mbox&#123;diag&#125;&#125;</span><br><span class="line">\newcommand&#123;\eye&#125;&#123;\mbox&#123;eye&#125;&#125;</span><br><span class="line">\newcommand&#123;\tr&#125;&#123;\mbox&#123;tr&#125;&#125;</span><br><span class="line">\newcommand&#123;\sgn&#125;&#123;\mbox&#123;sgn&#125;&#125;</span><br><span class="line">\newcommand&#123;\xOmega&#125;&#123;\mbox&#123;\boldmath$\Omega$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xDelta&#125;&#123;\mbox&#123;\boldmath$\Delta$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xGamma&#125;&#123;\mbox&#123;\boldmath$\Gamma$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xchi&#125;&#123;\mbox&#123;\boldmath$\chi$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xepsilon&#125;&#123;\mbox&#123;\boldmath$\epsilon$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xTheta&#125;&#123;\mbox&#123;$\Theta$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xLambda&#125;&#123;\mbox&#123;$\Lambda$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xPhi&#125;&#123;\mbox&#123;\boldmath$\Phi$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xzero&#125;&#123;\mbox&#123;\boldmath$0$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xalpha&#125;&#123;\mbox&#123;\boldmath$\alpha$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xbeta&#125;&#123;\mbox&#123;\boldmath$\beta$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xxi&#125;&#123;\mbox&#123;\boldmath$\xi$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xeta&#125;&#123;\mbox&#123;\boldmath$\eta$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xlambda&#125;&#123;\mbox&#123;\boldmath$\lambda$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xzeta&#125;&#123;\mbox&#123;\boldmath$\zeta$&#125;&#125;</span><br><span class="line">\newcommand&#123;\xomega&#125;&#123;\mbox&#123;\boldmath$\omega$&#125;&#125;</span><br><span class="line"></span><br><span class="line">\usepackage&#123;CJKutf8&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;CJK&#125;&#123;UTF8&#125;&#123;ipxm&#125;</span><br><span class="line">输入正文</span><br><span class="line">\end&#123;CJK&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PowerPoint </tag>
            
            <tag> LaTex </tag>
            
            <tag> PPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群晖实现对exfat格式的识别</title>
      <link href="2019/11/11/Nas191111-%E7%BE%A4%E6%99%96%E5%AE%9E%E7%8E%B0%E5%AF%B9exfat%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%AF%86%E5%88%AB/"/>
      <url>2019/11/11/Nas191111-%E7%BE%A4%E6%99%96%E5%AE%9E%E7%8E%B0%E5%AF%B9exfat%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/11/11/Nas191111-%E7%BE%A4%E6%99%96%E5%AE%9E%E7%8E%B0%E5%AF%B9exfat%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%AF%86%E5%88%AB/200303-1.png" alt="The First Title Picture" title="Optional Title"></p><a id="more"></a><p><strong>本文介绍让群晖NAS系统DSM支持exfat文件格式</strong></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为exfat是微软的专利格式，商业应用要交版权费用，所以群晖DSM系统都不支持exfat文件格式的读写。随着存储卡的越做越大，而一般大容量又有的时候在macOS系统和PC端都要用，那么往往都是用exfat格式保存的。这个时候要用NAS来直接备份存储卡，这就行不通了，必须先导入电脑，然后再通过电脑传到NAS上面，但是如果你的局域网路由器不是千兆级别的，那么传输速度基本就停留在了10M/s的速度，动辄几十上百G的文件，这得传到什么时候，所以必须得直接插在NAS上进行传输。</p><p>在DSM 6.0版本以后，群晖官方的确提供了一个新的<code>exFAT access</code>加值套件，可以支持exfat格式的读写。不但要花$3.99美金单独购买，而且只限在一台NAS上使用。不同的NAS或者重新安装系统以后，就不能用了。</p><p>但是群晖本身就是一个Linux系统，Ubuntu可以支持exfat格式，原理应该类似。借用Ubuntu的deb安装包<code>exfat-fuse</code>是可以实现的。网上有网友在<code>DSM 5.0</code>系统<code>DSM 6.0</code>系统上都能实现。以下为方法。</p><h1 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h1><p>这个方法并不是官方提供的，需要使用到一些简单的Linux命令，不熟悉的话，存在有一定风险。所以，请谨慎尝试，风险自担！</p><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="1-启动SSH功能"><a href="#1-启动SSH功能" class="headerlink" title="1.启动SSH功能"></a>1.启动SSH功能</h2><p>开启群晖的ssh的功能<br><img src="/2019/11/11/Nas191111-%E7%BE%A4%E6%99%96%E5%AE%9E%E7%8E%B0%E5%AF%B9exfat%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%AF%86%E5%88%AB/200303-4.png" alt title="Optional Title"></p><h2 id="2-激活root用户"><a href="#2-激活root用户" class="headerlink" title="2.激活root用户"></a>2.激活root用户</h2><p>先用管理员账户登陆ssh，激活root用户，退出后切换成root用户。<br>管理员账号登陆，按提示输入密码：<br><code>ssh admin@192.168.1.100</code><br>添加root用户，密码自己决定：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su -</span><br><span class="line">synouser --setpw root your_new_root_password</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><br>用root用户登陆ssh：<br><code>ssh root@192.168.1.100</code></p><h2 id="3-下载对应的exfat-fuse"><a href="#3-下载对应的exfat-fuse" class="headerlink" title="3.下载对应的exfat-fuse"></a>3.下载对应的exfat-fuse</h2><p>由于DSM 5.0是32bit操作系统，而DSM 6.0是64bit，它们需要的安装包是不一样的，下面分开说明。</p><p>DSM 5.0安装方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -P &#x2F;tmp&#x2F; http:&#x2F;&#x2F;mirrors.kernel.org&#x2F;ubuntu&#x2F;pool&#x2F;universe&#x2F;f&#x2F;fuse-exfat&#x2F;exfat-fuse_1.2.3-1_i386.deb</span><br><span class="line">dpkg -x &#x2F;tmp&#x2F;exfat-fuse_1.2.3-1_i386.deb &#x2F;tmp&#x2F;exfat-fuse&#x2F;</span><br><span class="line">cp &#x2F;tmp&#x2F;exfat-fuse&#x2F;sbin&#x2F;mount.exfat-fuse &#x2F;usr&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure><br>DSM 6.0安装方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -P &#x2F;tmp&#x2F; http:&#x2F;&#x2F;mirrors.kernel.org&#x2F;ubuntu&#x2F;pool&#x2F;universe&#x2F;f&#x2F;fuse-exfat&#x2F;exfat-fuse_1.2.3-1_amd64.deb</span><br><span class="line">dpkg -x &#x2F;tmp&#x2F;exfat-fuse_1.2.3-1_amd64.deb &#x2F;tmp&#x2F;exfat-fuse&#x2F;</span><br><span class="line">cp &#x2F;tmp&#x2F;exfat-fuse&#x2F;sbin&#x2F;mount.exfat-fuse &#x2F;usr&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure></p><h2 id="4-建立共享文件夹"><a href="#4-建立共享文件夹" class="headerlink" title="4.建立共享文件夹"></a>4.建立共享文件夹</h2><p>登陆NAS界面，在存储空间1增加一个共享文件夹，例如：<code>usbexfat</code><br>增加共享文件夹<code>usbexfat</code><br><img src="/2019/11/11/Nas191111-%E7%BE%A4%E6%99%96%E5%AE%9E%E7%8E%B0%E5%AF%B9exfat%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%AF%86%E5%88%AB/200303-5.jpg" alt title="Optional Title"></p><h2 id="5-查看磁盘信息"><a href="#5-查看磁盘信息" class="headerlink" title="5.查看磁盘信息"></a>5.查看磁盘信息</h2><p>插入exfat格式的U盘或者读卡器，然后回到ssh，查看磁盘信息：<br><code>fdisk -l</code><br>DSM 5.0下面的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Device Boot Start End Sectors Size Id Type</span><br><span class="line">&#x2F;dev&#x2F;sdu1 256 7823654 7823399 3.7G 7 HPFS&#x2F;NTFS</span><br></pre></td></tr></table></figure><br>DSM 6.0下面的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Device Boot Start End Sectors Size Id Type</span><br><span class="line">&#x2F;dev&#x2F;sdu1 256 7823654 7823399 3.7G 7 HPFS&#x2F;NTFS&#x2F;exFAT</span><br></pre></td></tr></table></figure><br>以上信息根据具体自己的电脑信息等会不一样，大家可以根据自己的实际情况自己进行设置<br><img src="/2019/11/11/Nas191111-%E7%BE%A4%E6%99%96%E5%AE%9E%E7%8E%B0%E5%AF%B9exfat%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%AF%86%E5%88%AB/200303-2.png" alt title="Optional Title"></p><h2 id="6-手工挂载exfat分区"><a href="#6-手工挂载exfat分区" class="headerlink" title="6.手工挂载exfat分区"></a>6.手工挂载exfat分区</h2><p>由于设备不同，<code>/dev/sdq2</code>这个分区可能不同，需要按照实际情况改成自己系统对应的。<br><code>mount.exfat-fuse /dev/sdq2 /volume1/usbexfat -o nonempty</code><br><img src="/2019/11/11/Nas191111-%E7%BE%A4%E6%99%96%E5%AE%9E%E7%8E%B0%E5%AF%B9exfat%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%AF%86%E5%88%AB/200303-3.png" alt title="Optional Title"></p><h2 id="7-成功访问"><a href="#7-成功访问" class="headerlink" title="7.成功访问"></a>7.成功访问</h2><p>不出问题的话，现在通过共享文件夹usbexfat，愉快的访问内容。</p><h2 id="8-文件处理"><a href="#8-文件处理" class="headerlink" title="8.文件处理"></a>8.文件处理</h2><p>搞这么久可不止是为了让文件能在NAS系统中可以显现，虽然你现在已经可以直接在NAS的usbexfat文件夹中查看你的移动设备的内容，但是亲测，当你直接拷贝文件到其他NAS文件夹的时候，比远程拷贝更慢，我感觉可能是因为一边从nas拷贝到你的电脑主机，再从电脑主机拷贝到你的NAS，这个操作实在是太骚了，得不偿失。于是我尝试了直接用Linux系统的命令行就行拷贝操作，证明用命令行的操作会快非常多，虽然不能直接看到拷贝速度，但是亲测50G的文件夹也就几分钟的事。<br><img src="/2019/11/11/Nas191111-%E7%BE%A4%E6%99%96%E5%AE%9E%E7%8E%B0%E5%AF%B9exfat%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%AF%86%E5%88%AB/200303-6.png" alt title="Optional Title"><br><strong>注意以上图片中的拷贝模式</strong></p><p><strong>这个也同样适用于在NAS系统中不同共享文件夹之间的文件处理，如果直接在电脑端进行操作，操作的逻辑就是先复制到电脑端，再复制到NAS端，这样的操作逻辑虽然可视化，但是对于大文件夹来说简直就是得不偿失，所以直接以用户名形式进入Linux系统，然后再进行相应的文件操作，速度快到飞起。</strong></p><p><strong>另外，cp命令对于大文件还是很慢，但是mv命令基本就是瞬间完成。</strong></p><h2 id="9-用完后，可以手工卸载exfat分区："><a href="#9-用完后，可以手工卸载exfat分区：" class="headerlink" title="9.用完后，可以手工卸载exfat分区："></a>9.用完后，可以手工卸载exfat分区：</h2><p><code>umount /volume1/usbexfat</code></p><h2 id="10-弹出设备"><a href="#10-弹出设备" class="headerlink" title="10.弹出设备"></a>10.弹出设备</h2><p><code>eject -F /dev/sdu1</code></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>目前的方法，有以下的优缺点：</p><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">完全免费！省去了购买$3.99美金的加值套件——虽然折合20多元并不是很贵，能省一点是一点。</span><br><span class="line">DSM 5.0和6.0都支持，不分黑群白群，而且安装数量的限制——自己任性安装，想装几台就装几台。</span><br></pre></td></tr></table></figure><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">读取exfat格式支持度较好，但不建议写入！</span><br><span class="line">写入后，再插到电脑上用，会提示卡有错误，需要扫描一次来修复。</span><br><span class="line">使用exfat主要是备份存储卡的数据，所以尽量不要在NAS里面写入数据。</span><br><span class="line">需要手工挂载和卸载exfat分区，略显麻烦，不过这个也是有解决办法的。</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>1.<a href="https://xpenology.com/forum/topic/6715-exfat-for-dsm-50-amp-dsm-60/" target="_blank" rel="noopener">参考1</a></p><p>2.<a href="https://github.com/luckylz2git/exfat-synology" target="_blank" rel="noopener">参考2</a></p>]]></content>
      
      
      <categories>
          
          <category> Nas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nas </tag>
            
            <tag> Synology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTex入门手册</title>
      <link href="2019/10/30/Research191030-LaTex%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/"/>
      <url>2019/10/30/Research191030-LaTex%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/10/30/Research191030-LaTex%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/191030-1.png" alt="The First Title Picture" title="Optional Title"></p><a id="more"></a><h1 id="1-安装LaTex"><a href="#1-安装LaTex" class="headerlink" title="1 安装LaTex"></a>1 安装LaTex</h1><p><strong>核心内容2歩</strong></p><ul><li>安装LaTex</li><li>部署Atom</li></ul><h2 id="1-1-安装LaTex"><a href="#1-1-安装LaTex" class="headerlink" title="1.1 安装LaTex"></a>1.1 安装LaTex</h2><ul><li><p>无论是Mac环境还是PC环境，都需要现在电脑上装好LaTex，具体操作步骤直接百度和谷歌会更加迅速，整个安装包自动下载，但是安装包比较大，花费时间会比较长。</p></li><li><p>这里只以PC环境为例，简单介绍一下下载过程（实际过程操作过程中，在macOS系统因为种种原因，包括引擎的切换等等总会出现不同程度的bug，所以基本个人都是在PC环境中进行LaTex操作）。</p><p>TeX Live官方地址<a href="http://www.tug.org/texlive/acquire-netinstall.html" target="_blank" rel="noopener">下载</a><br><img src="/2019/10/30/Research191030-LaTex%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/191030-5.png" alt="1"></p></li></ul><h2 id="1-2-部署Atom"><a href="#1-2-部署Atom" class="headerlink" title="1.2 部署Atom"></a>1.2 部署Atom</h2><p> 这一步主要就只是给Atom装三个Package，分别是：</p><ul><li>latex</li><li>language-latex</li><li>pdf-view</li></ul><p><img src="/2019/10/30/Research191030-LaTex%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/191030-6.png" alt="2"></p><p>注意<code>latex</code>插件的引擎设置问题，根据自己的需要设置，一般设置为<code>platex</code>。</p><p>如需更多配置信息，可以参考<a href="https://www.jianshu.com/p/b16fde27353b" target="_blank" rel="noopener">这里</a></p><h1 id="2-LaTex导入eps插图"><a href="#2-LaTex导入eps插图" class="headerlink" title="2 LaTex导入eps插图"></a>2 LaTex导入eps插图</h1><p>画图的方式有很多，这边用最简单的PPT中直接画图，PPT中自带的公式即可输入，操作简单方便。</p><h2 id="2-1-PPT打印出图"><a href="#2-1-PPT打印出图" class="headerlink" title="2.1 PPT打印出图"></a>2.1 PPT打印出图</h2><p>画完图，需要打印，这里需要安装一个打印eps的虚拟打印机。</p><p><img src="/2019/10/30/Research191030-LaTex%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/191030-2.jpg" alt="The First Title Picture"></p><h2 id="2-2-调整边界"><a href="#2-2-调整边界" class="headerlink" title="2.2 调整边界"></a>2.2 调整边界</h2><p>打印出图之后的eps文件，边界是很大的，就是原文件的边界，所以我们需要裁减，使它沿着最小出图边界自动裁减。</p><h3 id="2-2-1-安装GSview"><a href="#2-2-1-安装GSview" class="headerlink" title="2.2.1 安装GSview"></a>2.2.1 安装GSview</h3><p><a href="http://pages.cs.wisc.edu/~ghost/" target="_blank" rel="noopener">下载地址</a></p><h3 id="2-2-2-裁减出图"><a href="#2-2-2-裁减出图" class="headerlink" title="2.2.2 裁减出图"></a>2.2.2 裁减出图</h3><p>打开之后直接修剪<br><img src="/2019/10/30/Research191030-LaTex%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/191030-3.jpg" alt="The First Title Picture"><br>勾选自动裁减<br><img src="/2019/10/30/Research191030-LaTex%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/191030-4.jpg" alt="The First Title Picture"></p><h2 id="2-3-Note"><a href="#2-3-Note" class="headerlink" title="2.3 Note"></a>2.3 Note</h2><ul><li><p><strong>虽然在ppt中可以安装IguanaTex插件，但是输入的公式有的时候会报错或者不显示的情况，所以还是直接用PPT自带的公式编辑器编辑公式更好一点。</strong></p></li><li><p><strong>虽然原则上是支持其他文件格式的图片插入的，但是支持最好的还是eps格式的图片 </strong></p></li></ul><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>在公式栏中是不可以随便空行的，会产生很多未知的错误</li><li>\hspace可以很好的调节公式之间的间距</li></ul><p>　　　　　　　</p>]]></content>
      
      
      <categories>
          
          <category> Research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
            <tag> EPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础编程总结</title>
      <link href="2019/10/20/Cpp191020-C-%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
      <url>2019/10/20/Cpp191020-C-%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/10/20/Cpp191020-C-%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93/191020-1.jpg" alt="T"></p><a id="more"></a><p>本文介绍<code>C++</code>基础编程总结</p><h1 id="1-C-基础"><a href="#1-C-基础" class="headerlink" title="1 C++基础"></a>1 C++基础</h1><h2 id="1-1-注释"><a href="#1-1-注释" class="headerlink" title="1.1 注释"></a>1.1 注释</h2><ol><li><strong>单行注释</strong>：<code>// 描述信息</code> </li><li><strong>多行注释</strong>： <code>/* 描述信息 */</code>  <span style="color:red;">VS的快捷键Ctrl+K+C</span></li></ol><h2 id="1-2-常量"><a href="#1-2-常量" class="headerlink" title="1.2  常量"></a>1.2  常量</h2><p><strong>作用</strong>：用于记录程序中不可更改的数据</p><p>C++定义常量两种方式</p><ol><li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code>   //<span style="color:red;"><strong>#define day 7</strong></span><ul><li>==通常在文件上方定义==，表示一个常量 </li></ul></li><li><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code><ul><li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li></ul></li></ol><h2 id="1-3-标识符命名规则"><a href="#1-3-标识符命名规则" class="headerlink" title="1.3 标识符命名规则"></a>1.3 标识符命名规则</h2><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><blockquote><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p></blockquote><h1 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h1><h2 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h2><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><div class="table-container"><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long(长整形)</td><td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long(长长整形)</td><td>8字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table></div><h2 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h2><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p><p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"short 类型所占内存空间为： "</span> &lt;&lt; <span class="keyword">sizeof</span>(short) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h2><p><strong>作用</strong>：用于==表示小数==</p><p>浮点型变量分为两种：</p><ol><li>单精度float </li><li>双精度double</li></ol><p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p><div class="table-container"><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15～16位有效数字</td></tr></tbody></table></div><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f1 = <span class="number">3.14f</span>; <span class="comment">//为什么要在小数后面加这个f，因为当你写一个小数的时候，编译器会默认这个小数是一个double类型的，然后你在前面又定义了float，这样编译器会强行转换一波，你如果直接在小数后加这个f，编译器就能直接明白你输入的这个是float</span></span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line"><span class="comment">//科学计数法</span></span><br><span class="line"><span class="keyword">float</span> f2 = <span class="number">3e2</span>; <span class="comment">// 3 * 10 ^ 2</span></span><br></pre></td></tr></table></figure><h2 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h2><p><strong>作用：</strong>字符型变量用于显示单个字符</p><p><strong>语法：</strong><code>char ch = &#39;a&#39;;</code>   //不要用双引号</p><ul><li>C和C++中字符型变量只占用==1个字节==。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的<strong>ASCII编码</strong>放入到存储单元</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch = <span class="string">'a'</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span>) &lt;&lt; <span class="built_in">endl</span>;  输出：<span class="number">1</span></span><br><span class="line"><span class="comment">//常用的ASCII码 97a 和 65A</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>)ch &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//查看字符a对应的ASCII码  </span></span><br><span class="line">ch = <span class="number">97</span>; <span class="comment">//可以直接用ASCII给字符型变量赋值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出：a</span></span><br></pre></td></tr></table></figure><h2 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h2><p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p><p>现阶段我们常用的转义字符有：<code>\n  \\  \t</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\\"</span> &lt;&lt; <span class="built_in">endl</span>;             <span class="comment">//输出反斜杠</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"aaaa\tHello"</span> &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">//水平制表符，一个\t占8个位置，对齐</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span> &lt;&lt; <span class="built_in">endl</span>;             <span class="comment">//换行</span></span><br></pre></td></tr></table></figure><h2 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h2><p><strong>作用</strong>：用于表示一串字符</p><p><strong>两种风格</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. C风格字符串： char 变量名[] = "字符串值"</span></span><br><span class="line"><span class="keyword">char</span> str1[] = <span class="string">"hello world"</span>; <span class="comment">//C风格的字符串要用双引号括起来</span></span><br><span class="line"><span class="comment">//2. C++风格字符串：  string  变量名 = "字符串值"</span></span><br><span class="line"><span class="built_in">string</span> str = <span class="string">"hello world"</span>; <span class="comment">//C++风格字符串，需要加入头文件==#include&lt;string&gt;==</span></span><br></pre></td></tr></table></figure><h2 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h2><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p><p>bool类型只有两个值：</p><ul><li>true  —- 真（本质是1）</li><li>false —- 假（本质是0）</li></ul><p><strong>bool类型占==1个字节==大小</strong></p><h2 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h2><p><strong>作用：用于从键盘获取数据</strong></p><p><strong>关键字：</strong>cin</p><p><strong>语法：</strong> <code>cin &gt;&gt; 变量</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整型输入</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入整型变量："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h1 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h1><h2 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h2><h2 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h2><h2 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h2><h2 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h2><h1 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h1><h2 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h2><h3 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h3><h3 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h3><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p><p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p><p><strong>解释：</strong></p><p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p><p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">c = a &gt; b ? a : b;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c = "</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++中三目运算符返回的是变量,可以继续赋值</span></span><br><span class="line">(a &gt; b ? a : b) = <span class="number">100</span>;  <span class="comment">//因为比较之后返回的是b的变量，然后赋值100，所以b=100</span></span><br></pre></td></tr></table></figure><h3 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请给电影打分"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (score)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"经典"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">break</span>; <span class="comment">//case里如果没有break，那么程序会一直向下执行,break用来跳出switch语句</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"非常好"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"一般"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"烂片"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</span></span><br></pre></td></tr></table></figure><h2 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h2><h3 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"num = "</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  num++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h3><p><strong>注意：</strong>与while的区别在于==do…while会先执行一次循环语句==，再判断循环条件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  num++;</span><br><span class="line">&#125; <span class="keyword">while</span> (num &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h3><h2 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h2><h3 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h3><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p><p>break使用的时机：</p><ul><li>出现在switch条件语句中，作用是终止case并跳出switch</li><li>出现在循环语句中，作用是跳出当前的循环语句</li><li><strong>出现在嵌套循环中，跳出最近的内层循环语句</strong></li></ul><h3 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h3><p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p><h3 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h3><p><strong>作用：</strong>可以无条件跳转语句</p><p><strong>语法：</strong> <code>goto 标记;</code></p><p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">goto</span> FLAG;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"3"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"4"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">FLAG:</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"5"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</strong></p></blockquote><h1 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h1><h2 id="5-1-一维数组"><a href="#5-1-一维数组" class="headerlink" title="5.1 一维数组"></a>5.1 一维数组</h2><h3 id="5-1-1-一维数组定义方式"><a href="#5-1-1-一维数组定义方式" class="headerlink" title="5.1.1 一维数组定义方式"></a>5.1.1 一维数组定义方式</h3><p>一维数组定义的三种方式：</p><ol><li><code>数据类型  数组名[ 数组长度 ];</code></li><li><code>数据类型  数组名[ 数组长度 ] = { 值1，值2 ...};</code></li><li><code>数据类型  数组名[ ] = { 值1，值2 ...};</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义方式1</span></span><br><span class="line"><span class="comment">//数据类型 数组名[元素个数];</span></span><br><span class="line"><span class="keyword">int</span> score[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用下标赋值</span></span><br><span class="line">score[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">score[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">score[<span class="number">2</span>] = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用下标输出</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; score[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; score[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; score[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种定义方式</span></span><br><span class="line"><span class="comment">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line"><span class="comment">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span></span><br><span class="line"><span class="keyword">int</span> score2[<span class="number">10</span>] = &#123; <span class="number">100</span>, <span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逐个输出</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一个一个输出太麻烦，因此可以利用循环进行输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; score2[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义方式3</span></span><br><span class="line"><span class="comment">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line"><span class="keyword">int</span> score3[] = &#123; <span class="number">100</span>,<span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; score3[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-2-一维数组数组名"><a href="#5-1-2-一维数组数组名" class="headerlink" title="5.1.2 一维数组数组名"></a>5.1.2 一维数组数组名</h3><p>一维数组名称的<strong>用途</strong>：</p><ol><li>可以统计整个数组在内存中的长度</li><li>可以获取数组在内存中的首地址</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组名用途</span></span><br><span class="line"><span class="comment">//1、可以获取整个数组占用内存空间大小</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"整个数组所占内存空间为： "</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"每个元素所占内存空间为： "</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数组的元素个数为： "</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、可以通过数组名获取到数组首地址</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数组首地址为： "</span> &lt;&lt; (<span class="keyword">int</span>)arr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数组中第一个元素地址为： "</span> &lt;&lt; (<span class="keyword">int</span>)&amp;arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数组中第二个元素地址为： "</span> &lt;&lt; (<span class="keyword">int</span>)&amp;arr[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//arr = 100; 错误，数组名是常量，因此不可以赋值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：数组名是常量，不可以赋值</p><p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p><p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p></blockquote><h2 id="5-2-二维数组"><a href="#5-2-二维数组" class="headerlink" title="5.2 二维数组"></a>5.2 二维数组</h2><h3 id="5-2-1-二维数组定义方式"><a href="#5-2-1-二维数组定义方式" class="headerlink" title="5.2.1 二维数组定义方式"></a>5.2.1 二维数组定义方式</h3><p>二维数组定义的四种方式：</p><ol><li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li><li><code>数据类型  数组名[  ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li></ol><blockquote><p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1  </span></span><br><span class="line"><span class="comment">//数组类型 数组名 [行数][列数]</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2 </span></span><br><span class="line"><span class="comment">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span></span><br><span class="line"><span class="keyword">int</span> arr2[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3</span></span><br><span class="line"><span class="comment">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line"><span class="keyword">int</span> arr3[<span class="number">2</span>][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">//方式4 </span></span><br><span class="line"><span class="comment">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line"><span class="keyword">int</span> arr4[][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-二维数组数组名"><a href="#5-2-2-二维数组数组名" class="headerlink" title="5.2.2 二维数组数组名"></a>5.2.2 二维数组数组名</h3><ul><li>查看二维数组所占内存空间</li><li>获取二维数组首地址</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维数组数组名</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组大小： "</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组一行大小： "</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组元素大小： "</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组行数： "</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组列数： "</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组首地址："</span> &lt;&lt; arr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组第一行地址："</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组第二行地址："</span> &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组第一个元素地址："</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组第二个元素地址："</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结1：二维数组名就是这个数组的首地址</p><p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p></blockquote><h1 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h1><h2 id="6-1-函数的调用"><a href="#6-1-函数的调用" class="headerlink" title="6.1 函数的调用"></a>6.1 函数的调用</h2><blockquote><p><strong>函数定义里小括号内称为形参，函数调用时传入的参数称为实参</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> <span class="comment">//定义中的num1,num2称为形式参数，简称形参</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//调用add函数</span></span><br><span class="line"><span class="keyword">int</span> sum = add(a, b);<span class="comment">//调用时的a，b称为实际参数，简称实参</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sum = "</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line">b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">sum = add(a, b);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sum = "</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-值传递"><a href="#6-2-值传递" class="headerlink" title="6.2 值传递"></a>6.2 值传递</h2><p><strong>形参在这里不会改变实参的原因是什么？</strong></p><p><span style="color:red;"><strong>因为形参在内存中完全重新拷贝了一份之前的实参值，这和后面引用以及指针不同。</strong></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"交换前："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"num1 = "</span> &lt;&lt; num1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"num2 = "</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> temp = num1;</span><br><span class="line">num1 = num2;</span><br><span class="line">num2 = temp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"交换后："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"num1 = "</span> &lt;&lt; num1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"num2 = "</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return ; 当函数声明时候，不需要返回值，可以不写return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">swap(a, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"mian中的 a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"mian中的 b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-函数的常见样式"><a href="#6-3-函数的常见样式" class="headerlink" title="6.3 函数的常见样式"></a>6.3 函数的常见样式</h2><p>常见的函数样式有4种</p><ol><li>无参无返</li><li>有参无返</li><li>无参有返</li><li>有参有返</li></ol><h2 id="6-4-函数的声明"><a href="#6-4-函数的声明" class="headerlink" title="6.4 函数的声明"></a>6.4 函数的声明</h2><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><ul><li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li></ul><h2 id="6-5-函数的分文件编写"><a href="#6-5-函数的分文件编写" class="headerlink" title="6.5 函数的分文件编写"></a>6.5 函数的分文件编写</h2><p><strong>作用：</strong>让代码结构更加清晰</p><p>函数分文件编写一般有4个步骤</p><ol><li>创建后缀名为.h的头文件  </li><li>创建后缀名为.cpp的源文件</li><li>在头文件中写函数的声明</li><li>在源文件中写函数的定义</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//swap.h文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现两个数字交换的函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//swap.cpp文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"swap.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main函数文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"swap.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line">swap(a, b);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h1><h2 id="7-1-指针变量的定义和使用"><a href="#7-1-指针变量的定义和使用" class="headerlink" title="7.1 指针变量的定义和使用"></a>7.1 指针变量的定义和使用</h2><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、指针的定义</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">//定义整型变量a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指针定义语法： 数据类型 * 变量名 ;</span></span><br><span class="line"><span class="keyword">int</span> * p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针变量赋值</span></span><br><span class="line">p = &amp;a; <span class="comment">//指针指向变量a的地址</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; &amp;a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//打印数据a的地址</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//打印指针变量p</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、指针的使用</span></span><br><span class="line"><span class="comment">//通过*操作指针变量指向的内存</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*p = "</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针变量和普通变量的区别</p><ul><li>普通变量存放的是数据,指针变量存放的是地址</li><li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li></ul><blockquote><p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p><p>总结2：利用指针可以记录地址</p><p>总结3：对指针变量解引用，可以操作指针指向的内存</p></blockquote><h2 id="7-2-指针所占内存空间"><a href="#7-2-指针所占内存空间" class="headerlink" title="7.2 指针所占内存空间"></a>7.2 指针所占内存空间</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> * p;</span><br><span class="line">p = &amp;a; <span class="comment">//指针指向数据a的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//* 解引用</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">float</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">double</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：所有指针类型在32位操作系统下是4个字节</p></blockquote><h2 id="7-3-空指针和野指针"><a href="#7-3-空指针和野指针" class="headerlink" title="7.3 空指针和野指针"></a>7.3 空指针和野指针</h2><p><span style="color:red;"><strong>空指针</strong>：</span>指针变量指向内存中编号为0的空间</p><p><strong>用途：</strong>初始化指针变量</p><p><strong>注意：</strong>空指针指向的内存是不可以访问的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针变量p指向内存地址编号为0的空间</span></span><br><span class="line"><span class="keyword">int</span> * p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问空指针报错 </span></span><br><span class="line"><span class="comment">//内存编号0 ~255为系统占用内存，不允许用户访问</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//直接报错</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="color:red;"><strong>野指针</strong>：</span>指针变量指向非法的内存空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针变量p指向内存地址编号为0x1100的空间</span></span><br><span class="line"><span class="keyword">int</span> * p = (<span class="keyword">int</span> *)<span class="number">0x1100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问野指针报错 </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p></blockquote><h2 id="7-4-const修饰指针"><a href="#7-4-const修饰指针" class="headerlink" title="7.4 const修饰指针"></a><span style="color:red;">7.4 const修饰指针</span></h2><p>const修饰指针有三种情况</p><ol><li>const修饰指针   —- 常量指针</li><li>const修饰常量   —- 指针常量</li><li>const即修饰指针，又修饰常量</li></ol><p><span style="color:red;"><strong>怎么去记忆？</strong></span></p><p>叫法上比较容易记忆，功能上看const后面跟着啥，跟着*的话解引用的家伙不能改</p><p>​                                                                                       跟着p的话就是指针方向不能改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * p1 = &amp;a; </span><br><span class="line">p1 = &amp;b; <span class="comment">//正确</span></span><br><span class="line"><span class="comment">//*p1 = 100;  报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span></span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p2 = &amp;a;</span><br><span class="line"><span class="comment">//p2 = &amp;b; //错误</span></span><br><span class="line">*p2 = <span class="number">100</span>; <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//const既修饰指针又修饰常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p3 = &amp;a;</span><br><span class="line"><span class="comment">//p3 = &amp;b; //错误</span></span><br><span class="line"><span class="comment">//*p3 = 100; //错误</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-5-指针和数组"><a href="#7-5-指针和数组" class="headerlink" title="7.5 指针和数组"></a>7.5 指针和数组</h2><p><strong>作用：</strong>利用指针访问数组中元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> * p = arr;  <span class="comment">//指向数组的指针</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"第一个元素： "</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"指针访问第一个元素： "</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//利用指针遍历数组</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-6-指针和函数"><a href="#7-6-指针和函数" class="headerlink" title="7.6 指针和函数"></a>7.6 指针和函数</h2><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = a;</span><br><span class="line">a = b; </span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap2</span><span class="params">(<span class="keyword">int</span> * p1, <span class="keyword">int</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = *p1;</span><br><span class="line">*p1 = *p2;</span><br><span class="line">*p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">swap1(a, b); <span class="comment">// 值传递不会改变实参</span></span><br><span class="line"></span><br><span class="line">swap2(&amp;a, &amp;b); <span class="comment">//地址传递会改变实参</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p></blockquote><h2 id="7-7-指针、数组、函数"><a href="#7-7-指针、数组、函数" class="headerlink" title="7.7 指针、数组、函数"></a>7.7 指针、数组、函数</h2><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p><p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> * arr, <span class="keyword">int</span> len)</span>  <span class="comment">//int * arr 也可以写为int arr[]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印数组函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">bubbleSort(arr, len);  <span class="comment">//传入的是首地址</span></span><br><span class="line"></span><br><span class="line">printArray(arr, len);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p></blockquote><h1 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8 结构体"></a>8 结构体</h1><h2 id="8-1-结构体定义和使用"><a href="#8-1-结构体定义和使用" class="headerlink" title="8.1 结构体定义和使用"></a>8.1 结构体定义和使用</h2><p><strong>语法：</strong><code>struct 结构体名 { 结构体成员列表 }；</code></p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li><li>定义结构体时顺便创建变量</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line"><span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;stu3; <span class="comment">//结构体变量创建方式3 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体变量创建方式1</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu1</span>;</span> <span class="comment">//struct 关键字可以省略</span></span><br><span class="line"></span><br><span class="line">stu1.name = <span class="string">"张三"</span>;</span><br><span class="line">stu1.age = <span class="number">18</span>;</span><br><span class="line">stu1.score = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; stu1.name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; stu1.age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu1.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体变量创建方式2</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu2</span> = &#123;</span> <span class="string">"李四"</span>,<span class="number">19</span>,<span class="number">60</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; stu2.name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; stu2.age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu2.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu3.name = <span class="string">"王五"</span>;</span><br><span class="line">stu3.age = <span class="number">18</span>;</span><br><span class="line">stu3.score = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; stu3.name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; stu3.age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu3.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结1：定义结构体时的关键字是struct，不可省略</p><p>总结2：创建结构体变量时，关键字struct可以省略</p><p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p></blockquote><h2 id="8-2-结构体数组"><a href="#8-2-结构体数组" class="headerlink" title="8.2 结构体数组"></a>8.2 结构体数组</h2><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p><p><strong>语法：</strong><code>struct  结构体名 数组名[元素个数] = {  {} , {} , ... {} }</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line"><span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体数组</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">arr</span>[3]=</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">&#123;<span class="string">"张三"</span>,<span class="number">18</span>,<span class="number">80</span> &#125;,</span><br><span class="line">&#123;<span class="string">"李四"</span>,<span class="number">19</span>,<span class="number">60</span> &#125;,</span><br><span class="line">&#123;<span class="string">"王五"</span>,<span class="number">20</span>,<span class="number">70</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; arr[i].age &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; arr[i].score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-结构体指针"><a href="#8-3-结构体指针" class="headerlink" title="8.3 结构体指针"></a>8.3 结构体指针</h2><p><strong>作用：</strong>通过指针访问结构体中的成员</p><ul><li>利用操作符 <code>-&gt;</code>可以通过结构体指针访问结构体属性</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line"><span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span> = &#123;</span> <span class="string">"张三"</span>,<span class="number">18</span>,<span class="number">100</span>, &#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> * <span class="title">p</span> = &amp;<span class="title">stu</span>;</span></span><br><span class="line"></span><br><span class="line">p-&gt;score = <span class="number">80</span>; <span class="comment">//指针通过 -&gt; 操作符可以访问成员</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; p-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-4-结构体嵌套结构体"><a href="#8-4-结构体嵌套结构体" class="headerlink" title="8.4 结构体嵌套结构体"></a>8.4 结构体嵌套结构体</h2><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p><p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line"><span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//教师结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//成员列表</span></span><br><span class="line"><span class="keyword">int</span> id; <span class="comment">//职工编号</span></span><br><span class="line"><span class="built_in">string</span> name;  <span class="comment">//教师姓名</span></span><br><span class="line"><span class="keyword">int</span> age;   <span class="comment">//教师年龄</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span> <span class="comment">//子结构体 学生</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> <span class="title">t1</span>;</span></span><br><span class="line">t1.id = <span class="number">10000</span>;</span><br><span class="line">t1.name = <span class="string">"老王"</span>;</span><br><span class="line">t1.age = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">t1.stu.name = <span class="string">"张三"</span>;</span><br><span class="line">t1.stu.age = <span class="number">18</span>;</span><br><span class="line">t1.stu.score = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"教师 职工编号： "</span> &lt;&lt; t1.id &lt;&lt; <span class="string">" 姓名： "</span> &lt;&lt; t1.name &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; t1.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"辅导学员 姓名： "</span> &lt;&lt; t1.stu.name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; t1.stu.age &lt;&lt; <span class="string">" 考试分数： "</span> &lt;&lt; t1.stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p><p><span style="color:red;"><strong>如果是多个学生应该怎么写？</strong></span></p><p>用结构体数组！</p><h2 id="8-5-结构体做函数参数"><a href="#8-5-结构体做函数参数" class="headerlink" title="8.5 结构体做函数参数"></a>8.5 结构体做函数参数</h2><p><strong>作用：</strong>将结构体作为参数向函数中传递</p><p>传递方式有两种：</p><ul><li>值传递</li><li>地址传递</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line"><span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(student stu )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">stu.age = <span class="number">28</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"子函数中 姓名："</span> &lt;&lt; stu.name &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent2</span><span class="params">(student *stu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">stu-&gt;age = <span class="number">28</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"子函数中 姓名："</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">student stu = &#123; <span class="string">"张三"</span>,<span class="number">18</span>,<span class="number">100</span>&#125;;</span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line">printStudent(stu);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"主函数中 姓名："</span> &lt;&lt; stu.name &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; stu.age &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line">printStudent2(&amp;stu);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"主函数中 姓名："</span> &lt;&lt; stu.name &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p></blockquote><h2 id="8-6-结构体中-const使用场景"><a href="#8-6-结构体中-const使用场景" class="headerlink" title="8.6 结构体中 const使用场景"></a>8.6 结构体中 const使用场景</h2><p><span style="color:red;"><strong>作用：</strong>用const来防止误操作</span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line"><span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const使用场景</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(<span class="keyword">const</span> student *stu)</span> <span class="comment">//加const防止函数体中的误操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">student stu = &#123; <span class="string">"张三"</span>,<span class="number">18</span>,<span class="number">100</span> &#125;;</span><br><span class="line"></span><br><span class="line">printStudent(&amp;stu);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-7-结构体案例"><a href="#8-7-结构体案例" class="headerlink" title="8.7 结构体案例"></a>8.7 结构体案例</h2><h3 id="8-7-1-案例1"><a href="#8-7-1-案例1" class="headerlink" title="8.7.1 案例1"></a>8.7.1 案例1</h3><p><strong>案例描述：</strong></p><p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p><p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p><p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p><p>最终打印出老师数据以及老师所带的学生数据。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line">Student sArray[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">allocateSpace</span><span class="params">(Teacher tArray[] , <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> tName = <span class="string">"教师"</span>;</span><br><span class="line"><span class="built_in">string</span> sName = <span class="string">"学生"</span>;</span><br><span class="line"><span class="built_in">string</span> nameSeed = <span class="string">"ABCDE"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">tArray[i].name = tName + nameSeed[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">tArray[i].sArray[j].name = sName + nameSeed[j];</span><br><span class="line">tArray[i].sArray[j].score = rand() % <span class="number">61</span> + <span class="number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTeachers</span><span class="params">(Teacher tArray[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tArray[i].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\t姓名："</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>)); <span class="comment">//随机数种子 头文件 #include &lt;ctime&gt;</span></span><br><span class="line"></span><br><span class="line">Teacher tArray[<span class="number">3</span>]; <span class="comment">//老师数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(tArray) / <span class="keyword">sizeof</span>(Teacher);</span><br><span class="line"></span><br><span class="line">allocateSpace(tArray, len); <span class="comment">//创建数据</span></span><br><span class="line"></span><br><span class="line">printTeachers(tArray, len); <span class="comment">//打印数据</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-7-2-案例2"><a href="#8-7-2-案例2" class="headerlink" title="8.7.2 案例2"></a>8.7.2 案例2</h3><p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p><p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><p>五名英雄信息如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"刘备"</span>,<span class="number">23</span>,<span class="string">"男"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"关羽"</span>,<span class="number">22</span>,<span class="string">"男"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"张飞"</span>,<span class="number">20</span>,<span class="string">"男"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"赵云"</span>,<span class="number">21</span>,<span class="string">"男"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"貂蝉"</span>,<span class="number">19</span>,<span class="string">"女"</span>&#125;,</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//英雄结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(hero arr[] , <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j].age &gt; arr[j + <span class="number">1</span>].age)</span><br><span class="line">&#123;</span><br><span class="line">hero temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHeros</span><span class="params">(hero arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名： "</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">" 性别： "</span> &lt;&lt; arr[i].sex &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; arr[i].age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hero</span> <span class="title">arr</span>[5] =</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">&#123;<span class="string">"刘备"</span>,<span class="number">23</span>,<span class="string">"男"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"关羽"</span>,<span class="number">22</span>,<span class="string">"男"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"张飞"</span>,<span class="number">20</span>,<span class="string">"男"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"赵云"</span>,<span class="number">21</span>,<span class="string">"男"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"貂蝉"</span>,<span class="number">19</span>,<span class="string">"女"</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(hero); <span class="comment">//获取数组元素个数</span></span><br><span class="line"></span><br><span class="line">bubbleSort(arr, len); <span class="comment">//排序</span></span><br><span class="line"></span><br><span class="line">printHeros(arr, len); <span class="comment">//打印</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS上使用VScode编译配置C++语言开发环境</title>
      <link href="2019/09/18/Cpp190918-macOS%E4%B8%8A%E4%BD%BF%E7%94%A8VScode%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AEC-%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>2019/09/18/Cpp190918-macOS%E4%B8%8A%E4%BD%BF%E7%94%A8VScode%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AEC-%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/09/18/Cpp190918-macOS%E4%B8%8A%E4%BD%BF%E7%94%A8VScode%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AEC-%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/190918-5.jpg" alt="T"></p><a id="more"></a><p>本文介绍<code>macOS</code>上使用<code>VScode</code>编译配置<code>C++</code>语言开发环境</p><h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h1><p>安装<code>C/C++</code>插件</p><p><img src="/2019/09/18/Cpp190918-macOS%E4%B8%8A%E4%BD%BF%E7%94%A8VScode%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AEC-%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/190918-2.png" alt="1"></p><h1 id="2-配置c-cpp-properties-json文件"><a href="#2-配置c-cpp-properties-json文件" class="headerlink" title="2.配置c_cpp_properties.json文件"></a>2.配置c_cpp_properties.json文件</h1><p><code>[⇧⌘P]</code>打开命令模式，选择<code>[C/Cpp: Edit Configurations(JSON)]</code>命令，回车后会自动生成一个<code>.vscode</code>目录，目录下有一个<code>c_cpp_properties.json</code>文件，如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Mac"</span>,</span><br><span class="line">            <span class="attr">"defines"</span>: [],</span><br><span class="line">            <span class="attr">"macFrameworkPath"</span>: [</span><br><span class="line">                <span class="string">"/System/Library/Frameworks"</span>,</span><br><span class="line">                <span class="string">"/Library/Frameworks"</span>,</span><br><span class="line">                <span class="string">"$&#123;workspaceFolder&#125;/**"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"compilerPath"</span>: <span class="string">"/usr/bin/g++"</span>,</span><br><span class="line">            <span class="attr">"cStandard"</span>: <span class="string">"c11"</span>,</span><br><span class="line">            <span class="attr">"cppStandard"</span>: <span class="string">"c++17"</span>,</span><br><span class="line">            <span class="attr">"intelliSenseMode"</span>: <span class="string">"clang-x64"</span>,</span><br><span class="line">            <span class="attr">"browse"</span>: &#123;</span><br><span class="line">                <span class="attr">"path"</span>: [</span><br><span class="line">                    <span class="string">"$&#123;workspaceFolder&#125;"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"limitSymbolsToIncludedHeaders"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"databaseFilename"</span>: <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-配置tasks-json文件"><a href="#3-配置tasks-json文件" class="headerlink" title="3.配置tasks.json文件"></a>3.配置tasks.json文件</h1><p><code>[⇧⌘P]</code>打开命令模式，选择<code>[Tasks: Configure Task]</code>命令，选择的模板为<code>MSBuild</code>，回车后会自动在<code>.vscode</code>目录下生成一个<code>tasks.json</code>文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class="line">    <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"build c++"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"g++"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">                <span class="string">"-std=c++17"</span>,</span><br><span class="line">                <span class="string">"-g"</span>,</span><br><span class="line">                <span class="string">"-Wall"</span>,</span><br><span class="line">                <span class="string">"-lm"</span>,</span><br><span class="line">                <span class="string">"-o"</span>,</span><br><span class="line">                <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.out"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"group"</span>: <span class="string">"build"</span>,</span><br><span class="line">            <span class="attr">"presentation"</span>: &#123;</span><br><span class="line">                <span class="attr">"reveal"</span>: <span class="string">"silent"</span>,</span><br><span class="line">                <span class="attr">"panel"</span>: <span class="string">"shared"</span>,</span><br><span class="line">                <span class="attr">"echo"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"focus"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"showReuseMessage"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"clear"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: <span class="string">"$gcc"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"run c++"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"dependsOn"</span>: <span class="string">"build c++"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.out"</span>,</span><br><span class="line">            <span class="attr">"presentation"</span>: &#123;</span><br><span class="line">                <span class="attr">"focus"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"group"</span>: <span class="string">"test"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-配置launch-json文件"><a href="#4-配置launch-json文件" class="headerlink" title="4.配置launch.json文件"></a>4.配置launch.json文件</h1><p><strong>方式1：</strong></p><p><img src="/2019/09/18/Cpp190918-macOS%E4%B8%8A%E4%BD%BF%E7%94%A8VScode%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AEC-%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/190918-1.png" alt="1"></p><p><strong>方式2：</strong></p><p><code>[⇧⌘P]</code>打开命令模式，选择<code>[Debug: Open launch.json]</code>命令，选择的模板为<code>C/C++</code>，回车后会自动在<code>.vscode</code>目录下生成一个<code>launch.json</code>文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"(lldb) Launch"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"enter program name, for example $&#123;workspaceFolder&#125;/a.out"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">            <span class="attr">"environment"</span>: [],</span><br><span class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"MIMode"</span>: <span class="string">"lldb"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成这三步<code>C++</code>开发环境就配置好了，接下来就可以编译，运行，调试<code>C++</code>程序了。</p><p><code>[⇧⌘B]</code>是编译程序，<code>[⇧⌘R]</code>是运行程序。</p><p>如果安装了插件<code>『Code Runner』</code>可以更快捷地直接运行程序，安装看下一步。</p><h1 id="5-安装「Code-Runner」插件"><a href="#5-安装「Code-Runner」插件" class="headerlink" title="5.安装「Code Runner」插件"></a>5.安装「Code Runner」插件</h1><p><img src="/2019/09/18/Cpp190918-macOS%E4%B8%8A%E4%BD%BF%E7%94%A8VScode%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AEC-%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/190918-3.png" alt="1"></p><p>安装完插件，<code>[⇧⌘P]</code>打开命令模式选择<code>「run code」</code>运行项目，这个时候你可以直接在<code>cpp代码区右键-&gt; 「run code」</code>，就可以直接输出结果，而不需要<code>[⇧⌘B]</code>编译程序和<code>[⇧⌘R]</code>运行程序了。</p><p>如果需要调试，那就按<code>F5</code>，进入调试模式即可。</p><h1 id="6-写在最后"><a href="#6-写在最后" class="headerlink" title="6.写在最后"></a>6.写在最后</h1><p>如果你看完上面的安装过程，你还没有成功配置C++环境，或者你搞不清楚这些具体的关系，你只需要保证你的工作区间（你存放cpp文件或项目的文件夹）有一个隐藏文件夹叫<code>.vscode</code>，而这个文件夹中又有三个配置好的文件即可。</p><p><img src="/2019/09/18/Cpp190918-macOS%E4%B8%8A%E4%BD%BF%E7%94%A8VScode%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AEC-%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/190918-4.png" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写一个最简单的爬虫程序</title>
      <link href="2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/"/>
      <url>2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/190520-1.png" alt="The First Title Picture"></p><a id="more"></a><p><strong>本文将介绍如何写一个最简单的Python爬虫程序</strong></p><p>主要分为以下 5 部分内容：</p><ol><li>了解网页基础；</li><li>使用 requests 库抓取网站数据；</li><li>使用 Beautiful Soup 解析网页；</li><li>清洗和组织数据；</li><li>爬虫攻防战；</li></ol><h1 id="1-网页基础"><a href="#1-网页基础" class="headerlink" title="1 网页基础"></a>1 网页基础</h1><h2 id="1-1-网页结构"><a href="#1-1-网页结构" class="headerlink" title="1.1 网页结构"></a>1.1 网页结构</h2><p>网页一般由三部分组成，分别是 <code>HTML</code>（超文本标记语言）、<code>CSS</code>（层叠样式表）和 <code>JScript</code>（活动脚本语言）。</p><p><strong>HTML</strong></p><p><code>HTML</code>是整个网页的结构，相当于整个网站的框架。带<code>“＜”和“＞”</code>符号的都是属于<code>HTML</code>的标签，并且标签都是成对出现的。</p><p>常见的标签如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>..<span class="tag">&lt;/<span class="name">html</span>&gt;</span> 表示标记中间的元素是网页</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>..<span class="tag">&lt;/<span class="name">body</span>&gt;</span> 表示用户可见的内容</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>..<span class="tag">&lt;/<span class="name">div</span>&gt;</span> 表示框架</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>..<span class="tag">&lt;/<span class="name">p</span>&gt;</span> 表示段落</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>..<span class="tag">&lt;/<span class="name">li</span>&gt;</span>表示列表</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>..<span class="tag">&lt;/<span class="name">img</span>&gt;</span>表示图片</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>..<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>表示标题</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>..<span class="tag">&lt;/<span class="name">a</span>&gt;</span>表示超链接</span><br></pre></td></tr></table></figure><p><strong>CSS</strong></p><p><code>CSS</code> 表示样式，比如标签中的<code>＜style type=＂text/css＂＞</code>表示下面引用一个 <code>CSS</code>，在 <code>CSS</code>中定义了外观。</p><p><strong>JScript</strong></p><p><code>JScript</code>表示功能。交互的内容和各种特效都在<code>JScript</code>中，<code>JScript</code> 描述了网站中的各种功能。</p><p>如果用人体来比喻，<code>HTML</code> 是人的骨架，并且定义了人的嘴巴、眼睛、耳朵等要长在哪里。<code>CSS</code> 是人的外观细节，如嘴巴长什么样子，眼睛是双眼皮还是单眼皮，是大眼睛还是小眼睛，皮肤是黑色的还是白色的等。<code>JScript</code> 表示人的技能，例如跳舞、唱歌或者演奏乐器等。</p><h2 id="1-2-写一个简单的-HTML"><a href="#1-2-写一个简单的-HTML" class="headerlink" title="1.2 写一个简单的 HTML"></a>1.2 写一个简单的 HTML</h2><p>通过编写和修改<code>HTML</code>，可以更好地理解<code>HTML</code>。首先打开一个记事本，然后输入下面的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> Python 3 爬虫与数据清洗入门与实战<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Python 3爬虫与数据清洗入门与实战<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://c.biancheng.net"</span>&gt;</span>爬虫<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>数据清洗<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输入代码后，保存记事本，然后修改文件名和后缀名为”HTML.html”；</p><p>用浏览器打开后的效果，如下图所示：</p><p><img src="/2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/190520-2.gif" alt="The First Title Picture"></p><p>这段代码只是用到了 <code>HTML</code>，读者可以自行修改代码中的中文，然后观察其变化。</p><h2 id="1-3-关于爬虫的合法性"><a href="#1-3-关于爬虫的合法性" class="headerlink" title="1.3 关于爬虫的合法性"></a>1.3 关于爬虫的合法性</h2><p>几乎每一个网站都有一个名为 <code>robots.txt</code> 的文档，当然也有部分网站没有设定 <code>robots.txt</code>。对于没有设定 <code>robots.txt</code> 的网站可以通过网络爬虫获取没有口令加密的数据，也就是该网站所有页面数据都可以爬取。如果网站有 <code>robots.txt</code> 文档，就要判断是否有禁止访客获取的数据。</p><p>以淘宝网为例，在浏览器中访问 <a href="https://www.taobao.com/robots.txt，如下图所示：" target="_blank" rel="noopener">https://www.taobao.com/robots.txt，如下图所示：</a></p><p><img src="/2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/190520-3.gif" alt="The First Title Picture"></p><p>淘宝网允许部分爬虫访问它的部分路径，而对于没有得到允许的用户，则全部禁止爬取，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-Agent:*</span><br><span class="line">Disallow:&#x2F;</span><br></pre></td></tr></table></figure><p>这一句代码的意思是除前面指定的爬虫外，不允许其他爬虫爬取任何数据。</p><h1 id="2-使用-requests-库请求网站"><a href="#2-使用-requests-库请求网站" class="headerlink" title="2 使用 requests 库请求网站"></a>2 使用 requests 库请求网站</h1><h2 id="2-1-安装-requests-库"><a href="#2-1-安装-requests-库" class="headerlink" title="2.1 安装 requests 库"></a>2.1 安装 requests 库</h2><p>终端输入命令<code>pip install requests</code>，就可以开始安装了。</p><h2 id="2-2-爬虫的基本原理"><a href="#2-2-爬虫的基本原理" class="headerlink" title="2.2 爬虫的基本原理"></a>2.2 爬虫的基本原理</h2><p>网页请求的过程分为两个环节：</p><ol><li><p>Request （请求）：每一个展示在用户面前的网页都必须经过这一步，也就是向服务器发送访问请求。</p></li><li><p>Response（响应）：服务器在接收到用户的请求后，会验证请求的有效性，然后向用户（客户端）发送响应的内容，客户端接收服务器响应的内容，将内容展示出来，就是我们所熟悉的网页请求，如下图所示。</p><p><img src="/2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/190520-4.gif" alt="The First Title Picture"></p></li></ol><p>网页请求的方式也分为两种：</p><ol><li>GET：最常见的方式，一般用于获取或者查询资源信息，也是大多数网站使用的方式，响应速度快。</li><li>POST：相比 GET 方式，多了以表单形式上传参数的功能，因此除查询信息外，还可以修改信息。</li></ol><p><span style="color:red;"><strong>所以，在写爬虫前要先确定网页请求的方式是什么。</strong></span></p><h2 id="2-3-网页请求方式一：使用-GET-方式抓取数据"><a href="#2-3-网页请求方式一：使用-GET-方式抓取数据" class="headerlink" title="2.3 网页请求方式一：使用 GET 方式抓取数据"></a>2.3 网页请求方式一：使用 GET 方式抓取数据</h2><p>随意打开一个网站，比如下图所示的某瓣，在源码中【Ctrl+F】搜索页面出现的字词，比如“正在热映”四个字，如果能在源码中直接搜索到，那么这个网站的请求方式就是<code>GET</code>。如下图所示：</p><p><img src="/2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/190520-5.png" alt="The First Title Picture"></p><p>确定好请求对象和方式后，输入以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests                    <span class="comment">#导入requests包</span></span><br><span class="line">url = <span class="string">'http://www.cntour.cn/'</span></span><br><span class="line">strhtml = requests.get(url)        <span class="comment">#Get方式获取网页数据</span></span><br><span class="line">print(strhtml.text)</span><br></pre></td></tr></table></figure><p>如果成功的话，你已经看到<code>strhtml.text</code>打印的结果。</p><p>接下来简单介绍一下上面几行代码的意思：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import requests  #加载库使用的语句是 import+库的名字</span><br></pre></td></tr></table></figure><p>用 <code>GET</code> 方式获取数据需要调用 <code>requests</code> 库中的 <code>get</code> 方法，使用方法是在 <code>requests</code> 后输入英文点号，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get</span><br></pre></td></tr></table></figure><p>将获取到的数据存到 <code>strhtml</code> 变量中，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strhtml &#x3D; request.get(url)</span><br></pre></td></tr></table></figure><p>这个时候 <code>strhtml</code> 是一个 <code>URL</code> 对象，它代表整个网页，但此时只需要网页中的源码，下面的语句表示网页源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strhtml.text</span><br></pre></td></tr></table></figure><h2 id="2-4-网页请求方式二：使用-POST-方式抓取数据"><a href="#2-4-网页请求方式二：使用-POST-方式抓取数据" class="headerlink" title="2.4 网页请求方式二：使用 POST 方式抓取数据"></a>2.4 网页请求方式二：使用 POST 方式抓取数据</h2><p>首先输入有道翻译的网址：<a href="http://fanyi.youdao.com/，进入有道翻译页面。" target="_blank" rel="noopener">http://fanyi.youdao.com/，进入有道翻译页面。</a><br>按快捷键 F12，进入开发者模式，单击 <code>Network</code>，此时内容为空，如下图所示：</p><p><img src="/2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/190520-6.gif" alt="The First Title Picture"></p><p>在有道翻译中输入“我爱中国”，单击“翻译”按钮，如下图所示：</p><p><img src="/2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/190520-7.gif" alt="The First Title Picture"></p><p>在开发者模式中，依次单击<code>Network</code>按钮和<code>XHR</code>按钮，找到翻译数据，如下图所示：</p><p><img src="/2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/190520-8.gif" alt="The First Title Picture"></p><p>单击 <code>Headers</code>，发现请求数据的方式为 <code>POST</code>。如下图所示：</p><p><img src="/2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/190520-9.gif" alt="The First Title Picture"></p><p>找到数据所在之处并且明确请求方式之后，接下来开始撰写爬虫。<br>首先，将 <code>Headers</code> 中的 <code>URL</code> 复制出来，并赋值给 <code>url</code>，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;fanyi.youdao.com&#x2F;translate_o?smartresult&#x3D;dict&amp;smartresult&#x3D;rule&#39;</span><br></pre></td></tr></table></figure><p><code>POST</code> 的请求获取数据的方式不同于 <code>GET</code>，<code>POST</code> 请求数据必须构建请求头才可以。<br><code>Form Data</code> 中的请求参数如下图所示：</p><p><img src="/2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/190520-10.gif" alt="The First Title Picture"></p><p>将其复制并构建一个新字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">From_data=&#123;<span class="string">'i'</span>:<span class="string">'我愛中國'</span>,<span class="string">'from'</span>:<span class="string">'zh-CHS'</span>,<span class="string">'to'</span>:<span class="string">'en'</span>,<span class="string">'smartresult'</span>:<span class="string">'dict'</span>,<span class="string">'client'</span>:<span class="string">'fanyideskweb'</span>,<span class="string">'salt'</span>:<span class="string">'15477056211258'</span>,<span class="string">'sign'</span>:<span class="string">'b3589f32c38bc9e3876a570b8a992604'</span>,<span class="string">'ts'</span>:<span class="string">'1547705621125'</span>,<span class="string">'bv'</span>:<span class="string">'b33a2f3f9d09bde064c9275bcb33d94e'</span>,<span class="string">'doctype'</span>:<span class="string">'json'</span>,<span class="string">'version'</span>:<span class="string">'2.1'</span>,<span class="string">'keyfrom'</span>:<span class="string">'fanyi.web'</span>,<span class="string">'action'</span>:<span class="string">'FY_BY_REALTIME'</span>,<span class="string">'typoResult'</span>:<span class="string">'false'</span>&#125;</span><br></pre></td></tr></table></figure><p>接下来使用 <code>requests.post</code> 方法请求表单数据，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests            <span class="comment">#导入requests包</span></span><br><span class="line">response = requests.post(url,data=payload)</span><br></pre></td></tr></table></figure><p>将字符串格式的数据转换成<code>JSON</code> 格式数据，并根据数据结构，提取数据，并将翻译结果打印出来，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">content = json.loads(response.text)</span><br><span class="line">print(content[<span class="string">'translateResult'</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">'tgt'</span>])</span><br></pre></td></tr></table></figure><p>使用 <code>requests.post</code> 方法抓取有道翻译结果的完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests        <span class="comment">#导入requests包</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_translate_date</span><span class="params">(word=None)</span>:</span></span><br><span class="line">    url = <span class="string">'http://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule'</span></span><br><span class="line">    From_data=&#123;<span class="string">'i'</span>:word,<span class="string">'from'</span>:<span class="string">'zh-    CHS'</span>,<span class="string">'to'</span>:<span class="string">'en'</span>,<span class="string">'smartresult'</span>:<span class="string">'dict'</span>,<span class="string">'client'</span>:<span class="string">'fanyideskweb'</span>,<span class="string">'salt'</span>:<span class="string">'15477056211258'</span>,<span class="string">'sign'</span>:<span class="string">'b3589f32c38bc9e3876a570b8a992604'</span>,<span class="string">'ts'</span>:<span class="string">'1547705621125'</span>,<span class="string">'bv'</span>:<span class="string">'b33a2f3f9d09bde064c9275bcb33d94e'</span>,<span class="string">'doctype'</span>:<span class="string">'json'</span>,<span class="string">'version'</span>:<span class="string">'2.1'</span>,<span class="string">'keyfrom'</span>:<span class="string">'fanyi.web'</span>,<span class="string">'action'</span>:<span class="string">'FY_BY_REALTIME'</span>,<span class="string">'typoResult'</span>:<span class="string">'false'</span>&#125;</span><br><span class="line">    <span class="comment">#请求表单数据</span></span><br><span class="line">    response = requests.post(url,data=From_data)</span><br><span class="line">    <span class="comment">#将Json格式字符串转字典</span></span><br><span class="line">    content = json.loads(response.text)</span><br><span class="line">    print(content)</span><br><span class="line">    <span class="comment">#打印翻译后的数据</span></span><br><span class="line">    <span class="comment">#print(content['translateResult'][0][0]['tgt'])</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    get_translate_date(<span class="string">'我爱中国'</span>)</span><br></pre></td></tr></table></figure><h1 id="3-使用-Beautiful-Soup-解析网页"><a href="#3-使用-Beautiful-Soup-解析网页" class="headerlink" title="3 使用 Beautiful Soup 解析网页"></a>3 使用 Beautiful Soup 解析网页</h1><p>通过 <code>requests</code> 库已经可以抓到网页源码，接下来要从源码中找到并提取数据。<code>Beautiful Soup</code> 是 <code>python</code> 的一个库，其最主要的功能是从网页中抓取数据。<code>Beautiful Soup</code> 目前已经被移植到 <code>bs4</code> 库中，也就是说在导入 <code>Beautiful Soup</code> 时需要先安装<code>bs4</code> 库。</p><p>终端直接输入<code>pip3 install beautifulsoup4</code>安装。</p><p>安装好 <code>bs4</code> 库以后，还需安装<code>lxml</code> 库。如果我们不安装 <code>lxml</code>库，就会使用 <code>Python</code> 默认的解析器。尽管 <code>Beautiful Soup</code>既支持<code>Python</code> 标准库中的<code>HTML</code>解析器又支持一些第三方解析器，但是 <code>lxml</code> 库具有功能更加强大、速度更快的特点，因此笔者推荐安装<code>lxml</code>库。</p><p>安装 <code>Python</code>第三方库后，输入下面的代码，即可开启<code>Beautiful Soup</code>之旅：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests                           <span class="comment">#导入requests包</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">url=<span class="string">'http://www.cntour.cn/'</span></span><br><span class="line">strhtml=requests.get(url)</span><br><span class="line">soup=BeautifulSoup(strhtml.text,<span class="string">'lxml'</span>)</span><br><span class="line">data = soup.select(<span class="string">'#main&gt;div&gt;div.mtop.firstMod.clearfix&gt;div.centerBox&gt;ul.newsList&gt;li&gt;a'</span>)</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><p><code>Beautiful Soup</code> 库能够轻松解析网页信息，它被集成在 <code>bs4</code> 库中，需要时可以从 <code>bs4</code> 库中调用。其表达语句如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure><p>首先，<code>HTML</code> 文档将被转换成 <code>Unicode</code> 编码格式，然后 <code>Beautiful Soup</code> 选择最合适的解析器来解析这段文档，此处指定 <code>lxml</code>解析器进行解析。解析后便将复杂的 <code>HTML</code> 文档转换成树形结构，并且每个节点都是 <code>Python</code> 对象。这里将解析后的文档存储到新建的变量 <code>soup</code> 中，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup=BeautifulSoup(strhtml.text,<span class="string">'lxml'</span>)</span><br></pre></td></tr></table></figure><p>接下来用 <code>select</code>（选择器）定位数据，定位数据时需要使用浏览器的开发者模式，将鼠标光标停留在对应的数据位置并右击，然后在快捷菜单中选择<code>检查</code>命令，如下图所示：</p><p><img src="/2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/190520-11.gif" alt="The First Title Picture"></p><p>随后在浏览器右侧会弹出开发者界面，右侧高亮的代码（下图(b)）对应着左侧高亮的数据文本（下图(a)）。右击右侧高亮数据，在弹出的快捷菜单中选择<code>“Copy”➔“Copy Selector”</code>命令，便可以自动复制路径。</p><p><img src="/2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/190520-12.gif" alt="The First Title Picture"></p><p>将路径粘贴在文档中，代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#main &gt; div &gt; div.mtop.firstMod.clearfix &gt; div.centerBox &gt; ul.newsList &gt; li:nth-child(1) &gt; a</span><br></pre></td></tr></table></figure><p>由于这条路径是选中的第一条的路径，而我们需要获取所有的头条新闻，因此将 <code>li：nth-child（1）</code>中冒号（包含冒号）后面的部分删掉，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#main &gt; div &gt; div.mtop.firstMod.clearfix &gt; div.centerBox &gt; ul.newsList &gt; li &gt; a</span><br></pre></td></tr></table></figure><p>使用 <code>soup.select</code> 引用这个路径，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data &#x3D; soup.select(&#39;#main &gt; div &gt; div.mtop.firstMod.clearfix &gt; div.centerBox &gt; ul.newsList &gt; li &gt; a&#39;)</span><br></pre></td></tr></table></figure><h1 id="4-清洗和组织数据"><a href="#4-清洗和组织数据" class="headerlink" title="4 清洗和组织数据"></a>4 清洗和组织数据</h1><p>至此，获得了一段目标的 <code>HTML</code>代码，但还没有把数据提取出来，输入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for item in data:</span><br><span class="line">    result&#x3D;&#123;</span><br><span class="line">        &#39;title&#39;:item.get_text(),</span><br><span class="line">        &#39;link&#39;:item.get(&#39;href&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>代码运行结果如下图所示：</p><p><img src="/2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/190520-15.jpg" alt="The First Title Picture"></p><p>首先明确要提取的数据是标题和链接，标题在<code>＜a＞</code>标签中，提取标签的正文用 <code>get_text()</code> 方法。链接在<code>＜a＞</code>标签的<code>href</code>属性中，提取标签中的<code>href</code>属性用 <code>get()</code>方法，在括号中指定要提取的属性数据，即<code>get(＇href＇)</code>。</p><p>从上图中可以发现，文章的链接中有一个数字 ID。下面用正则表达式提取这个 ID。需要使用的正则符号如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\d匹配数字</span><br><span class="line">+匹配前一个字符1次或多次</span><br></pre></td></tr></table></figure><p>在 Python 中调用正则表达式时使用 <code>re</code> 库，这个库不用安装，可以直接调用。输入以下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">for item in data:</span><br><span class="line">    result&#x3D;&#123;</span><br><span class="line">        &quot;title&quot;:item.get_text(),</span><br><span class="line">        &quot;link&quot;:item.get(&#39;href&#39;),</span><br><span class="line">        &#39;ID&#39;:re.findall(&#39;\d+&#39;,item.get(&#39;href&#39;))</span><br><span class="line">    &#125;</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果如下图所示：</p><p><img src="/2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/190520-14.jpg" alt="The First Title Picture"></p><p>这里使用 <code>re</code> 库的 <code>findall</code> 方法，第一个参数表示正则表达式，第二个参数表示要提取的文本。</p><h1 id="5-爬虫攻防战"><a href="#5-爬虫攻防战" class="headerlink" title="5 爬虫攻防战"></a>5 爬虫攻防战</h1><p>爬虫是模拟人的浏览访问行为，进行数据的批量抓取。当抓取的数据量逐渐增大时，会给被访问的服务器造成很大的压力，甚至有可能崩溃。换句话就是说，服务器是不喜欢有人抓取自己的数据的。那么，网站方面就会针对这些爬虫者，采取一些反爬策略。</p><p>服务器第一种识别爬虫的方式就是通过检查连接的 <code>useragent</code> 来识别到底是浏览器访问，还是代码访问的。如果是代码访问的话，访问量增大时，服务器会直接封掉来访 IP。</p><p>那么应对这种初级的反爬机制，我们应该采取何种举措？</p><p>还是以前面创建好的爬虫为例。在进行访问时，我们在开发者环境下不仅可以找到 <code>URL</code>、<code>Form Data</code>，还可以在 <code>Request headers</code> 中构造浏览器的请求头，封装自己。服务器识别浏览器访问的方法就是判断 <code>keyword</code> 是否为 <code>Request headers</code> 下的 <code>User-Agent</code>，如所示。</p><p><img src="/2019/05/20/Py190520-%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/190520-13.jpg" alt="The First Title Picture"></p><p>因此，我们只需要构造这个请求头的参数。创建请求头部信息即可，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">headers&#x3D;&#123;&#39;User-Agent&#39;:&#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;70.0.3538.110 Safari&#x2F;537.36&#39;&#125;</span><br><span class="line">response &#x3D; request.get(url,headers&#x3D;headers)</span><br></pre></td></tr></table></figure><p>在实际操作中加了头部信息之后，还是会出现<code>urllib.error.HTTPError: HTTP Error 403: Forbidden</code>的问题，开审查元素，到Network界面刷新，发现图片加载时有<code>Referer</code>的<code>header</code>，加上<code>Referer</code>之后，问题解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">opener&#x3D;urllib.request.build_opener()</span><br><span class="line">opener.addheaders&#x3D;[(&#39;User-Agent&#39;,&#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.93 Safari&#x2F;537.36&#39;),(&#39;Referer&#39;,m_url)]</span><br><span class="line">urllib.request.install_opener(opener)</span><br></pre></td></tr></table></figure><p>写到这里，很多读者会认为修改 <code>User-Agent</code> 很太简单。确实很简单，但是正常人1秒看一个图，而个爬虫1秒可以抓取好多张图，比如 1 秒抓取上百张图，那么服务器的压力必然会增大。也就是说，如果在一个 IP 下批量访问下载图片，这个行为不符合正常人类的行为，肯定要被封 IP。</p><p>其原理也很简单，就是统计每个IP的访问频率，该频率超过阈值，就会返回一个验证码，如果真的是用户访问的话，用户就会填写，然后继续访问，如果是代码访问的话，就会被封 IP。</p><p>这个问题的解决方案有两个，第一个就是常用的增设延时，每 3 秒钟抓取一次，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">time.sleep(3)</span><br></pre></td></tr></table></figure><p>但是，我们写爬虫的目的是为了高效批量抓取数据，这里设置 3 秒钟抓取一次，效率未免太低。其实，还有一个更重要的解决办法，那就是从本质上解决问题。</p><p>不管如何访问，服务器的目的就是查出哪些为代码访问，然后封锁 IP。解决办法：为避免被封 IP，在数据采集时经常会使用代理。当然，<code>requests</code> 也有相应的 <code>proxies</code>属性。</p><p>首先，构建自己的代理 IP 池，将其以字典的形式赋值给 <code>proxies</code>，然后传输给 <code>requests</code>，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxies=&#123;</span><br><span class="line">    <span class="string">"http"</span>:<span class="string">"http://10.10.1.10:3128"</span>,</span><br><span class="line">    <span class="string">"https"</span>:<span class="string">"http://10.10.1.10:1080"</span>,</span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url, proxies=proxies)</span><br></pre></td></tr></table></figure><p>下面为一段实际抓取图片的代码供参考：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests        <span class="comment">#导入requests包</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img</span><span class="params">(m_url,pic_name)</span>:</span></span><br><span class="line">    strhtml = requests.get(url=m_url)               <span class="comment">#Get方式获取网页数据</span></span><br><span class="line">    soup=BeautifulSoup(strhtml.text,<span class="string">'lxml'</span>)</span><br><span class="line">    data = soup.select(<span class="string">'xxxxx'</span>)                     <span class="comment">#用BeautifulSoup清晰数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">        result = &#123;<span class="string">'link'</span>:item.get(<span class="string">'src'</span>),<span class="string">'title'</span>:item.get(<span class="string">'title'</span>)&#125;     <span class="comment">#提取元素</span></span><br><span class="line">    img_url = result[<span class="string">'link'</span>]                                            <span class="comment">#获取图片链接</span></span><br><span class="line">    img_name = pic_name + <span class="string">' '</span> + result[<span class="string">'title'</span>] + <span class="string">'.jpg'</span>                <span class="comment">#获取图片的名字</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    opener=urllib.request.build_opener()</span><br><span class="line">    opener.addheaders=[(<span class="string">'User-Agent'</span>,<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36'</span>),(<span class="string">'Referer'</span>,m_url)]</span><br><span class="line">    urllib.request.install_opener(opener)</span><br><span class="line">    urllib.request.urlretrieve(img_url,<span class="string">'下载路径'</span>)</span><br><span class="line">    print(<span class="string">'成功下载'</span>+img_name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    m_url = <span class="string">'xxxxx'</span> </span><br><span class="line">    pic_name = <span class="string">'xxxxx'</span></span><br><span class="line">    get_img(m_url,pic_name)</span><br><span class="line">    time.sleep(<span class="number">5</span>)                  <span class="comment">#程序停顿5秒，此处即可实现批量化程序</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="6-其他"><a href="#6-其他" class="headerlink" title="6 其他"></a>6 其他</h1><p>此文大量参照此<a href="http://c.biancheng.net/view/2011.html" target="_blank" rel="noopener">博客内容</a>，并加入自己的内容以及内容抓取相关介绍。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web Crawler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>很喜欢的一句话</title>
      <link href="2019/01/01/Blog190101-Life-Goals/"/>
      <url>2019/01/01/Blog190101-Life-Goals/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/01/01/Blog190101-Life-Goals/190101-1.png" alt="The First Title Picture" title="Optional Title"><br><strong>人生最理想的状态</strong><br><a id="more"></a></p><p>“我的家里有三面墙，一面墙全是书，另一面墙全是电影和音乐的碟，最后一面墙全是旅行的车票。”<br>丰盛的人生不过如此，2019与君共勉。​　　​　　　　　　　　　　　　　​　　​　　　　　　　　　　</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy快速入门</title>
      <link href="2018/12/12/Py181212-Numpy%E5%85%A5%E9%97%A8/"/>
      <url>2018/12/12/Py181212-Numpy%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/12/12/Py181212-Numpy%E5%85%A5%E9%97%A8/181212-1.jpg" alt="The First Title Picture"></p><a id="more"></a><p><strong>本文将以代码的形式快速介绍Numpy的基本用法</strong></p><h3 id="本文主要内容："><a href="#本文主要内容：" class="headerlink" title="本文主要内容："></a><font color="#1E90FF"><center>本文主要内容：</center></font></h3><hr><ul><li>创建array</li><li>Numpy基本运算</li><li>Numpy索引</li><li>array的合并</li><li>array的分割</li><li>copy和deepcopy</li></ul><h2 id="Talk-is-cheap-Show-me-the-code"><a href="#Talk-is-cheap-Show-me-the-code" class="headerlink" title=" Talk is cheap. Show me the code"></a><font color="#1E90FF"><center> Talk is cheap. Show me the code</center></font></h2><p><img src="/2018/12/12/Py181212-Numpy%E5%85%A5%E9%97%A8/181212-2.png" alt="The First Title Picture" title="Numpy"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
            <tag> Python2 </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为你的GitHub博客设置专属域名</title>
      <link href="2018/10/10/Hexo181010-%E4%B8%BA%E4%BD%A0%E7%9A%84GitHub%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE%E4%B8%93%E5%B1%9E%E5%9F%9F%E5%90%8D/"/>
      <url>2018/10/10/Hexo181010-%E4%B8%BA%E4%BD%A0%E7%9A%84GitHub%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE%E4%B8%93%E5%B1%9E%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/10/10/Hexo181010-%E4%B8%BA%E4%BD%A0%E7%9A%84GitHub%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE%E4%B8%93%E5%B1%9E%E5%9F%9F%E5%90%8D/hexo-0004.png" alt="The First Title Picture" title="Optional Title"></p><a id="more"></a><p><strong>本文介绍为你的GitHub博客设置专属域名</strong></p><p>在为你的<code>GitHub</code>博客设置专属域名的前提是你已经用<code>GitHub</code>打造了你的个人博客，如果还没有，可以参考上一篇文章。</p><p>为你的<code>GitHub</code>博客设置专属域名主要分为以下几步：</p><h2 id="1-域名购买与解析"><a href="#1-域名购买与解析" class="headerlink" title="1 域名购买与解析"></a>1 域名购买与解析</h2><p>首先你要申请一个域名，因为毕竟<code>xxx.github.io</code>这个一长串的网址不好记，关于域名申请的话这里还是推荐<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">万网</a>，查找你想申请域名，如果没有被占用，购买就可以了。</p><p>购买域名完成，进入万网的管理控制台：</p><p><img src="/2018/10/10/Hexo181010-%E4%B8%BA%E4%BD%A0%E7%9A%84GitHub%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE%E4%B8%93%E5%B1%9E%E5%9F%9F%E5%90%8D/hexo-0005.png" alt="1" title="Optional Title"></p><p>找到你已经购买的域名，点击解析，进入如下页面：</p><p><img src="/2018/10/10/Hexo181010-%E4%B8%BA%E4%BD%A0%E7%9A%84GitHub%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE%E4%B8%93%E5%B1%9E%E5%9F%9F%E5%90%8D/hexo-0006.png" alt="1" title="Optional Title"></p><p>点击添加解析，注意这里必须按照图中标注的添加这三条，2个A和一个www。</p><p><code>这里需要注意的是有些域名是需要你在万网进行实名认证的，不然就算这里显示解析成功，万网也不会给你提供解析服务，所以还是有必要进行一下实名认证</code></p><p>ok，设置完成解析之后，还不能直接访问域名就能跳转到我们的Github页面。</p><p>我们只差最后一步。</p><h2 id="2-创建CNAME"><a href="#2-创建CNAME" class="headerlink" title="2 创建CNAME"></a>2 创建CNAME</h2><p>只差一个<code>CNAME</code>文件，这个文件需要创建在我们的本地仓库主目录中的<code>source</code>目录下，可以通过各种方法创建一个没有后缀的名叫<code>CNAME</code>的文件，如果不会，可以参考下面的命令行来创建：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd source/     <span class="comment"># 命令行进入source目录中</span></span><br><span class="line">$ touch CNAME    <span class="comment">#命令行创建一个叫CNAME的文件</span></span><br><span class="line">$ vim CNAME      <span class="comment">#用VIM打开刚刚创建的CNAME文件，并输入你的域名</span></span><br><span class="line">$ git add CNAME  <span class="comment">#这一步及以下两步是把更改内容推送至在线的GitHub中</span></span><br><span class="line">$ git commit -m <span class="string">"add CNAME"</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><br>到这里，不出意外你就已经可以通过你的域名访问了你的博客了，而你的博客也已经有了个性的专属域名。</p><p>ok，到这里你已经学会了如何通过你购买的域名与Github pages结合，即通过你购买的域名访问你的个人站点了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac安装软件提示文件损坏如何解决</title>
      <link href="2018/09/30/Mac180930-Mac%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E6%8F%90%E7%A4%BA%E6%96%87%E4%BB%B6%E6%8D%9F%E5%9D%8F/"/>
      <url>2018/09/30/Mac180930-Mac%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E6%8F%90%E7%A4%BA%E6%96%87%E4%BB%B6%E6%8D%9F%E5%9D%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/09/30/Mac180930-Mac%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E6%8F%90%E7%A4%BA%E6%96%87%E4%BB%B6%E6%8D%9F%E5%9D%8F/mac-0020.png" alt="The First Title Picture" title="Optional Title"><br><strong>本文将介绍在Mac上安装软件时提示文件损坏如何解决</strong><br><a id="more"></a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>Mac安装软件提示<strong>文件损坏</strong>怎么处理,打开DMG文件提示损坏怎么处理,来自不信任的开发者怎么处理,macOS High Sierra如何安装<strong>任何来源的文件</strong></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>一般来说都不是软件包坏了，如果是macOS High Sierra之前的版本只要在系统的<strong>”安全性与隐私”</strong>中打开”任何来源”这个选项即可。</p><p>而Mac用户在macOS High Sierra最新版本的系统后,系统中的”安全性与隐私”中没有”任何来源”这个选项.没有“任何来源”这个选项会直接导致很多从非Apple Store下载的软件包在安装的时候会<strong>提示软件包来自不安全的开发者或者直接提示软件包损坏无法安装</strong>，话不多说，直接上解决办法：</p><p>1.打开电脑的终端<br>2.输入以下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure><br>输入你系统密码，回车<br>3.然后打开“安全性与隐私”,这里已经出现”任何来源”了，勾选之后就可以安装很多软件包</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置你的Terminal终端</title>
      <link href="2018/09/18/Mac180918-%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84Terminal%E7%BB%88%E7%AB%AF/"/>
      <url>2018/09/18/Mac180918-%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84Terminal%E7%BB%88%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/09/18/Mac180918-%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84Terminal%E7%BB%88%E7%AB%AF/180918-1.jpg" alt="The First Title Picture" title="Optional Title"><br><strong>本文将介绍在Mac环境下用powerline配置你的Terminal终端</strong></p><a id="more"></a><h1 id="Powerline-是什么"><a href="#Powerline-是什么" class="headerlink" title="Powerline 是什么"></a>Powerline 是什么</h1><p>Powerline是一个stateless status line，即一个全局状态/提示栏。你可以为你的bash,Terminal,iTerm2,VIM配置上powerline，然后就会变成这样：</p><p>你的Mac终端提示栏将会是这样的：<br><img src="/2018/09/18/Mac180918-%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84Terminal%E7%BB%88%E7%AB%AF/mac-0007.png" alt="配置图" title="Optional Title"><br>你的VIM状态栏会是这样的：<br><img src="/2018/09/18/Mac180918-%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84Terminal%E7%BB%88%E7%AB%AF/mac-0008.png" alt="配置图" title="Optional Title"><br>正所谓磨刀不误砍柴工，为你的工作环境配置一个好看的状态栏，极大的提高了工作效率。</p><h1 id="Mac上安装Powerline"><a href="#Mac上安装Powerline" class="headerlink" title="Mac上安装Powerline"></a>Mac上安装Powerline</h1><p>因为Powerline项目下涵盖了适配各种APP(bash，vim等)的代码，所以你可以在Mac任何一个地方下载该代码包，然后在不同的APP中配置这个路径，以Plugin形式加载。本文暂时介绍配置Mac的默认Terminal的方法。</p><p>对于Mac的环境，确保Python版本大于等于2.7，如果不是，可以通过homebrew安装，这里不做赘述。也可以一步到位安装Python3，至少这是未来的趋势。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; python -v</span><br><span class="line">Python 2.7.9</span><br></pre></td></tr></table></figure><br>在确保环境之后，通过pip安装Powerline：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; pip install powerline-status</span><br></pre></td></tr></table></figure><br>安装完成后通过pip show powerline-status查看powerline所在的具体路径。</p><p>注意：这里的路径很重要，会用在之后的配置环节<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; pip show powerline-status</span><br><span class="line">Name: powerline-status</span><br><span class="line">Version: 2.6</span><br><span class="line">Summary: The ultimate statusline&#x2F;prompt utility.</span><br><span class="line">Home-page: https:&#x2F;&#x2F;github.com&#x2F;powerline&#x2F;powerline</span><br><span class="line">Author: Kim Silkebaekken</span><br><span class="line">Author-email: kim.silkebaekken+vim@gmail.com</span><br><span class="line">License: MIT</span><br><span class="line">Location: &#x2F;Users&#x2F;lib&#x2F;python3.6&#x2F;site-packages</span><br><span class="line">Requires:</span><br></pre></td></tr></table></figure></p><h1 id="配置Bash使用powerline"><a href="#配置Bash使用powerline" class="headerlink" title="配置Bash使用powerline"></a>配置Bash使用powerline</h1><p>配置方法很简单，只需要找到你Mac的Bash配置文件位置(例如：/etc/bashrc，~/.bashrc，~/.bash_profile)，然后在其中增加一行调用安装路径下的bindings/bash/powerline.sh即可。这样每次调用生成新的Bash窗口时，都会自动执行powerline.sh文件中的内容。下面以~/.bash_profile为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; echo &lt;&lt; EOF &gt;&gt; ~&#x2F;.bash_profile </span><br><span class="line">. &#x2F;Library&#x2F;Python&#x2F;2.7&#x2F;site-packages&#x2F;powerline&#x2F;bindings&#x2F;bash&#x2F;powerline.sh</span><br><span class="line">EOF  </span><br><span class="line">shell&gt; . &#x2F;Library&#x2F;Python&#x2F;2.7&#x2F;site-packages&#x2F;powerline&#x2F;bindings&#x2F;bash&#x2F;powerline.sh</span><br></pre></td></tr></table></figure><br>注意：根据python安装方式的不同，你的powerline所在路径也可能不同。请根据实际情况修改上面的命令。</p><h1 id="Teriminal字体配置"><a href="#Teriminal字体配置" class="headerlink" title="Teriminal字体配置"></a>Teriminal字体配置</h1><p>执行完上面的步骤后，不出意外powerline就开始工作了。打开你的终端，你会发现提示符是一些乱码，出现这样情况的原因是powerline为了美观自己造了一些符号，而这些符号不在Unicode字库内（如果你不知道Unicode字库是什么的话可以看下博主以前的相关介绍）。所以想要powerline正常显示的话，需要安装特殊处理过的字体。好在有一位热心人的帮助，他把大部分的程序猿常用的等宽字体都打上了powerline patch使得我们的这部配置将异常简单。首先我们从github上下载并安装字体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; git clone https:&#x2F;&#x2F;github.com&#x2F;powerline&#x2F;fonts.git</span><br><span class="line">shell&gt; cd fonts</span><br><span class="line">shell&gt; .&#x2F;install.sh</span><br></pre></td></tr></table></figure><br>安装完成后我们就可以在iTerm2或者Terminal的字体选项里看到并选择多个xxx for powerline的字体了。*注意：对于ASCII fonts和non-ASCII fonts都需要选择for powerline的字体。如下图：<br><img src="/2018/09/18/Mac180918-%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84Terminal%E7%BB%88%E7%AB%AF/mac-0009.png" alt="配置图" title="Optional Title"></p><p>至此就应该全部配置好了。</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置你的Sublime Text</title>
      <link href="2018/08/22/Mac180822-%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84Sublime-Text/"/>
      <url>2018/08/22/Mac180822-%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84Sublime-Text/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/08/22/Mac180822-%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84Sublime-Text/mac-0003.png" alt="The First Title Picture" title="Optional Title"><br><strong>本文介绍在Mac上配置Sublime Text</strong><br><a id="more"></a></p><h1 id="1-下载Sublime-Text"><a href="#1-下载Sublime-Text" class="headerlink" title="1 下载Sublime Text"></a>1 下载Sublime Text</h1><p>去官网下载Sublime Text<a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">官网</a></p><h1 id="2-注册"><a href="#2-注册" class="headerlink" title="2 注册"></a>2 注册</h1><p>输入注册码：</p><p>注册码可以在搜索引擎直接搜索，搜最近的结果就行。</p><p>将搜索到的注册码复制粘贴到软件的输入框里，按回车，提示成功，这时就可以使用了</p><p>注意：安装SublimeText3时，不会自动弹出来让你输入注册码。点击上面的Help－－－Enter License进行输入.</p><h1 id="3-安装插件Package-Control"><a href="#3-安装插件Package-Control" class="headerlink" title="3 安装插件Package Control"></a>3 安装插件Package Control</h1><p>这个工具可以来安装后面需要的所有插件。打开已经安装好的 Sublime Text 3，然后点击顶部菜单的 View -&gt; Show Console（或者使用快捷键 command + ` ）。</p><p>在下面的输入框里复制下面的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os,hashlib; h &#x3D; &#39;2915d1851351e5ee549c20394736b442&#39; + &#39;8bc59f460fa1548d1514676163dafc88&#39;; pf &#x3D; &#39;Package Control.sublime-package&#39;; ipp &#x3D; sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by &#x3D; urllib.request.urlopen( &#39;http:&#x2F;&#x2F;packagecontrol.io&#x2F;&#39; + pf.replace(&#39; &#39;, &#39;%20&#39;)).read(); dh &#x3D; hashlib.sha256(by).hexdigest(); print(&#39;Error validating download (got %s instead of %s), please try manual install&#39; % (dh, h)) if dh !&#x3D; h else open(os.path.join( ipp, pf), &#39;wb&#39; ).write(by)</span><br></pre></td></tr></table></figure><p>如下图：<br><img src="/2018/08/22/Mac180822-%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84Sublime-Text/mac-0016.png" alt="1" title="Optional Title"><br>紧接着，查看是否已经安装成功<br><img src="/2018/08/22/Mac180822-%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84Sublime-Text/mac-0017.png" alt="1" title="Optional Title"><br>接下来是插件安装</p><p>通过快捷键<code>Command + Shift + P</code>  打开 <code>Package Control</code> 来安装插件。在打开的输入框中输入 <code>install</code>，会根据输入状态自动提示，用鼠标点击或键盘回车选择 Install Package 进入查找安装界面：</p><p>等待几秒钟后，在新弹出的输入框里，输入你想要安装的插件名称：<br><img src="/2018/08/22/Mac180822-%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84Sublime-Text/mac-0018.png" alt="1" title="Optional Title"><br>用鼠标点击或键盘回车选择后，等待一段时间即可安装成功。所有的插件都存放在下面这个文件目录里，每个插件都有独立的文件夹：</p><p><code>/Users/你的Username/Library/Application Support/Sublime Text 3/Packages</code></p><p>等待几秒钟后，在新弹出的输入框里，输入你想要安装的插件名称：<br><img src="/2018/08/22/Mac180822-%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84Sublime-Text/mac-0019.png" alt="1" title="Optional Title"><br>这个根据你的需要下载相应的插件</p><h1 id="4-用命令行打开Sublime"><a href="#4-用命令行打开Sublime" class="headerlink" title="4 用命令行打开Sublime"></a>4 用命令行打开Sublime</h1><p>到上一步已经把Sublime基本配置好了，但是如果经常用命令行的话还不能直接用命令行打开Sublime，所以需要进行这一步</p><p>在你的终端文件里，加上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias subl&#x3D;\&#39;&#39;&#x2F;Applications&#x2F;Sublime Text 2.app&#x2F;Contents&#x2F;SharedSupport&#x2F;bin&#x2F;subl&#39;\&#39;</span><br></pre></td></tr></table></figure><br>一般终端文件就是 ~/.bashrc 或者是 ~/.bash_profile<br>如果是Sublime Text 3 的用户，可以把路径中的 /Sublime Text 2.app/ 改成 /Sublime Text.app/ 就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime Text </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Mac搭建你的虚拟机Ubuntu</title>
      <link href="2018/07/09/Mac180709-%E5%9C%A8Mac%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu/"/>
      <url>2018/07/09/Mac180709-%E5%9C%A8Mac%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/07/09/Mac180709-%E5%9C%A8Mac%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu/mac-0006.png" alt="The First Title Picture" title="Optional Title"><br><strong>本文会介绍如何在Mac上利用VMware Fusion虚拟机安装Ubuntu系统</strong><br><a id="more"></a></p><h1 id="1-在Mac上安装VMware-Fusion虚拟机"><a href="#1-在Mac上安装VMware-Fusion虚拟机" class="headerlink" title="1 在Mac上安装VMware Fusion虚拟机"></a>1 在Mac上安装VMware Fusion虚拟机</h1><p>1.下载VMware fusion for Mac，直接去<a href="https://www.vmware.com/products/fusion/fusion-evaluation.html" target="_blank" rel="noopener">官网</a>下载即可。</p><p>2.然后安装VMware Fusion，一路下一步就可以。<br><img src="/2018/07/09/Mac180709-%E5%9C%A8Mac%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu/mac-0010.png" alt="配置图" title="Optional Title"><br>3.输入注册码，注册码上网搜索一下最新的即可。<br><img src="/2018/07/09/Mac180709-%E5%9C%A8Mac%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu/mac-0011.png" alt="配置图" title="Optional Title"><br>4.最后完成即可。</p><h1 id="2-安装Ubuntu"><a href="#2-安装Ubuntu" class="headerlink" title="2 安装Ubuntu"></a>2 安装Ubuntu</h1><p>1.在网上下载ISO镜像，安全点就直接去官网下载</p><p>2.镜像下载好之后就按下图的顺序操作</p><p><img src="/2018/07/09/Mac180709-%E5%9C%A8Mac%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu/mac-0012.png" alt="配置图" title="Optional Title"></p><p><img src="/2018/07/09/Mac180709-%E5%9C%A8Mac%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu/mac-0013.png" alt="配置图" title="Optional Title"></p><p><img src="/2018/07/09/Mac180709-%E5%9C%A8Mac%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu/mac-0014.png" alt="配置图" title="Optional Title"></p><p>3.基本到这里就已经全部配置好了，但是还存在不能全屏等问题，需要安装VMware Tools<br><img src="/2018/07/09/Mac180709-%E5%9C%A8Mac%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu/mac-0015.png" alt="配置图" title="Optional Title"></p><p>4.完成Ubuntu搭建</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习学习路线</title>
      <link href="2018/06/12/Py180612-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>2018/06/12/Py180612-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/06/12/Py180612-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/180612-1.png" alt="The First Title Picture"></p><a id="more"></a><p><strong>给学习机器学习没有思路的你</strong></p><p>这里推荐莫凡同学的学习路线值得大家学习<br><img src="/2018/06/12/Py180612-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/180612-2.png" alt></p><p>​      </p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Vutrl+Shadowsocks来科学上网</title>
      <link href="2018/05/20/Mac180520-%E7%94%A8Vutrl-Shadowsocks%E6%9D%A5%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
      <url>2018/05/20/Mac180520-%E7%94%A8Vutrl-Shadowsocks%E6%9D%A5%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/05/20/Mac180520-%E7%94%A8Vutrl-Shadowsocks%E6%9D%A5%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/google-0002.png" alt="The First Title Picture" title="Optional Title"><br><strong>本文将介绍在Mac环境下搭建VPS服务器来科学上网</strong><br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>曾经也用过蓝灯，鱼摆摆等科学工具来实现科学上网，后来渐渐的要不就是失效，要不就是价格偏高，而且作为一个爱折腾的人，这些实在是不得劲，稳定性很差，既然都是通过海外服务器来实现，那还不如自己直接整一个来的干脆利落，而且稳定性和速度都6得飞起，首先在这里得声明，天下没有免费的午餐，优质的服务器还是得花费一定的费用，如果你只是用来搭建科学上网环境，那么你也可以通过共享给小伙伴或者其他方式来分摊你的压力。本文主要介绍利用Vutrl和Shadowsocks配合搭建科学上网环境。</p><h1 id="1-科普"><a href="#1-科普" class="headerlink" title="1 科普"></a>1 科普</h1><p>这部分介绍一些搭建过程中涉及到的背景知识：</p><h2 id="1-1-什么是-Shadowsocks"><a href="#1-1-什么是-Shadowsocks" class="headerlink" title="1.1 什么是 Shadowsocks"></a>1.1 什么是 Shadowsocks</h2><p>shadowsocks的工作原理<br><img src="/2018/05/20/Mac180520-%E7%94%A8Vutrl-Shadowsocks%E6%9D%A5%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/google-0003.png" alt="1" title="Optional Title"><br>Shadowsocks(ss) 是由 <a href="https://github.com/Clowwindy" target="_blank" rel="noopener">Clowwindy</a>开发的一款用来加密传输资料的软件，不过也正因为它加密传输资料的特性，使得 GFW 无法区分它所传输的资料。</p><h2 id="1-2-什么是-VPS-和-Vultr"><a href="#1-2-什么是-VPS-和-Vultr" class="headerlink" title="1.2 什么是 VPS 和 Vultr"></a>1.2 什么是 VPS 和 Vultr</h2><p>VPS (Virtual private server) 译作虚拟专用伺服器。你可以理解为是云端的一台远程电脑，你可以给它安装操作系统、软件，并通过一些工具连接和远程操控它。<br><a href="https://www.vultr.com/" target="_blank" rel="noopener">Vultr</a> 是一家 VPS 服务器提供商，有美国、亚洲、欧洲等多地的 VPS。它家的服务器以性价比高闻名，按时间计费，最低的资费为每月2.5美刀，不过现在已经脱销了，最低只有5美刀的了。<br><img src="/2018/05/20/Mac180520-%E7%94%A8Vutrl-Shadowsocks%E6%9D%A5%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/google-0004.png" alt="1" title="Optional Title"><br>比 Vultr 价格更低的服务商也有许多，比如<a href="https://bandwagonhost.com/" target="_blank" rel="noopener">搬瓦工</a>，和 V 家差不多的配置只要19.9美刀每年,但是夜间的速度实在慢的感人。</p><h2 id="1-3-什么是-Linux-和-SSH"><a href="#1-3-什么是-Linux-和-SSH" class="headerlink" title="1.3 什么是 Linux 和 SSH"></a>1.3 什么是 Linux 和 SSH</h2><p>Linux 是免费开源的操作系统，大概被世界上过半服务器所采用。有大量优秀的开源软件可以安装，上述 Shadowsocks 就是其一。你可以通过命令行而不仅仅是通过图形界面来给 Linux 操作系统「下命令」，比如进入一个文件夹。<br>而 SSH 是一种网络协议，作为每一台 Linux 电脑的标准配置，用于计算机之间的加密登录。当你为租用的 VPS 安装 Linux 系统后，只要借助一些工具，就可以用 SSH 在你自己的 Mac/PC 电脑上远程登录该 VPS 了。</p><h1 id="2-购买和连接-VPS"><a href="#2-购买和连接-VPS" class="headerlink" title="2 购买和连接 VPS"></a>2 购买和连接 VPS</h1><h2 id="2-1-注册-Vultr-和部署-VPS"><a href="#2-1-注册-Vultr-和部署-VPS" class="headerlink" title="2.1 注册 Vultr 和部署 VPS"></a>2.1 注册 Vultr 和部署 VPS</h2><p>访问 <a href="https://www.vultr.com/" target="_blank" rel="noopener">Vultr.com</a> 注册帐号，然后按下图进行部署心得服务器。<br><img src="/2018/05/20/Mac180520-%E7%94%A8Vutrl-Shadowsocks%E6%9D%A5%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/google-0005.png" alt="1" title="Optional Title"></p><h2 id="2-2-连接-VPS"><a href="#2-2-连接-VPS" class="headerlink" title="2.2 连接 VPS"></a>2.2 连接 VPS</h2><p>找到你刚刚买的VPS的配置信息,最关键的就是IP地址和密码<br><img src="/2018/05/20/Mac180520-%E7%94%A8Vutrl-Shadowsocks%E6%9D%A5%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/google-0006.png" alt="1" title="Optional Title"><br>打开你的Mac终端，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@&lt;Your IP&gt;</span><br></pre></td></tr></table></figure><p>然后按照提示去你的VPS那复制密码过来黏贴就行（需要注意的是linux中密码是不会显示出来的，所以你只要按回车键就可以了）<br>当出现下面的代码时，说明已成功登录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]#</span><br></pre></td></tr></table></figure></p><h1 id="3-部署-Shadowsocks"><a href="#3-部署-Shadowsocks" class="headerlink" title="3 部署 Shadowsocks"></a>3 部署 Shadowsocks</h1><p>Shadowsocks 需要同时具备客户端和服务器端，所以它的部署也需要分两步。</p><h2 id="3-1-部署-Shadowsocks-服务器端"><a href="#3-1-部署-Shadowsocks-服务器端" class="headerlink" title="3.1 部署 Shadowsocks 服务器端"></a>3.1 部署 Shadowsocks 服务器端</h2><p>这里使用 <a href="https://teddysun.com/342.html" target="_blank" rel="noopener">teddysun</a> 的一键安装脚本,依次执行下面3条命令，每次输入一行、回车，等待屏幕上的操作完成后再输入下一条。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;teddysun&#x2F;shadowsocks_install&#x2F;master&#x2F;shadowsocks.sh</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x shadowsocks.sh</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure><br>第三步输完，依次为你的 Shadowsocks 服务设置一个密码和端口（端口输入1-65535 间的数字就ok），然后你就只需要等你的Shadowsocks 的配置信息显示出来，其中你的IP地址，密码，端口和加密方式都很重要，截图保存。</p><h2 id="3-2-安装-Shadowsocks-客户端"><a href="#3-2-安装-Shadowsocks-客户端" class="headerlink" title="3.2 安装 Shadowsocks 客户端"></a>3.2 安装 Shadowsocks 客户端</h2><p>在你需要科学上网的设备上面安装相对应的客户端，这个Mac的下载Mac客户端，Windows下载PC版本的客户端，手机就找相应支持的APP就行，这里就自己动手找合适的版本就行。<br>一般都是打开客户端，在「服务器设定」里新增服务器。然后依次填入刚才截图的服务器 IP、服务器端口、你设的密码和加密方式。<br>新增服务器<br>然后启用代理，到这里你就已经可以科学上网了。</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vutrl </tag>
            
            <tag> Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Hexo + Github Pages搭建你的个人博客</title>
      <link href="2018/04/18/Hexo180418-%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2018/04/18/Hexo180418-%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/04/18/Hexo180418-%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-0002.png" alt="The First Title Picture" title="Optional Title"></p><a id="more"></a><p><strong>本文介绍使用Hexo + Github Pages搭建个人独立博客</strong></p><h1 id="1-写在最前面"><a href="#1-写在最前面" class="headerlink" title="1 写在最前面"></a>1 写在最前面</h1><p>Blog可能已经过了最火热的时代，特别是现在又要自己折腾一个个人的独立博客，反反复复，停停走走，最后还是下了决心决定自己搭建一个博客。</p><p>之所以想要建立一个自己的个人博客，想让自己在写博客的过程又有新的收获。</p><p><a href="https://zhuanlan.zhihu.com/p/19743861?columnSlug=cnfeat" target="_blank" rel="noopener">出处</a></p><p><strong>“提高将事情讲清楚的能力” </strong></p><blockquote><p align="left">在写博客之前你需要花更多的时间来表达出你的想法，表达你想法之前你得先对你要表达的东西充分理解并理清思路和逻辑。很多东西你以为懂了，但当你在写下来的时候，你就觉得无从下手了。</p></blockquote><p><strong>分享带来的连锁反应</strong></p><blockquote><p align="left">“通过分享，你获得了直接而快速的回报，你最终或许会发现你已将版权和“保留所有权利”抛诸脑后。新的经济学准则是：参与你作品的人越多，回报越高。在分享主义里，如果你愿意你可以保留所有权，但是我乐于分享。” by 毛向辉 《分享主义：一场思维革命》</p></blockquote><p><strong>记录成长</strong></p><blockquote><p align="left">我们每个人都应该有这样的经历:隔了很久我们回头看看以前的自己会发现特别傻x,但正是因为这些傻x的岁月让我们不断成长,你在成长的过程中不断的修正自己的错误。</p></blockquote><p><strong>探索未知的世界</strong></p><blockquote><p align="left">世界不止是你的家，你的公司，你的朋友圈，你应该去发现一个更大的世界，通过写博客，你会知道世界上还有很多人像你一样在写博客，这些人和知识正在世界的某个角落在等着你。</p></blockquote><p><strong>帮助更多想要获取帮助的人</strong></p><blockquote><p align="left">这点我相信大家由为感触,在你探索一个未知的知识领域的时候,往往被撞的一鼻子灰.幸运的人很快就能找到一个“师傅”或一篇很好的文章,但大多数往往在找“教程”的过程中就已经放弃了.因为他们没能够找到刚好理解的文章.</p></blockquote><h1 id="2-系统环境配置"><a href="#2-系统环境配置" class="headerlink" title="2 系统环境配置"></a>2 系统环境配置</h1><p>要使用Hexo，就需要在系统中安装Nodejs以及Git。<br><strong><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">安装Nodejs</a></strong><br><strong><a href="https://git-scm.com/download/" target="_blank" rel="noopener">安装Git</a></strong><br><strong>安装Hexo</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/hexo</span><br><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ cd blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo g <span class="comment"># 或者hexo generate</span></span><br><span class="line">$ hexo s <span class="comment"># 或者hexo server，可以在http://localhost:4000/ 查看</span></span><br></pre></td></tr></table></figure><p>这里有必要提下Hexo常用的几个命令：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate (hexo g)<span class="comment">#生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</span></span><br><span class="line">hexo server (hexo s) <span class="comment">#启动本地web服务，用于博客的预览</span></span><br><span class="line">hexo deploy (hexo d) <span class="comment">#部署播客到远端（比如github, heroku等平台）</span></span><br></pre></td></tr></table></figure><br>另外还有其他几个常用命令：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">$ hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br></pre></td></tr></table></figure><br>常用简写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n == hexo new</span><br><span class="line">$ hexo g == hexo generate</span><br><span class="line">$ hexo s == hexo server</span><br><span class="line">$ hexo d == hexo deploy</span><br></pre></td></tr></table></figure><br>常用组合<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g <span class="comment">#生成部署</span></span><br><span class="line">$ hexo s -g <span class="comment">#生成预览</span></span><br></pre></td></tr></table></figure><br>现在我们打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 已经可以看到一篇内置的blog了。</p><p>目前我安装所用的本地环境如下：(通过hexo -v查看)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">hexo: 3.5.0</span><br><span class="line">hexo-cli: 1.0.4</span><br><span class="line">os: Darwin 17.3.0 darwin x64</span><br><span class="line">http_parser: 2.7.0</span><br><span class="line">node: 8.9.4</span><br><span class="line">v8: 6.1.534.50</span><br><span class="line">uv: 1.15.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">ares: 1.10.1-DEV</span><br><span class="line">modules: 57</span><br><span class="line">nghttp2: 1.25.0</span><br><span class="line">openssl: 1.0.2n</span><br><span class="line">icu: 59.1</span><br><span class="line">unicode: 9.0</span><br><span class="line">cldr: 31.0.1</span><br><span class="line">tz: 2017b</span><br></pre></td></tr></table></figure></p><h1 id="3-Hexo主题设置"><a href="#3-Hexo主题设置" class="headerlink" title="3 Hexo主题设置"></a>3 Hexo主题设置</h1><p>这里以主题light为例进行说明。</p><p>安装主题<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ git clone git clone git://github.com/tommy351/hexo-theme-light.git themes/light</span><br></pre></td></tr></table></figure><br>启用主题<br>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为light。</p><p>更新主题<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd themes/light</span><br><span class="line">$ git pull</span><br><span class="line">$ hexo g <span class="comment"># 生成</span></span><br><span class="line">$ hexo s <span class="comment"># 启动本地web服务器</span></span><br></pre></td></tr></table></figure><br>现在打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题。</p><h1 id="4-Github-Pages设置"><a href="#4-Github-Pages设置" class="headerlink" title="4 Github Pages设置"></a>4 Github Pages设置</h1><p>GitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。</p><p>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过<a href="http://username.github.io" target="_blank" rel="noopener">http://username.github.io</a> 来访问你的个人主页。(这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。)</p><p>创建自己的Github Pages<br>注册GitHub及使用Github Pages的过程不做赘述，创建之后创建一个github repo叫做 xxx(your username).github.io. 创建完成之后，需要有一次提交(git commit)操作，然后就可以通过链接<a href="http://xxx(your" target="_blank" rel="noopener">http://xxx(your</a> username).github.io/ 访问了。</p><h1 id="5-部署Hexo到Github-Pages"><a href="#5-部署Hexo到Github-Pages" class="headerlink" title="5 部署Hexo到Github Pages"></a>5 部署Hexo到Github Pages</h1><p>有了上一步的基础，这一步是将我们本地的web部署到github上，然后就可以通过<a href="http://xxx(your" target="_blank" rel="noopener">http://xxx(your</a> username).github.io/ 直接访问了。</p><p>首先需要明白所谓部署到github的原理。</p><p>之前步骤中在Github上创建的那个特别的repo（xxx(your username).github.io）一个最大的特点就是其master中的html静态文件，可以通过链接<a href="http://xxx(your" target="_blank" rel="noopener">http://xxx(your</a> username).github.io来直接访问。</p><p>Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。</p><p>需要将hexo生成的静态网站，提交(git commit)到github上。</p><p>明白了原理，怎么做自然就清晰了。</p><p>可以参考下面的图片：<br><img src="/2018/04/18/Hexo180418-%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-0003.png" alt title="Optional Title"></p><p>如果还不明白，可以自己做做功课补习一下。</p><p>使用hexo deploy部署<br>hexo deploy可以部署到很多平台，具体可以参考这个<a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">链接</a>. 如果部署到github，需要在配置文件_config.xml中作如下修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:xxx(your username).github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><br>然后在命令行中执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><br>即可完成部署。</p><p>要能成功部署，需要提前安装一个扩展：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>使用git命令行部署<br>使用hexo depoly确实很方便，但是有的时候会出现一些bug，所以个人还是更喜欢直接用Git命令来完成部署。</p><p>clone github repo 进入你的blog文件夹，然后clone你的GitHub repo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxx(your username).github.io.git .deploy&#x2F;xxx(your username).github.io</span><br></pre></td></tr></table></figure><br>上一行代码的意思是将我们之前创建的repo克隆到本地的一个叫做.deploy的新建的文件夹用于存放克隆的代码。</p><p>将下面的代码直接封装成sh，每次需要部署的时候直接bash执行就行。</p><p>具体每行代码的意思见注释。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cp -R public/* .deploy/xxx(your username).github.io</span><br><span class="line"><span class="comment">#这一行是复制blog下面的public中的网页代码到我们Git的本地文件夹</span></span><br><span class="line">cd .deploy/xxx(your username).github.io</span><br><span class="line"><span class="comment">#进入这个本地的Git文件夹</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment">#加载此文件夹下面所有的文件</span></span><br><span class="line">git commit -m “update”</span><br><span class="line"><span class="comment">#提交代码</span></span><br><span class="line">git push </span><br><span class="line"><span class="comment">#push到GitHub上</span></span><br></pre></td></tr></table></figure></p><p>到这里你的个人博客基本框架搭建起来了，这里根据你自己所选的主题配置的不同，你的个性化设置也可以不一样，有很多的配置，现在不熟悉也没有关系，可以慢慢的摸索，后面我还会分享一些个人搭建过程中的小小心得经验。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语的学习路线</title>
      <link href="2018/04/03/Jap180403-%E6%97%A5%E8%AF%AD%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>2018/04/03/Jap180403-%E6%97%A5%E8%AF%AD%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/04/03/Jap180403-%E6%97%A5%E8%AF%AD%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/180403-1.jpg" alt="The First Title Picture" title="Optional Title"></p><a id="more"></a><p>本文介绍日语的学习路线</p><h1 id="To-Be-Updating"><a href="#To-Be-Updating" class="headerlink" title="To Be Updating"></a>To Be Updating</h1>]]></content>
      
      
      <categories>
          
          <category> Japanese </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Japanese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac配置Python3最简单的方法</title>
      <link href="2018/03/14/Mac180314-Mac%E9%85%8D%E7%BD%AEPython3%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>2018/03/14/Mac180314-Mac%E9%85%8D%E7%BD%AEPython3%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/03/14/Mac180314-Mac%E9%85%8D%E7%BD%AEPython3%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%B9%E6%B3%95/mac-0002.png" alt="The First Title Picture" title="Optional Title"></p><p><strong>此文介绍Mac用Anaconda配置Python3</strong><br><a id="more"></a></p><h1 id="达成效果"><a href="#达成效果" class="headerlink" title="达成效果"></a>达成效果</h1><p>能让你目前只装有Python2的Mac装上Python3，同时拥有很多科学计算库</p><h1 id="anaconda介绍"><a href="#anaconda介绍" class="headerlink" title="anaconda介绍"></a>anaconda介绍</h1><p>anaconda 是一个python的发行版，包括了python和很多常见的软件库, 和一个包管理器conda。常见的科学计算类的库都包含在里面了，使得安装比常规python安装要容易。<br>装了anaconda就不需要装python了。</p><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><p>1.下载</p><p>首先去<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">清华大学开源软件镜像站</a>找到你Mac的版本进行下载，根据你的喜好安装有界面的版本或者命令行版本，然后直接安装即可</p><p>2.确认安装结果</p><p>安装完成后，在终端测试一下安装结果</p><p>输入python或ipython等命令，如果看到相应的结果，说明安装成功</p><p>3.修改包管理镜像源</p><p>安装成功之后，修改其包管理镜像为国内源</p><p>在终端中分别运行下面的2个命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure></p><p>设置镜像的目的，是因为原生的镜像在国外，在配置下载的时候可能会很慢，国内的镜像速度就很快</p><p>基本上到这一步，你的Mac就已经配置好了基本的Python3环境</p><p>然后你还想折腾着换着用Python2什么的话就看第4步</p><p>4.添加Python2</p><p>在终端输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py27 python&#x3D;2.7</span><br></pre></td></tr></table></figure><br>其中py27是新添加环境的名字，可以自定义修改。</p><p>之后通过activate py27和deactivate py27命令激活、退出该环境。（Linux和OS系统的命令似乎是source activate和source deactivate）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate py27</span><br></pre></td></tr></table></figure></p><hr>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
            <tag> Python2 </tag>
            
            <tag> MacBook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python如何入门</title>
      <link href="2018/02/11/Py180211-Python%E5%A6%82%E4%BD%95%E5%85%A5%E9%97%A8/"/>
      <url>2018/02/11/Py180211-Python%E5%A6%82%E4%BD%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/02/11/Py180211-Python%E5%A6%82%E4%BD%95%E5%85%A5%E9%97%A8/180211-1.jpg" alt="The First Title Picture"></p><a id="more"></a><p><strong>本文列举最基本的Python语法来给你做入门的自我检测</strong></p><p><strong>入门Python，从敲出你的第一个hello world开始，但是往往学着枯燥的语法，慢慢的就不了了之，就像你立志要刷完一本英语单词本，到最后却还是只记得abandon一样，但其实无论是学任何语言，比如英语，还是学计算机语言，比如Python，都是躲不过语法的，语法是框架，是规则，有了框架的基础上才会渐渐地有血有肉，我自认为学习英语语法的好方法是自己多动手写英语文章，用更多的句式，这样自然而言语法就能烂熟于心，当然延伸到学习Python，也是一样，最好的方法自然是你需要什么，如果你都不知道你要拿Python来做什么，那么这样学习起来是很枯燥的，自然这也会导致最后你的学习之旅半路就停下了，比如我当时学习Python的第一个小项目就是写了一个爬虫，爬了一个网站所有的我需要的信息，在这个过程中用到了Python的很多种语法，这个正反馈的过程中，不但你能受到激励不容易放弃，你也会对各种语法知识更加的印象深刻。</strong></p><p><strong>这篇博文，我会列举一些最最基本的Python语法的问题，作为你想学习Python的一个自我检测吧，如果这些你都知道了，那么其实你已经是入门了Python了。</strong></p><hr><h1 id="1-关于标识符、关键字"><a href="#1-关于标识符、关键字" class="headerlink" title="1. 关于标识符、关键字"></a>1. 关于标识符、关键字</h1><ul><li>什么是标识符及标识符的命名规则</li><li>列举不少于十种关键字<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>/<span class="keyword">else</span>/<span class="keyword">elif</span>/<span class="keyword">break</span>/<span class="keyword">continue</span>/<span class="keyword">for</span>/<span class="keyword">while</span>/<span class="keyword">and</span>/<span class="keyword">or</span>/<span class="keyword">not</span>/<span class="keyword">in</span>/<span class="literal">True</span>/<span class="literal">False</span>/<span class="keyword">try</span>/<span class="keyword">except</span>/<span class="keyword">finally</span>/<span class="keyword">as</span>/<span class="keyword">import</span>/<span class="keyword">from</span>/<span class="function"><span class="keyword">def</span>/<span class="title">class</span>/<span class="title">return</span>/<span class="title">None</span>/<span class="title">global</span>/<span class="title">lambda</span></span></span><br></pre></td></tr></table></figure></li><li>如何知道所有的关键字<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">keyword.kwlist</span><br></pre></td></tr></table></figure></li></ul><p>​    </p><h1 id="2-关于变量、输入、输出"><a href="#2-关于变量、输入、输出" class="headerlink" title="2. 关于变量、输入、输出"></a>2. 关于变量、输入、输出</h1><ul><li>什么是变量，变量的本质是存储还是<strong>引用</strong></li><li>如何交换两个变量的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">4</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">c = a   <span class="comment">#交换两个变量的第1种方法</span></span><br><span class="line">a = b</span><br><span class="line">b = c</span><br><span class="line"></span><br><span class="line">a = a+b   <span class="comment">#交换两个变量的第2种方法</span></span><br><span class="line">b = a-b</span><br><span class="line">a = a-b</span><br><span class="line"></span><br><span class="line">a,b = b,a  <span class="comment">#交换两个变量的第3种方法</span></span><br></pre></td></tr></table></figure><ul><li>python3的输入注意</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = input()    <span class="comment">#python2</span></span><br><span class="line"><span class="comment">#3+4-----&gt;a = 7 #number</span></span><br><span class="line">raw_input()</span><br><span class="line">a = input()    <span class="comment">#python3</span></span><br><span class="line"><span class="comment">#3+4 ----&gt;a = "3+4" #str</span></span><br></pre></td></tr></table></figure><ul><li>对于各种数据类型的转换<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#100---&gt;a = "100"</span></span><br><span class="line">int("100")---&gt;100</span><br><span class="line">str(100)----&gt;"100"</span><br><span class="line">33670---&gt;str(33670)---&gt;"33670"---&gt;len("33670")---&gt;5</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-字符串、列表、元组、字典、集合、列表生成式、类型转换"><a href="#3-字符串、列表、元组、字典、集合、列表生成式、类型转换" class="headerlink" title="3. 字符串、列表、元组、字典、集合、列表生成式、类型转换"></a>3. 字符串、列表、元组、字典、集合、列表生成式、类型转换</h1><ul><li>什么是字符串，切片，怎么倒转字符串<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"abcd"</span></span><br><span class="line">a[:3]----&gt;"abc"</span><br><span class="line">a[::-1]----&gt;"dcba"</span><br></pre></td></tr></table></figure></li><li>列表的增删改查</li><li>元组的只读</li><li>字典与集合</li><li>什么时候用列表，什么时候用字典，字典的key需要不可变类型，不可哈希</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,1,1,1]---&gt;增删改查</span><br><span class="line"></span><br><span class="line">(1,2,3,1,1,1)--&gt;只读</span><br><span class="line"></span><br><span class="line">&#123;1,2,3,1,1,1&#125;----&gt;&#123;1,2,3&#125; 集合---元素不重复</span><br><span class="line"></span><br><span class="line">字典----&gt;&#123;key:value, key2:value&#125;</span><br><span class="line"></span><br><span class="line">[<span class="string">"aa"</span>,<span class="string">"ddd"</span>]</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"asdf"</span>,<span class="string">"age"</span>:<span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line">[&#123;<span class="string">"name"</span>:<span class="string">"xxx"</span>,<span class="string">"family"</span>:[&#123;<span class="string">"小姑"</span>:<span class="string">"aa"</span>,<span class="string">"family"</span>:[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"cc"</span>]&#125;,<span class="string">"bb"</span>,<span class="string">"ccc"</span>]&#125;,&#123;&#125;,&#123;&#125;]</span><br></pre></td></tr></table></figure><ul><li>可变类型/不可变类型<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可变类型：列表、字典、集合</span><br><span class="line">不可变类型：数字、字符串、元组</span><br></pre></td></tr></table></figure></li><li>列表去重的方法</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">111</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">1</span>,<span class="number">111</span>,<span class="number">111</span>,<span class="number">111</span>,<span class="number">343</span>]</span><br><span class="line">b = set(a)</span><br><span class="line">c = list(b)</span><br><span class="line">d = tuple(a)</span><br><span class="line"></span><br><span class="line">"a"+"b"----&gt;"ab"</span><br></pre></td></tr></table></figure><h1 id="4-切片"><a href="#4-切片" class="headerlink" title="4. 切片"></a>4. 切片</h1><p>顺序、选择、循环</p><h1 id="5-if语句"><a href="#5-if语句" class="headerlink" title="5. if语句"></a>5. if语句</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">xxxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">xxxx</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">xxxx2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">xxx1</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">xxx2:</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">3</span>:</span><br><span class="line">xxxx3</span><br><span class="line">.....</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">xxxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> xxx:</span><br><span class="line">xxx</span><br><span class="line">xxx</span><br><span class="line">xx</span><br><span class="line"><span class="keyword">if</span> yyy:</span><br><span class="line">yyyyy1</span><br></pre></td></tr></table></figure><h1 id="6-while语句"><a href="#6-while语句" class="headerlink" title="6. while语句"></a>6. while语句</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">100</span>:</span><br><span class="line">xxxx</span><br><span class="line">xxx</span><br><span class="line">xxx</span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> i&gt;<span class="number">0</span>:</span><br><span class="line">print(i)</span><br><span class="line">i-=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> xxx:</span><br><span class="line"><span class="keyword">while</span> yyy:</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h1 id="7-for"><a href="#7-for" class="headerlink" title="7. for"></a>7. for</h1><ul><li>一般什么情况用for循环 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">111</span>,<span class="number">22</span>,<span class="number">33</span>]     </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">xxxxx               <span class="comment">#遍历</span></span><br></pre></td></tr></table></figure><p><strong>思考：在执行的时候i能改值吗    ？</strong></p><h1 id="8-各种嵌套"><a href="#8-各种嵌套" class="headerlink" title="8. 各种嵌套"></a>8. 各种嵌套</h1><h1 id="9-函数、参数、返回值、全局-局部变量、多个return、一个return返回多个值"><a href="#9-函数、参数、返回值、全局-局部变量、多个return、一个return返回多个值" class="headerlink" title="9. 函数、参数、返回值、全局/局部变量、多个return、一个return返回多个值"></a>9. 函数、参数、返回值、全局/局部变量、多个return、一个return返回多个值</h1><ul><li>什么是函数</li><li>参数分为实参，和形参</li><li>什么叫缺省参数<br>  xxx(实参)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">结束一个函数:<span class="keyword">return</span></span><br><span class="line">结束一个循环:<span class="keyword">break</span>/<span class="keyword">continue</span></span><br><span class="line">结束一个程序:exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a,b,c=<span class="number">100</span>,*args,**kwargs)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">test(b=<span class="number">11</span>,a=<span class="number">22</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,mm=<span class="number">100</span>,nn=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> num</span><br><span class="line">num=<span class="number">200</span></span><br></pre></td></tr></table></figure><p>​    </p><h1 id="10-类、对象"><a href="#10-类、对象" class="headerlink" title="10. 类、对象"></a>10. 类、对象</h1><p>类的作用，再次封装</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(父类)</span>:</span></span><br><span class="line"></span><br><span class="line">类属性</span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">实例方法</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">self.xxx = <span class="number">100</span> 实例属性</span><br><span class="line">父类名字.父类方法(self)</span><br><span class="line">super().父类的方法名()</span><br><span class="line">super(当前类的名字Animal,self).父类的方法名()</span><br><span class="line"></span><br><span class="line">实例方法</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tset</span><span class="params">(self)</span>:</span></span><br><span class="line">Animal.num = <span class="number">300</span></span><br><span class="line"></span><br><span class="line">类方法</span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxx</span><span class="params">(cls)</span>:</span></span><br><span class="line">cls.num = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">静态方法</span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">yyy</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Animal()</span><br><span class="line">b = a</span><br><span class="line"></span><br><span class="line">del a-----&gt;不会调用__del__</span><br><span class="line">del b-----&gt;调用__del__方法</span><br></pre></td></tr></table></figure><h1 id="11-异常"><a href="#11-异常" class="headerlink" title="11. 异常"></a>11. 异常</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">xxxx</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> 异常的名字:</span><br><span class="line">异常的处理。。。。</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">没有异常的时候执行</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">不管有没有产生异常，都会执行</span><br></pre></td></tr></table></figure><h1 id="12-模块、包"><a href="#12-模块、包" class="headerlink" title="12. 模块、包"></a>12. 模块、包</h1><p>模块和包的区别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块、包xxxx</span><br><span class="line">xxxx.功能()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 模块 <span class="keyword">import</span> test1,test2</span><br><span class="line">test1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .... <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">"__main__"</span>:</span><br><span class="line">xxx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
